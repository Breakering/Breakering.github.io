<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jacob个人技术博客</title>
  
  <subtitle>Python is cool!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.breakering.com/"/>
  <updated>2019-02-28T05:22:46.172Z</updated>
  <id>http://blog.breakering.com/</id>
  
  <author>
    <name>Jacob</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ubuntu18.04设置开机启动脚本</title>
    <link href="http://blog.breakering.com/2019/02/28/ubuntu-boot-script/"/>
    <id>http://blog.breakering.com/2019/02/28/ubuntu-boot-script/</id>
    <published>2019-02-28T05:20:45.000Z</published>
    <updated>2019-02-28T05:22:46.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-建立rc-local-service文件">一、建立rc-local.service文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/systemd/system/rc-local.service</span><br></pre></td></tr></table></figure><h2 id="二-将下列内容复制进rc-local-service文件">二、将下列内容复制进rc-local.service文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=/etc/rc.local Compatibility</span><br><span class="line">ConditionPathExists=/etc/rc.local</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/etc/rc.local start</span><br><span class="line">TimeoutSec=0</span><br><span class="line">StandardOutput=tty</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">SysVStartPriority=99</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h2 id="三-创建文件rc-local">三、创建文件rc.local</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/rc.local</span><br></pre></td></tr></table></figure><h2 id="四-将下列内容复制进rc-local文件">四、将下列内容复制进rc.local文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh -e</span><br><span class="line">#</span><br><span class="line"># rc.local</span><br><span class="line">#</span><br><span class="line"># This script is executed at the end of each multiuser runlevel.</span><br><span class="line"># Make sure that the script will &quot;exit 0&quot; on success or any other</span><br><span class="line"># value on error.</span><br><span class="line">#</span><br><span class="line"># In order to enable or disable this script just change the execution</span><br><span class="line"># bits.</span><br><span class="line">#</span><br><span class="line"># By default this script does nothing.</span><br><span class="line">echo &quot;看到这行字，说明添加自启动脚本成功。&quot; &gt; /usr/local/test.log</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><h2 id="五-给rc-local加上权限-启用服务">五、给rc.local加上权限,启用服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /etc/rc.local</span><br><span class="line">sudo systemctl enable rc-local</span><br></pre></td></tr></table></figure><h2 id="六-启动服务并检查状态">六、启动服务并检查状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start rc-local.service</span><br><span class="line">sudo systemctl status rc-local.service</span><br></pre></td></tr></table></figure><h2 id="七-重启并检查test-log文件">七、重启并检查test.log文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/local/test.log</span><br></pre></td></tr></table></figure><blockquote><p>PS:ubuntu16.04直接编辑/etc/rc.local文件即可</p></blockquote>]]></content>
    
    <summary type="html">
    
      ubuntu18.04设置开机启动脚本
    
    </summary>
    
      <category term="Ubuntu" scheme="http://blog.breakering.com/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="http://blog.breakering.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装supervisor</title>
    <link href="http://blog.breakering.com/2019/01/27/install-supervisor/"/>
    <id>http://blog.breakering.com/2019/01/27/install-supervisor/</id>
    <published>2019-01-27T07:07:49.000Z</published>
    <updated>2019-01-27T07:29:58.846Z</updated>
    
    <content type="html"><![CDATA[<h1>介绍</h1><p><a href="https://github.com/Supervisor/supervisor" target="_blank" rel="noopener">Supervisor</a> 是一个用 Python 写的进程管理工具，可以很方便的对进程进行启动、停止、重启等操作。</p><h1>安装</h1><h2 id="for-ubuntu">For Ubuntu</h2><ul><li>安装命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install supervisor</span></span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><p>安装成功后，会在<code>/etc/supervisor</code>目录下，生成<code>supervisord.conf</code>配置文件。</p><p>进程配置会读取<code>/etc/supervisor/conf.d</code>目录下的<code>*.conf</code>配置文件，我们在此目录下创建一个<code>product_celeryd.conf</code>进程配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[program:product_celeryd]</span><br><span class="line">directory      = /webapps/product/</span><br><span class="line">command        = /webapps/product/env/bin/celery -A licaishi worker -Q product</span><br><span class="line">user           = root</span><br><span class="line">stdout_logfile = /webapps/product/logs/product_celeryd.log</span><br><span class="line">stderr_logfile = /webapps/product/logs/product_celeryd.log</span><br><span class="line">autostart      = true</span><br><span class="line">autorestart    = true</span><br><span class="line">startsecs      = 10</span><br><span class="line">stopwaitsecs   = 600</span><br></pre></td></tr></table></figure><ul><li>启动</li></ul><p>接着就可以启动 Supervisord 了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> supervisord</span></span><br></pre></td></tr></table></figure><p><code>supervisorctl</code> 常用命令：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>supervisorctl stop program_name</td><td>停止某个进程</td></tr><tr><td>supervisorctl start program_name</td><td>启动某个进程</td></tr><tr><td>supervisorctl restart program_name</td><td>重启某个进程</td></tr><tr><td>supervisorctl stop all</td><td>停止全部进程</td></tr><tr><td>supervisorctl reload</td><td>载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程</td></tr><tr><td>supervisorctl update</td><td>根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启</td></tr></tbody></table><h2 id="for-centos">For Centos</h2><ul><li><strong>安装</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install python-setuptools</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> easy_install supervisor</span></span><br></pre></td></tr></table></figure><ul><li><strong>创建配置文件(supervisord.conf）</strong></li></ul><p>使用root身份创建一个全局配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> echo_supervisord_conf &gt; /etc/supervisord.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> supervisord -c /etc/supervisord.conf</span></span><br></pre></td></tr></table></figure><ul><li><strong>修改配置文件(supervisord.conf）</strong></li></ul><p>如果修改了 /etc/supervisord.conf ,需要执行<code># supervisorctl reload</code>来重新加载配置文件，否则不会生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> supervisord 是启动supervisor </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> supervisorctl 是控制supervisord</span></span><br></pre></td></tr></table></figure><p>打开supervisord.conf 的 [include] 引入 files的配置.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/conf.d/*.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/conf.d/*.conf</span><br></pre></td></tr></table></figure><p>需要创建<code>/etc/supervisor/conf.d/</code></p><ul><li><strong>重启</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> supervisorctl reload</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Linux下安装supervisor
    
    </summary>
    
      <category term="supervisor" scheme="http://blog.breakering.com/categories/supervisor/"/>
    
    
      <category term="supervisor" scheme="http://blog.breakering.com/tags/supervisor/"/>
    
  </entry>
  
  <entry>
    <title>django修改request对象</title>
    <link href="http://blog.breakering.com/2018/12/12/modify-request/"/>
    <id>http://blog.breakering.com/2018/12/12/modify-request/</id>
    <published>2018-12-12T10:43:17.000Z</published>
    <updated>2018-12-12T11:00:59.232Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Remove immutability:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> request.GET._mutable:</span><br><span class="line">   request.GET._mutable = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># now you can spoil it</span></span><br><span class="line">request.GET[<span class="string">'pwd'</span>] = <span class="string">'iloveyou'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      django修改request对象
    
    </summary>
    
      <category term="Django" scheme="http://blog.breakering.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://blog.breakering.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>vue跨域配置</title>
    <link href="http://blog.breakering.com/2018/11/30/vue-cross-domain/"/>
    <id>http://blog.breakering.com/2018/11/30/vue-cross-domain/</id>
    <published>2018-11-30T07:16:11.000Z</published>
    <updated>2018-12-13T03:30:40.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开发环境">开发环境</h2><p><strong>如果你使用的是vue-cli3的话，则可按如下配置</strong></p><ul><li>在你的项目根目录创建<code>vue.config.js</code>文件</li><li>在文件中写入如下配置信息:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置proxy</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/api'</span>: &#123;</span><br><span class="line">                target: <span class="string">'https://xxxx.xxxxxxxxxx.com'</span>,</span><br><span class="line">                ws: <span class="literal">true</span>,</span><br><span class="line">                changeOrigin: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>参考<a href="https://cli.vuejs.org/zh/config/#devserver-proxy" target="_blank" rel="noopener">devserver-proxy</a></p></blockquote><h2 id="线上环境">线上环境</h2><p><strong>线上通过nginx代理,实现跨域</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">   <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">   <span class="attribute">server_name</span> www.breakering.com;  <span class="comment"># 你的域名</span></span><br><span class="line">   <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">        <span class="attribute">root</span> /home/jacob/study/licaishi_pc/dist;  <span class="comment"># vue buil之后dist文件夹位置</span></span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html =<span class="number">404</span>;  <span class="comment"># 可以让浏览器在子页面也能刷新，主要是vue-router的路径不是真实路径导致</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment"># 用/api来访问其他网站的接口，实现跨域</span></span><br><span class="line">   <span class="attribute">location</span> /api &#123;</span><br><span class="line">        <span class="comment"># 下面三个是跨域的一些设置</span></span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">'GET, POST, PUT, PATCH, DELETE, OPTIONS'</span>;</span><br><span class="line">        <span class="comment"># Access-Control-Allow-Headers需要注意，会屏蔽一些headers，部署时需要注意</span></span><br><span class="line">        <span class="attribute">add_header</span> Access-Control-Allow-Headers <span class="string">'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,X-CSRFTOKEN'</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> https://xxxx.xxxxxxxxxx.com/api;  <span class="comment"># 其他网站的接口</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      vue跨域配置
    
    </summary>
    
      <category term="vue" scheme="http://blog.breakering.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://blog.breakering.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue中axios全局设置csrftoken以及Authorization</title>
    <link href="http://blog.breakering.com/2018/11/29/vue-axios-set/"/>
    <id>http://blog.breakering.com/2018/11/29/vue-axios-set/</id>
    <published>2018-11-29T10:48:17.000Z</published>
    <updated>2018-12-12T06:49:11.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说在前面">说在前面</h2><p>我们都知道，用django做后端服务时，对于post请求提交表单时总是需要csrftoken的验证，那么我们如何在vue中使用axios发起请求时全局在headers里面设置csrftoken呢？以及全局设置Authorization?</p><h2 id="设置">设置</h2><p>其实非常简单，在main.js中设置下即可，示例代码如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./plugins/axios.js'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./plugins/cookies.js'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    router,</span><br><span class="line">    store,</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line"><span class="comment">//进入页面时</span></span><br><span class="line">    created() &#123;</span><br><span class="line">        <span class="comment">// 拦截axios请求</span></span><br><span class="line">        <span class="keyword">this</span>.axios.interceptors.request.use(</span><br><span class="line">            config =&gt; &#123;</span><br><span class="line">                <span class="comment">// 设置登录验证token</span></span><br><span class="line">                <span class="keyword">const</span> token = <span class="keyword">this</span>.$store.state.userInfo.Authorization;</span><br><span class="line">                <span class="keyword">if</span> (token) &#123;</span><br><span class="line">                    config.headers.Authorization = token;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 设置csrftoken</span></span><br><span class="line">                <span class="keyword">const</span> csrftoken = <span class="keyword">this</span>.$cookies.get(<span class="string">'csrftoken'</span>);</span><br><span class="line">                <span class="keyword">if</span> (csrftoken) &#123;</span><br><span class="line">                    config.headers[<span class="string">'X-CSRFTOKEN'</span>] = csrftoken;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> config</span><br><span class="line">            &#125;,</span><br><span class="line">            error =&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>);</span><br></pre></td></tr></table></figure><p>另外贴下我的store.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        userInfo: &#123;</span><br><span class="line">            username: <span class="string">""</span>,  <span class="comment">// 用户名</span></span><br><span class="line">            Authorization: <span class="string">""</span>,  <span class="comment">// 用户登录的验证Token</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        <span class="comment">// 更新用户信息</span></span><br><span class="line">        updateUserInfo(state, userInfo) &#123;</span><br><span class="line">            state.userInfo.Authorization = userInfo.Authorization;</span><br><span class="line">            state.userInfo.username = userInfo.username;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        updateUserInfo(&#123;commit&#125;, userInfo) &#123;</span><br><span class="line">            commit(<span class="string">'updateUserInfo'</span>, userInfo)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="考虑封装axios">考虑封装axios</h2><h3 id="封装进api">封装进api</h3><ul><li>创建api文件夹,其中创建一个<code>api.js</code></li><li>编辑plugins下的<code>axios.js</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">'vue-axios'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../store'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueAxios, axios);</span><br><span class="line"></span><br><span class="line"><span class="comment">// base url</span></span><br><span class="line"><span class="comment">// Vue.axios.defaults.baseURL = 'http://127.0.0.1:9001';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求超时时间</span></span><br><span class="line">Vue.axios.defaults.timeout = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">Vue.axios.interceptors.request.use(</span><br><span class="line">    config =&gt; &#123;</span><br><span class="line">        <span class="comment">// 设置登录验证token</span></span><br><span class="line">        <span class="keyword">const</span> token = store.state.userInfo.Authorization;</span><br><span class="line">        <span class="keyword">if</span> (token) &#123;</span><br><span class="line">            config.headers.Authorization = token;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置csrftoken</span></span><br><span class="line">        <span class="keyword">const</span> csrftoken = Vue.cookies.get(<span class="string">'csrftoken'</span>);</span><br><span class="line">        <span class="keyword">if</span> (csrftoken) &#123;</span><br><span class="line">            config.headers[<span class="string">'X-CSRFTOKEN'</span>] = csrftoken;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(token, csrftoken);</span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    &#125;,</span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">Vue.axios.interceptors.response.use(</span><br><span class="line">    <span class="comment">// 请求成功</span></span><br><span class="line">    res =&gt; <span class="built_in">Promise</span>.resolve(res),</span><br><span class="line">    <span class="comment">// 请求失败</span></span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">        <span class="comment">// 请求已发出，但是不在2xx的范围</span></span><br><span class="line">        <span class="built_in">console</span>.log(error);  <span class="comment">// 这儿可以用UI插件做个弹窗提醒</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><ul><li>编辑<code>api.js</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> login = <span class="function"><span class="params">data</span> =&gt;</span> Vue.axios.post(</span><br><span class="line">    <span class="string">'/api/xxxx/login/'</span>, data</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取新闻列表接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getNews = <span class="function"><span class="params">params</span> =&gt;</span> Vue.axios.get(</span><br><span class="line">    <span class="string">'/api/xxxx/newsflashmaterial/?ordering=-create_time'</span>, params</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>我的<code>main.js</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./plugins/element.js'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./plugins/cookies.js'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./plugins/axios.js'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.....</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123;login&#125; <span class="keyword">from</span> <span class="string">"../api/api"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"Login"</span>,</span><br><span class="line">        data() &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                formLabelAlign: &#123;</span><br><span class="line">                    username: <span class="string">''</span>,</span><br><span class="line">                    password: <span class="string">''</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            submitForm() &#123;</span><br><span class="line">                login(<span class="keyword">this</span>.formLabelAlign).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// 登录成功之后的操作</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="完成">完成</h2>]]></content>
    
    <summary type="html">
    
      vue中axios全局设置csrftoken以及Authorization
    
    </summary>
    
      <category term="vue" scheme="http://blog.breakering.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://blog.breakering.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue使用axios</title>
    <link href="http://blog.breakering.com/2018/11/27/vue-use-axios/"/>
    <id>http://blog.breakering.com/2018/11/27/vue-use-axios/</id>
    <published>2018-11-27T02:23:02.000Z</published>
    <updated>2018-12-12T06:49:11.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装">安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save axios vue-axios</span><br></pre></td></tr></table></figure><h2 id="引入">引入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">import VueAxios from &apos;vue-axios&apos;</span><br><span class="line"></span><br><span class="line">axios.defaults.baseURL=&apos;http://localhost:8000&apos;;  // 可以设置baseURL</span><br><span class="line">Vue.use(VueAxios, axios)</span><br></pre></td></tr></table></figure><h2 id="使用">使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getNewsList()&#123;</span><br><span class="line">      this.axios.get(&apos;api/getNewsList&apos;).then((response)=&gt;&#123;</span><br><span class="line">        this.newsList=response.data.data;</span><br><span class="line">      &#125;).catch((response)=&gt;&#123;</span><br><span class="line">        console.log(response);</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考">参考</h2><p><a href="https://segmentfault.com/a/1190000013128858" target="_blank" rel="noopener">vue全局使用axios的方法</a></p><p><a href="https://www.npmjs.com/package/vue-axios" target="_blank" rel="noopener">vue-axios</a></p><p><a href="https://blog.csdn.net/wild46cat/article/details/78006280" target="_blank" rel="noopener">vue添加axios，并且指定baseurl</a></p>]]></content>
    
    <summary type="html">
    
      vue使用axios发起http请求
    
    </summary>
    
      <category term="vue" scheme="http://blog.breakering.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://blog.breakering.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>jupyter美化</title>
    <link href="http://blog.breakering.com/2018/11/26/jupyter-beauty/"/>
    <id>http://blog.breakering.com/2018/11/26/jupyter-beauty/</id>
    <published>2018-11-26T02:17:10.000Z</published>
    <updated>2018-12-12T06:49:11.159Z</updated>
    
    <content type="html"><![CDATA[<h1>jupyterthemes</h1><h2 id="安装jupyter主题">安装jupyter主题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># install jupyterthemes</span><br><span class="line">pip install jupyterthemes</span><br><span class="line"></span><br><span class="line"># upgrade to latest version</span><br><span class="line">pip install --upgrade jupyterthemes</span><br></pre></td></tr></table></figure><h2 id="使用主题">使用主题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jt -t monokai -fs 95 -altp -tfs 11 -nfs 115 -cellw 88% -N -T</span><br></pre></td></tr></table></figure><h2 id="更多主题设置">更多主题设置</h2><p><a href="https://github.com/dunovank/jupyter-themes" target="_blank" rel="noopener">jupyterthemes</a></p><h1>jupyter_contrib_nbextensions</h1><h2 id="安装jupyter-contrib-nbextensions">安装jupyter_contrib_nbextensions</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter_contrib_nbextensions</span><br></pre></td></tr></table></figure><h2 id="安装js和css文件">安装js和css文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter contrib nbextension install --user</span><br></pre></td></tr></table></figure><h2 id="扩展选用">扩展选用</h2><p><img src="/images/2018-11-26/1543199245282.png" alt="1543199245282"></p><h2 id="完成">完成</h2>]]></content>
    
    <summary type="html">
    
      jupyter美化
    
    </summary>
    
      <category term="jupyter" scheme="http://blog.breakering.com/categories/jupyter/"/>
    
    
      <category term="jupyter" scheme="http://blog.breakering.com/tags/jupyter/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 中 Typora 安装</title>
    <link href="http://blog.breakering.com/2018/11/26/ubuntu-typora/"/>
    <id>http://blog.breakering.com/2018/11/26/ubuntu-typora/</id>
    <published>2018-11-26T01:53:19.000Z</published>
    <updated>2018-12-12T06:49:11.075Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># optional, but recommended</span><br><span class="line"></span><br><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span><br><span class="line"></span><br><span class="line"># add Typora&apos;s repository</span><br><span class="line"></span><br><span class="line">sudo add-apt-repository &apos;deb http://typora.io linux/&apos;</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"># install typora</span><br><span class="line"></span><br><span class="line">sudo apt-get install typora</span><br></pre></td></tr></table></figure><blockquote><p>另外推荐安装下Vue的theme，地址:<a href="https://theme.typora.io/theme/Vue/" target="_blank" rel="noopener">https://theme.typora.io/theme/Vue/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      ubuntu 中 Typora 安装
    
    </summary>
    
      <category term="Ubuntu" scheme="http://blog.breakering.com/categories/Ubuntu/"/>
    
      <category term="工具" scheme="http://blog.breakering.com/categories/Ubuntu/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Ubuntu" scheme="http://blog.breakering.com/tags/Ubuntu/"/>
    
      <category term="工具" scheme="http://blog.breakering.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>GitLab升级</title>
    <link href="http://blog.breakering.com/2018/11/19/gitlab-update/"/>
    <id>http://blog.breakering.com/2018/11/19/gitlab-update/</id>
    <published>2018-11-19T08:18:49.000Z</published>
    <updated>2018-12-12T06:46:59.849Z</updated>
    
    <content type="html"><![CDATA[<h1>更新 GitLab</h1><blockquote><p>我们用的是 GitLab Omnibus 7.10.5 版本，查到<a href="http://docs.gitlab.com/omnibus/update/README.html" target="_blank" rel="noopener">Doc</a>（6.x.x 等低版本区别对待，详见文档）。<br>按照文档：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># To update to a newer GitLab version, all you have to do is:</span><br><span class="line"># Debian/Ubuntu</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install gitlab-ce</span><br><span class="line"># Centos/RHEL</span><br><span class="line">sudo yum install gitlab-ce</span><br></pre></td></tr></table></figure><p>看起来太简单了！事实上，也就是这么简单。</p><p>但是，问题来了，<code>sudo apt-get install gilab-ce</code> 默认所用的源是 <em><a href="http://packages-gitlab-com.s3.amazonaws.com" target="_blank" rel="noopener">packages-gitlab-com.s3.amazonaws.com</a></em>，然后你懂的，被墙了！</p><p>解决办法有两个：</p><ol><li>给 apt 加代理；</li><li>换源。</li></ol><h2 id="1-给-apt-加代理">1). 给 apt 加代理</h2><p>考虑到换源可能产生其他的依赖问题，先尝试 加代理。结果是加了代理还是不行！原因可能是代理连接速度问题，总是超时。</p><p>这里参考的是 <a href="http://www.a-ho.com/2016/01/16/%E6%89%93%E9%80%A0Linux-%E7%BB%88%E7%AB%AF%E7%BF%BB%E5%A2%99%E7%8E%AF%E5%A2%83/" target="_blank" rel="noopener">打造Linux 终端翻墙环境</a>  使用 <code>shadowsocks + privoxy</code> 。</p><h2 id="2-换源解决">2). 换源解决！</h2><p>Docs 里已经有声明其实：</p><p><img src="/images/2018-11-19/3.png" alt=""></p><ul><li>首先，添加信任 GitLab 里的 GPG 公钥：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://packages.gitlab.com/gpg.key 2&gt; /dev/null | sudo apt-key add - &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure><ul><li>然后把 <code>/etc/apt/sources.list.d/gitlab_gitlab-ce.list</code> 文件中默认的源换成 <em>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu</a> trusty main</em></li></ul><p><img src="/images/2018-11-19/4.png" alt=""></p><ul><li>最后：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update</span><br><span class="line">sudo apt-get install gitlab-ce</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>安装完成！</p></blockquote></blockquote></blockquote><h1>对于更新版本跨度较大的情况</h1><h2 id="1-关闭部分gitlab服务">1). 关闭部分gitlab服务</h2><p>升级之前，我们首先要关闭gitlab部分服务，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl stop unicorn</span><br><span class="line">gitlab-ctl stop sidekiq</span><br><span class="line">gitlab-ctl stop nginx</span><br></pre></td></tr></table></figure><h2 id="2-选择要升级的版本">2). 选择要升级的版本</h2><p><a href="https://packages.gitlab.com/gitlab/gitlab-ce?filter=debs" target="_blank" rel="noopener">版本查看地址</a></p><p>然后执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install gitlab-ce=11.0.3-ce.0</span><br></pre></td></tr></table></figure><p>其中<code>11.0.3</code>替换为你要升级的版本号。</p><p><strong>ps:版本跨度过大，请务必一个小版本一个小版本的更新</strong></p><p>另外，附上一次成功的更新过程对应的版本号：</p><p><code>9.2.5--&gt;9.5.6--&gt;10.0.6--&gt;10.8.5--&gt;11.0.3</code></p><h2 id="3-重启gitlab">3). 重启gitlab</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure><h1>References:</h1><ol><li><a href="http://www.a-ho.com/2016/01/16/%E6%89%93%E9%80%A0Linux-%E7%BB%88%E7%AB%AF%E7%BF%BB%E5%A2%99%E7%8E%AF%E5%A2%83/" target="_blank" rel="noopener">http://www.a-ho.com/2016/01/16/打造Linux-终端翻墙环境/</a></li><li><a href="https://about.gitlab.com/downloads/#ubuntu1404" target="_blank" rel="noopener">https://about.gitlab.com/downloads/#ubuntu1404</a></li><li><a href="https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/" target="_blank" rel="noopener">https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/</a></li><li><a href="http://docs.gitlab.com/omnibus/update/README.html" target="_blank" rel="noopener">http://docs.gitlab.com/omnibus/update/README.html</a></li><li><a href="https://about.gitlab.com/upgrade-to-package-repository/" target="_blank" rel="noopener">https://about.gitlab.com/upgrade-to-package-repository/</a></li><li><a href="https://packages.gitlab.com/gitlab/gitlab-ce/packages/ubuntu/trusty/gitlab-ce_8.9.5-ce.0_amd64.deb" target="_blank" rel="noopener">https://packages.gitlab.com/gitlab/gitlab-ce/packages/ubuntu/trusty/gitlab-ce_8.9.5-ce.0_amd64.deb</a></li><li><a href="https://www.ilanni.com/?p=13917" target="_blank" rel="noopener">https://www.ilanni.com/?p=13917</a></li><li><a href="https://www.58jb.com/html/189.html" target="_blank" rel="noopener">https://www.58jb.com/html/189.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      GitLab升级
    
    </summary>
    
      <category term="GitLab" scheme="http://blog.breakering.com/categories/GitLab/"/>
    
    
      <category term="GitLab" scheme="http://blog.breakering.com/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>GitLab备份与恢复</title>
    <link href="http://blog.breakering.com/2018/11/19/gitlab-backup/"/>
    <id>http://blog.breakering.com/2018/11/19/gitlab-backup/</id>
    <published>2018-11-19T08:15:50.000Z</published>
    <updated>2018-12-12T06:47:00.029Z</updated>
    
    <content type="html"><![CDATA[<h1>一、 备份gitlab</h1><p>gitlab的备份比较简单，我们直接使用gitlab本身提供的命令进行备份即可。</p><h2 id="1-1-通过gitlab-rake命令备份gitlab">1.1 通过gitlab-rake命令备份gitlab</h2><p>gitlab提供的备份命令为gitlab-rake，备份命令使用如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><p>该命令会备份gitlab仓库、数据库、用户、用户组、用户密钥、权限等信息。</p><p>备份完成后备份文件会出现在<code>/var/opt/gitlab/backups/</code><br><img src="/images/2018-11-19/1.png" alt=""></p><p>当然备份的位置可以更换,使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure><p><img src="/images/2018-11-19/2.png" alt=""></p><p>修改上图<code>backup_path</code>的值即可，之后使用<code>gitlab-ctl reconfigure</code>使得配置生效</p><p><strong>ps：备份文件的名称中1537261122_2018_09_18_9.2.5是此次备份的编号。该编号我们会在后续恢复gitlab数据使用到。</strong></p><h2 id="1-2-定时备份gitlab">1.2 定时备份gitlab</h2><p>如果要使ｇitlab自动进行备份的话，我们可以通过crontab命令来实现自动备份。强烈建议使用系统crontab命令，而不是用户crontab。</p><p>以实现每天凌晨4点进行一次自动备份为例，系统的crontab配置如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/crontab</span><br></pre></td></tr></table></figure><p><code>0 4 * * * root /opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1</code></p><p>然后重启crontab服务，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart crond</span><br></pre></td></tr></table></figure><h2 id="1-3-保留部分备份文件">1.3 保留部分备份文件</h2><p>随着时间的推移gitlab备份文件越来越多，服务器的磁盘空间也不够大。</p><p>此时我们就要删除部分旧的备份文件，gitlab也提供了删除旧的备份文件功能。该功能在gitlab的配置文件中，进行配置即可。</p><p>在此以保留7天之前的备份文件为例，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure><p><code>gitlab_rails[‘backup_keep_time’] = 604800</code></p><p>其中backup_keep_time是以秒为单位进行计算的，然后执行命令<code>gitlab-ctl reconfigure</code>即可。</p><h1>二、gitlab仓库恢复</h1><p>要验证gitlab备份的有效性，我们可以把该备份文件复制到已经安装好gitlab服务器的/var/opt/gitlab/backups/目录下。然后进行数据恢复，最后访问并查看其数据完整性即可。</p><p>通过gitlab备份文件可以恢复gitlab所有的信息，包括仓库、数据库、用户、用户组、用户密钥、权限等信息。</p><p><strong>ps：新服务器上的gitlab的版本号必须与创建备份时的gitlab版本号相同。</strong></p><p>gitlab数据恢复比较简单，具体步骤如下：</p><h2 id="2-1-停止相关数据连接服务">2.1 停止相关数据连接服务</h2><p>在gitlab服务器上停止相关数据连接服务，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl stop unicorn</span><br><span class="line">gitlab-ctl stop sidekiq</span><br></pre></td></tr></table></figure><h2 id="2-2-恢复gitlab仓库">2.2 恢复gitlab仓库</h2><p>现在我们要从1537261122_2018_09_18_9.2.5这个备份编号中，恢复数据，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:restore BACKUP=1537261122_2018_09_18_9.2.5</span><br></pre></td></tr></table></figure><p>如果出现多个done的信息，说明整个gitlab数据就已经正常恢复完毕。</p><h2 id="2-3-启动gitlab服务">2.3 启动gitlab服务</h2><p>恢复完毕以后，我们现在来启动gitlab，使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl start</span><br></pre></td></tr></table></figure><p><strong>强烈建议：重启该新服务器。</strong></p><h1>三、References:</h1><ol><li><a href="https://www.ilanni.com/?p=13890" target="_blank" rel="noopener">gitlab的备份与恢复</a></li></ol>]]></content>
    
    <summary type="html">
    
      GitLab备份与恢复
    
    </summary>
    
      <category term="GitLab" scheme="http://blog.breakering.com/categories/GitLab/"/>
    
    
      <category term="GitLab" scheme="http://blog.breakering.com/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>使用pipenv管理python项目</title>
    <link href="http://blog.breakering.com/2018/11/19/pipenv/"/>
    <id>http://blog.breakering.com/2018/11/19/pipenv/</id>
    <published>2018-11-19T06:19:10.000Z</published>
    <updated>2019-02-21T10:19:39.671Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装pipenv">安装pipenv</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipenv</span><br></pre></td></tr></table></figure><h2 id="项目初始化">项目初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> your_project</span><br><span class="line">PIPENV_VENV_IN_PROJECT=<span class="literal">true</span> pipenv --python=3.6</span><br></pre></td></tr></table></figure><p>将在项目目录中创建新文件<code>Pipfile</code>和一个虚拟环境<code>.venv</code>, <code>--python=3.6</code>则是使用<code>python3.6</code>来创建虚拟环境,<code>PIPENV_VENV_IN_PROJECT=true</code>则是让虚拟环境创建在该项目目录下，方便管理。</p><p>如果你添加–two或–three标志到上面的最后一个命令，它分别使用Python 2或3来初始化你的项目。 否则将使用默认版本的Python。</p><h2 id="激活开发环境">激活开发环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv shell</span><br></pre></td></tr></table></figure><h2 id="退出开发环境">退出开发环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="使用说明-pipenv-h">使用说明(<code>pipenv -h</code>)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">Usage: pipenv [OPTIONS] COMMAND [ARGS]...</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --<span class="built_in">where</span>             Output project home information.</span><br><span class="line">  --venv              Output virtualenv information.</span><br><span class="line">  --py                Output Python interpreter information.</span><br><span class="line">  --envs              Output Environment Variable options.</span><br><span class="line">  --rm                Remove the virtualenv.</span><br><span class="line">  --bare              Minimal output.</span><br><span class="line">  --completion        Output completion (to be <span class="built_in">eval</span><span class="string">'d).</span></span><br><span class="line"><span class="string">  --man               Display manpage.</span></span><br><span class="line"><span class="string">  --support           Output diagnostic information for use in GitHub issues.</span></span><br><span class="line"><span class="string">  --site-packages     Enable site-packages for the virtualenv.</span></span><br><span class="line"><span class="string">  --python TEXT       Specify which version of Python virtualenv should use.</span></span><br><span class="line"><span class="string">  --three / --two     Use Python 3/2 when creating virtualenv.</span></span><br><span class="line"><span class="string">  --clear             Clears caches (pipenv, pip, and pip-tools).</span></span><br><span class="line"><span class="string">  -v, --verbose       Verbose mode.</span></span><br><span class="line"><span class="string">  --pypi-mirror TEXT  Specify a PyPI mirror.</span></span><br><span class="line"><span class="string">  --version           Show the version and exit.</span></span><br><span class="line"><span class="string">  -h, --help          Show this message and exit.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Usage Examples:</span></span><br><span class="line"><span class="string">   Create a new project using Python 3.7, specifically:</span></span><br><span class="line"><span class="string">   $ pipenv --python 3.7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Remove project virtualenv (inferred from current directory):</span></span><br><span class="line"><span class="string">   $ pipenv --rm</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Install all dependencies for a project (including dev):</span></span><br><span class="line"><span class="string">   $ pipenv install --dev</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Create a lockfile containing pre-releases:</span></span><br><span class="line"><span class="string">   $ pipenv lock --pre</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Show a graph of your installed dependencies:</span></span><br><span class="line"><span class="string">   $ pipenv graph</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Check your installed dependencies for security vulnerabilities:</span></span><br><span class="line"><span class="string">   $ pipenv check</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Install a local setup.py into your virtual environment/Pipfile:</span></span><br><span class="line"><span class="string">   $ pipenv install -e .</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Use a lower-level pip command:</span></span><br><span class="line"><span class="string">   $ pipenv run pip freeze</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Commands:</span></span><br><span class="line"><span class="string">  check      Checks for security vulnerabilities and against PEP 508 markers</span></span><br><span class="line"><span class="string">             provided in Pipfile.</span></span><br><span class="line"><span class="string">  clean      Uninstalls all packages not specified in Pipfile.lock.</span></span><br><span class="line"><span class="string">  graph      Displays currently-installed dependency graph information.</span></span><br><span class="line"><span class="string">  install    Installs provided packages and adds them to Pipfile, or (if no</span></span><br><span class="line"><span class="string">             packages are given), installs all packages from Pipfile.</span></span><br><span class="line"><span class="string">  lock       Generates Pipfile.lock.</span></span><br><span class="line"><span class="string">  open       View a given module in your editor.</span></span><br><span class="line"><span class="string">  run        Spawns a command installed into the virtualenv.</span></span><br><span class="line"><span class="string">  shell      Spawns a shell within the virtualenv.</span></span><br><span class="line"><span class="string">  sync       Installs all packages specified in Pipfile.lock.</span></span><br><span class="line"><span class="string">  uninstall  Un-installs a provided package and removes it from Pipfile.</span></span><br><span class="line"><span class="string">  update     Runs lock, then sync.</span></span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p><code>pipenv</code>使得开发和管理项目包的过程变成的简单，让我们尽早使用起来吧。</p><h2 id="一些错误">一些错误</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  File &quot;/usr/lib/python3.7/site-packages/pipenv/vendor/pythonfinder/models/python.py&quot;, line 70, in get_version_order</span><br><span class="line">    version_order = [versions[v] for v in parse_pyenv_version_order()]</span><br><span class="line">TypeError: &apos;NoneType&apos; object is not iterable</span><br></pre></td></tr></table></figure><p>这时可以使用下面的命令解决:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv global 3.7.1</span><br></pre></td></tr></table></figure><blockquote><p><code>3.7.1换成你用pyenv安装过的环境</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      使用pipenv管理python项目
    
    </summary>
    
      <category term="Python" scheme="http://blog.breakering.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://blog.breakering.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django常见错误解决办法</title>
    <link href="http://blog.breakering.com/2018/11/19/django-errors/"/>
    <id>http://blog.breakering.com/2018/11/19/django-errors/</id>
    <published>2018-11-19T06:10:51.000Z</published>
    <updated>2018-12-12T10:42:07.247Z</updated>
    
    <content type="html"><![CDATA[<ol><li>ProgrammingError: relation “default_cache_table” does not exist</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">django.db.utils.ProgrammingError: relation &quot;default_cache_table&quot; does not exist</span><br><span class="line">LINE 1: SELECT cache_key, value, expires FROM &quot;default_cache_table&quot; WHERE ca...</span><br></pre></td></tr></table></figure><p>类似上述这种错误，可以用下面这句命令解决:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createcachetable</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Django常见错误解决办法
    
    </summary>
    
      <category term="Django" scheme="http://blog.breakering.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://blog.breakering.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL允许被远程访问</title>
    <link href="http://blog.breakering.com/2018/11/19/postgresql-remote/"/>
    <id>http://blog.breakering.com/2018/11/19/postgresql-remote/</id>
    <published>2018-11-19T06:00:41.000Z</published>
    <updated>2018-12-12T06:49:11.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-修改postgresql-conf">1.修改postgresql.conf</h2><p><code>postgresql.conf</code>存放位置在<code>/etc/postgresql/9.x/main</code>下，这里的<code>x</code>取决于你安装PostgreSQL的版本号，编辑或添加下面一行，使PostgreSQL可以接受来自任意IP的连接请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen_addresses = &apos;*&apos;</span><br></pre></td></tr></table></figure><h2 id="2-修改pg-hba-conf">2.修改pg_hba.conf</h2><p><code>修改pg_hba.conf</code>位置与<code>postgresql.conf</code>相同，虽然上面配置允许任意地址连接PostgreSQL，但是这在pg中还不够，我们还需在<code>pg_hba.conf</code>中配置服务端允许的认证方式。任意编辑器打开该文件，编辑或添加下面一行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># TYPE  DATABASE  USER  CIDR-ADDRESS  METHOD</span><br><span class="line">host  all  all 0.0.0.0/0 md5</span><br></pre></td></tr></table></figure><p>默认pg只允许本机通过密码认证登录，修改为上面内容后即可以对任意IP访问进行密码验证。对照上面的注释可以很容易搞明白每列的含义，具体的支持项可以查阅文末参考引用。</p><p>完成上两项配置后执行<code>sudo service postgresql restart</code>重启PostgreSQL服务后，允许外网访问的配置就算生效了。</p>]]></content>
    
    <summary type="html">
    
      PostgreSQL允许被远程访问
    
    </summary>
    
      <category term="PostgreSQL" scheme="http://blog.breakering.com/categories/PostgreSQL/"/>
    
    
      <category term="PostgreSQL" scheme="http://blog.breakering.com/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>django-celery实现定时任务</title>
    <link href="http://blog.breakering.com/2018/11/16/django-celery/"/>
    <id>http://blog.breakering.com/2018/11/16/django-celery/</id>
    <published>2018-11-16T09:11:53.000Z</published>
    <updated>2018-12-12T06:46:59.925Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>我们知道celery可以直接用在django项目中，但是配置稍微繁琐，还有添加定时任务需要重启celery beat进程，实在蛋疼，好在找到了<code>django-celery</code>这个模块，话不多说，让我们用起来吧。</p><h2 id="安装和配置">安装和配置</h2><p>安装还是很简单的，直接pip即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-clery</span><br></pre></td></tr></table></figure><blockquote><p>此时会将一些依赖库一并安装，比如celery等</p></blockquote><p>接下来是django项目中的配置，在settings中配置如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># INSTALLED_APPS中加入djcelery</span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ....</span><br><span class="line">    &apos;djcelery&apos;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 配置djcelery相关参数，ResultStore默认存储在数据库可不必重写 ，</span><br><span class="line">djcelery.setup_loader()</span><br><span class="line">BROKER_URL = &apos;redis://127.0.0.1:6379/8&apos;  # 配置你的redis地址和库</span><br><span class="line"># 使用和Django一样的时区</span><br><span class="line">CELERY_TIMEZONE = TIME_ZONE</span><br><span class="line"></span><br><span class="line"># 以上为基本配置，以下为周期性任务定义</span><br><span class="line">CELERYBEAT_SCHEDULER = &apos;djcelery.schedulers.DatabaseScheduler&apos;</span><br></pre></td></tr></table></figure><p>同步数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h2 id="创建task">创建task</h2><p>在你的app下面创建一个<code>tasks.py</code>文件，文件名必须一致，<code>django-celery</code>默认情况下会自动从各个app中寻找该模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> task</span><br><span class="line"></span><br><span class="line"><span class="meta">@task()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_msg</span><span class="params">(msg)</span>:</span></span><br><span class="line">    print(msg)</span><br></pre></td></tr></table></figure><blockquote><p>注意：task装饰器的<code>name</code>参数最好和函数名一致或者干脆不指定;最好不指定，这样下方分发任务时好统一处理。</p></blockquote><h2 id="创建定时任务">创建定时任务</h2><p>接下来我们就可以在Django admin中创建定时任务了</p><p><img src="/images/2018-11-16/QQ20170613-215907.jpg" alt=""><br><img src="/images/2018-11-16/QQ20170613-220348.jpg" alt=""></p><h2 id="启动beat和worker">启动beat和worker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py celery worker -l info</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py celery beat</span><br></pre></td></tr></table></figure><p>之后就可以观察日志了，另外可以使用<code>supervisor</code>来管理这两个进程。</p><h2 id="利用queue分发任务">利用queue分发任务</h2><p>在settings中增加如下配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 定义任务对应的queue</span><br><span class="line">class TasksRouter(object):</span><br><span class="line">    @classmethod</span><br><span class="line">    def route_for_task(cls, task, args=None, kwargs=None):</span><br><span class="line">        task_routes = &#123;</span><br><span class="line">            &apos;algorithm.product.tasks.*&apos;: &#123;&apos;queue&apos;: &apos;product&apos;&#125;,</span><br><span class="line">            &apos;algorithm.material.tasks.*&apos;: &#123;&apos;queue&apos;: &apos;material&apos;&#125;,</span><br><span class="line">        &#125;</span><br><span class="line">        for route_key in task_routes:</span><br><span class="line">            if re.search(route_key, task):</span><br><span class="line">                return task_routes[route_key]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CELERY_ROUTES = (TasksRouter(), )</span><br></pre></td></tr></table></figure><p>配置完成之后，启动beat和worker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py celery beat</span><br></pre></td></tr></table></figure><p>beat会实时检测任务的变化，在django admin界面对任务进行操作，均会刷新该进程，使得分派任务变得非常简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py celery worker -Q product</span><br></pre></td></tr></table></figure><p>上述命令启动的worker只会监测并执行<code>product</code>这个queue中的任务，即只执行<code>algorithm.product.tasks</code>下面的任务。同理<code>python manage.py celery worker -Q material</code>只执行<code>algorithm.material.tasks</code>下面的任务。</p><p>另外queue可以添加多个,例如<code>python manage.py celery worker -Q product,material</code>。</p><p>若要不区分queue执行所有任务，只需<code>python manage.py celery worker</code>即可,但不推荐,开启任务分发之后，最好分开执行，日志方面也更好排查。</p>]]></content>
    
    <summary type="html">
    
      使用django-celery实现定时任务，可以不用重启celery beat进程
    
    </summary>
    
      <category term="Django" scheme="http://blog.breakering.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://blog.breakering.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Linux在局域网如何通过hostname获取其ip</title>
    <link href="http://blog.breakering.com/2018/11/16/linux-hostname_to_ip/"/>
    <id>http://blog.breakering.com/2018/11/16/linux-hostname_to_ip/</id>
    <published>2018-11-16T09:02:52.000Z</published>
    <updated>2018-12-12T06:49:10.963Z</updated>
    
    <content type="html"><![CDATA[<h3 id="只需要hostname固定-就可以在局域网通过ping-hostname-local来获取其ip">只需要hostname固定，就可以在局域网通过ping hostname.local来获取其ip</h3><p><img src="/images/2018-11-16/1046366-20181009112517884-381181059.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      Linux在局域网如何通过hostname获取其ip
    
    </summary>
    
      <category term="Linux" scheme="http://blog.breakering.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://blog.breakering.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>在Django中实现queryset级别缓存</title>
    <link href="http://blog.breakering.com/2018/11/16/django-queryset-cache/"/>
    <id>http://blog.breakering.com/2018/11/16/django-queryset-cache/</id>
    <published>2018-11-16T03:50:19.000Z</published>
    <updated>2018-12-12T06:50:10.860Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>实现queryset级别的缓存，不是view层面的，相当于缓存sql查询结果。</p><h2 id="使用">使用</h2><h3 id="首先在你的django项目中安装依赖的模块">首先在你的django项目中安装依赖的模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-cache-machine</span><br></pre></td></tr></table></figure><h3 id="创建queryset-cache-py文件-文件内容如下">创建queryset_cache.py文件,文件内容如下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__ = "Breakering"</span></span><br><span class="line"><span class="comment"># Date: 18-8-29</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">依赖django-cache-machine，并在此基础上实现了轻松切换使用queryset级别缓存以及count等缓存</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> caching <span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> caching.base <span class="keyword">import</span> CachingQuerySet, cached_with</span><br><span class="line"><span class="keyword">from</span> django.db.models.sql <span class="keyword">import</span> query</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">queryset_cache_decorator</span><span class="params">(always_cached=True)</span>:</span></span><br><span class="line">    <span class="string">"""queryset级别缓存的装饰器，可以使得queryset直接从缓存中获取数据"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">            queryset = func(self, *args, **kwargs)</span><br><span class="line">            <span class="keyword">if</span> always_cached:  <span class="comment"># 此装饰器默认从cache中获取数据</span></span><br><span class="line">                queryset = queryset.from_cache()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">with</span> contextlib.suppress(Exception):</span><br><span class="line">                    queryset_cache_time = self.request.query_params.get(<span class="string">'queryset_cache_time'</span>, <span class="string">''</span>)</span><br><span class="line">                    <span class="keyword">if</span> queryset_cache_time <span class="keyword">and</span> queryset_cache_time.isdigit():</span><br><span class="line">                        queryset = queryset.from_cache(int(queryset_cache_time))</span><br><span class="line">            <span class="keyword">return</span> queryset</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">queryset_cache_count_decorator</span><span class="params">(always_cached=True)</span>:</span></span><br><span class="line">    <span class="string">"""queryset count缓存的装饰器，可以使得queryset直接从缓存中获取count的值"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">            queryset = func(self, *args, **kwargs)</span><br><span class="line">            <span class="keyword">if</span> always_cached:  <span class="comment"># 此装饰器默认从cache中获取数据</span></span><br><span class="line">                queryset = queryset.cache_count()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">with</span> contextlib.suppress(Exception):</span><br><span class="line">                    queryset_cache_time = self.request.query_params.get(<span class="string">'queryset_cache_time'</span>, <span class="string">''</span>)</span><br><span class="line">                    <span class="keyword">if</span> queryset_cache_time <span class="keyword">and</span> queryset_cache_time.isdigit():</span><br><span class="line">                        queryset = queryset.cache_count(int(queryset_cache_time))</span><br><span class="line">            <span class="keyword">return</span> queryset</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CachedQuerySet</span><span class="params">(CachingQuerySet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return queryset from cache if query_key in cache</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super(CachedQuerySet, self).__init__(*args, **kwargs)</span><br><span class="line">        self.timeout = config.NO_CACHE  <span class="comment"># 默认直接从数据库取数据</span></span><br><span class="line">        self.cache_count_timeout = config.NO_CACHE  <span class="comment"># 自定义queryset count的缓存时间</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_clone</span><span class="params">(self, *args, **kw)</span>:</span></span><br><span class="line">        qs = super(CachedQuerySet, self)._clone(*args, **kw)</span><br><span class="line">        qs.cache_count_timeout = self.cache_count_timeout</span><br><span class="line">        <span class="keyword">return</span> qs</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_cache</span><span class="params">(self, timeout=<span class="number">60</span>*<span class="number">60</span>)</span>:</span></span><br><span class="line">        <span class="string">"""在queryset中调用此函数则是从缓存中获取,且调用之后返回的仍是queryset"""</span></span><br><span class="line">        self.timeout = timeout</span><br><span class="line">        <span class="keyword">return</span> self._clone()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cache_count</span><span class="params">(self, cache_count_timeout=<span class="number">60</span>*<span class="number">60</span>)</span>:</span></span><br><span class="line">        <span class="string">"""实现queryset count的缓存,且调用之后返回的仍是queryset"""</span></span><br><span class="line">        self.cache_count_timeout = cache_count_timeout</span><br><span class="line">        <span class="keyword">return</span> self._clone()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># todo values目前的实现方式有BUG，现已取消</span></span><br><span class="line">    <span class="comment"># def values(self, *fields, **expressions):</span></span><br><span class="line">    <span class="comment">#     """rewrite queryset's values"""</span></span><br><span class="line">    <span class="comment">#     if self.timeout == config.NO_CACHE:  # 默认情况下values直接从数据库获取数据</span></span><br><span class="line">    <span class="comment">#         return super(CachedQuerySet, self).values(*fields, **expressions)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#     clone = self._clone()</span></span><br><span class="line">    <span class="comment">#     clone.query.set_values(fields)</span></span><br><span class="line">    <span class="comment">#     key = make_key('values:&#123;key&#125;'.format(key=clone.query_key()))</span></span><br><span class="line">    <span class="comment">#     val = cache.get(key)</span></span><br><span class="line">    <span class="comment">#     if val is None:</span></span><br><span class="line">    <span class="comment">#         val = super(CachedQuerySet, self).values(*fields, **expressions)</span></span><br><span class="line">    <span class="comment">#         cache.set(key, val, self.timeout)</span></span><br><span class="line">    <span class="comment">#     return val</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""自定义queryset的count"""</span></span><br><span class="line">        super_count = super(CachingQuerySet, self).count</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            query_string = <span class="string">'count:%s'</span> % self.query_key()</span><br><span class="line">        <span class="keyword">except</span> query.EmptyResultSet:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> self.cache_count_timeout:</span><br><span class="line">            <span class="keyword">return</span> cached_with(self, super_count, query_string, self.cache_count_timeout)</span><br><span class="line">        <span class="keyword">elif</span> self.timeout == config.NO_CACHE <span class="keyword">or</span> config.TIMEOUT == config.NO_CACHE:</span><br><span class="line">            <span class="keyword">return</span> super_count()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> cached_with(self, super_count, query_string, config.TIMEOUT)</span><br></pre></td></tr></table></figure><h3 id="改造您的model">改造您的model</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> queryset_cache <span class="keyword">import</span> CachedQuerySet</span><br><span class="line"><span class="keyword">from</span> caching.base <span class="keyword">import</span> CachingMixin</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelClassManger</span><span class="params">(models.Manager)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> CachedQuerySet(self.model)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelClass</span><span class="params">(CachingMixin, models.Model)</span>:</span></span><br><span class="line">    objects = ModelClassManger()</span><br></pre></td></tr></table></figure><h3 id="view层只需在get-queryset上加上装饰器即可">view层只需在get_queryset上加上装饰器即可</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@queryset_cache_count_decorator()</span></span><br><span class="line"><span class="meta">@queryset_cache_decorator()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>如果添加了always_cached=False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@queryset_cache_count_decorator(always_cached=False)</span></span><br><span class="line"><span class="meta">@queryset_cache_decorator(always_cached=False)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>则需要在query参数中加上queryset_cache_time=180,参数后面的数字即为缓存的时间。</p>]]></content>
    
    <summary type="html">
    
      django中实现queryset级别缓存
    
    </summary>
    
      <category term="Django" scheme="http://blog.breakering.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://blog.breakering.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Hexo同步</title>
    <link href="http://blog.breakering.com/2018/11/15/hexo-sync/"/>
    <id>http://blog.breakering.com/2018/11/15/hexo-sync/</id>
    <published>2018-11-15T07:27:52.000Z</published>
    <updated>2018-12-12T06:49:11.007Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境搭建">环境搭建</h2><h3 id="安装node-js">安装Node.js</h3><p>用来生成静态页面, 到<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js官网</a>，下载最新版本, 根据提示一路安装即可</p><h3 id="安装git">安装Git</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h3 id="安装hexo">安装Hexo</h3><p>当Node.js和Git都安装好后就可以正式安装Hexo了，终端执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo</span><br></pre></td></tr></table></figure><h3 id="克隆hexo分支">克隆hexo分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b hexo https://github.com/Breakering/breakering.github.io.git</span><br></pre></td></tr></table></figure><h3 id="进入breakering-github-io-git">进入breakering.github.io.git</h3><p>创建博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &apos;博客名&apos;</span><br></pre></td></tr></table></figure><p>发表博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><h3 id="主题配置更新相关">主题配置更新相关</h3><p>需要先清空缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>然后进行部署操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><h3 id="一些问题">一些问题</h3><ol><li>报错一: 若执行命令hexo deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol start="2"><li>报错二: 若执行命令hexo d报以下错误:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR Plugin load failed: hexo-server </span><br><span class="line">//或者类似的错误 </span><br><span class="line">ERROR Plugin load failed: hexo-renderer-sass</span><br></pre></td></tr></table></figure><p>则执行响应的命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-server</span><br><span class="line">//或者</span><br><span class="line">sudo npm install hexo-renderer-sass</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      其他电脑同步博客的方法!
    
    </summary>
    
      <category term="Hexo" scheme="http://blog.breakering.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://blog.breakering.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>内网穿透frp</title>
    <link href="http://blog.breakering.com/2018/09/28/frp/"/>
    <id>http://blog.breakering.com/2018/09/28/frp/</id>
    <published>2018-09-28T12:58:27.000Z</published>
    <updated>2019-06-14T07:05:01.780Z</updated>
    
    <content type="html"><![CDATA[<h1>一、内网穿透原理</h1><p>简单地说，内网穿透依赖于 NAT 原理，根据 NAT 设备不同大致可分为以下 4 大类(前3种NAT类型可统称为cone类型)：</p><ul><li>全克隆(Full Cone)：NAT 把所有来自相同内部 IP 地址和端口的请求映射到相同的外部 IP 地址和端口上，任何一个外部主机均可通过该映射反向发送 IP 包到该内部主机</li><li>限制性克隆(Restricted Cone)：NAT 把所有来自相同内部 IP 地址和端口的请求映射到相同的外部 IP 地址和端口；但是，只有当内部主机先给 IP 地址为 X 的外部主机发送 IP 包时，该外部主机才能向该内部主机发送 IP 包</li><li>端口限制性克隆(Port Restricted Cone)：端口限制性克隆与限制性克隆类似，只是多了端口号的限制，即只有内部主机先向 IP 地址为 X，端口号为 P 的外部主机发送1个 IP 包,该外部主机才能够把源端口号为 P 的 IP 包发送给该内部主机</li><li>对称式NAT(Symmetric NAT)：这种类型的 NAT 与上述3种类型的不同，在于当同一内部主机使用相同的端口与不同地址的外部主机进行通信时， NAT 对该内部主机的映射会有所不同；对称式 NAT 不保证所有会话中的私有地址和公开 IP 之间绑定的一致性；相反，它为每个新的会话分配一个新的端口号；导致此种 NAT 根本没法穿透</li></ul><p>内网穿透的作用就是利用以上规则，创建一条从外部服务器到内部设备的 “隧道”，具体的 NAT 原理等可参考 内网打洞、网络地址转换NAT原理。</p><h1>二、环境准备</h1><p>实际上根据以上 NAT 规则，基本上大部分家用设备和运营商上级路由等都在前三种规则之中，所以只需要借助成熟的内网穿透工具即可，以下为本次穿透环境</p><ul><li>最新版本 frp</li><li>一台公网 VPS 服务器</li><li>内网一台服务器，最好 Linux 系统</li></ul><h1>三、服务端搭建</h1><p>服务器作为公网访问唯一的固定地址，即作为 server 端；内网客户端作为 client 端，会主动向 server 端创建连接，此时再从 server 端反向发送数据即可实现内网穿透</p><h2 id="3-1-下载并解压frp">3.1). 下载并解压frp</h2><p>可以查看<a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">releases</a>获取最新的版本,选好版本之后使用以下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_amd64.tar.gz</span><br><span class="line">tar -zxvf frp_0.21.0_linux_amd64.tar.gz</span><br><span class="line">cd frp_0.21.0_linux_amd64</span><br></pre></td></tr></table></figure><h2 id="3-2-编辑frps-ini">3.2). 编辑frps.ini</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[common]                                                                                                                                                                                                </span><br><span class="line"># frp 监听地址</span><br><span class="line">bind_addr = 0.0.0.0</span><br><span class="line">bind_port = 7000</span><br><span class="line"></span><br><span class="line"># 如果需要代理 web(http) 服务，则开启此端口</span><br><span class="line">vhost_http_port = 8080</span><br><span class="line">vhost_https_port = 4443</span><br><span class="line"></span><br><span class="line"># frp 控制面板</span><br><span class="line">dashboard_port = 7500</span><br><span class="line">dashboard_user = user</span><br><span class="line">dashboard_pwd = pwd</span><br><span class="line"></span><br><span class="line"># 默认日志输出位置(这里输出到标准输出)</span><br><span class="line">log_file = /tmp/frps.log</span><br><span class="line"># 日志级别，支持: debug, info, warn, error</span><br><span class="line">log_level = info</span><br><span class="line">log_max_days = 3</span><br><span class="line"></span><br><span class="line"># 是否开启特权模式(特权模式下，客户端更改配置无需更新服务端)</span><br><span class="line">privilege_mode = true</span><br><span class="line"># 授权 token 建议随机生成</span><br><span class="line">privilege_token = cc23*********************d072734</span><br><span class="line"># 特权模式下允许分配的端口(避免端口滥用)</span><br><span class="line">privilege_allow_ports = 4000-50000</span><br><span class="line"></span><br><span class="line"># 后端连接池最大连接数量</span><br><span class="line">max_pool_count = 100</span><br><span class="line"></span><br><span class="line"># 口令超时时间</span><br><span class="line">authentication_timeout = 900</span><br><span class="line"></span><br><span class="line"># 子域名(特权模式下将 *.xxxx.com 解析到公网服务器)</span><br><span class="line">subdomain_host = xxxx.com</span><br></pre></td></tr></table></figure><p><strong>其他具体配置说明请参考<a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">frp README</a> 文档</strong></p><h2 id="3-3-启动frp-server">3.3). 启动frp server</h2><p>设置完成后执行 ./frps -c frps.ini 启动即可</p><p><strong>ps:当然也可以使用supervisor来管理</strong></p><h1>四、客户端配置</h1><p>客户端作为发起链接的主动方，只需要正确配置服务器地址，以及要映射客户端的哪些服务端口等即可</p><h2 id="4-1-下载并解压frp">4.1). 下载并解压frp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_amd64.tar.gz</span><br><span class="line">tar -zxvf frp_0.21.0_linux_amd64.tar.gz</span><br><span class="line">cd frp_0.21.0_linux_amd64</span><br></pre></td></tr></table></figure><h2 id="4-2-编辑frpc-ini">4.2). 编辑frpc.ini</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 127.0.0.1</span><br><span class="line">server_port = 7000</span><br><span class="line"># console or real logFile path like ./frpc.log</span><br><span class="line">log_file = /tmp/frpc.log</span><br><span class="line"></span><br><span class="line"># debug, info, warn, error</span><br><span class="line">log_level = debug</span><br><span class="line"></span><br><span class="line">log_max_days = 3</span><br><span class="line"></span><br><span class="line"># 特权模式，要和服务器端的配置一致</span><br><span class="line">privilege_token = cc23*********************d072734</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[gitlab]</span><br><span class="line">type = http</span><br><span class="line">local_port = 80</span><br><span class="line">subdomain = gitlab  # 这样只要访问http://gitlab.xxxx.com:8080即可访问到该客户端的gitlab服务</span><br><span class="line">use_gzip = true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[gitlab_ssh]</span><br><span class="line">type = tcp </span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 8081</span><br></pre></td></tr></table></figure><p><strong>其他具体配置说明请参考<a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">frp README</a> 文档</strong></p><h2 id="4-3-启动frp-client">4.3). 启动frp client</h2><p>设置完成后执行 ./frpc -c frpc.ini 启动即可</p><p><strong>ps:当然也可以使用supervisor来管理</strong></p><h1>五、测试</h1><p>服务端和客户端同时开启完成后，即可访问 <a href="http://127.0.0.1:7500" target="_blank" rel="noopener">http://127.0.0.1:7500</a> 进入 frp 控制面板，如下<br><img src="/images/1046366-20180927105622574-1652030646.png" alt=""><br><img src="/images/1046366-20180927105631267-34167117.png" alt=""><br>此时通过 ssh <a href="mailto:root@127.0.0.1" target="_blank" rel="noopener">root@127.0.0.1</a> -p 8081 即可ssh到gitlab，通过访问http://gitlab.xxxx.com:8080 即可访问gitlab服务</p><h1>六、GitLab通过frp代理</h1><p>通过上述配置，确实可以通过 <a href="http://gitlab.xxxx.com:8080" target="_blank" rel="noopener">http://gitlab.xxxx.com:8080</a> 访问gitlab服务,但是你会发现缺少静态文件,因为gitlab的静态文件是nginx代理的，走的tcp协议,需要一种解决方案。</p><p><strong>经测试可以在gitlab服务器配置如下nginx解决</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> /assets &#123;</span><br><span class="line">        <span class="attribute">alias</span> /opt/gitlab/embedded/service/gitlab-rails/public/assets;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>公网服务器nginx如下设置</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  gitlab.xxxx.com;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://gitlab.geekfinancer.com:8080;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样即可通过 <a href="http://gitlab.xxxx.com" target="_blank" rel="noopener">http://gitlab.xxxx.com</a> 正常访问内网的gitlab了</p><p>但是这样还没结束，你会发现外网通过git clone <a href="http://gitlab.xxxx.com/zhuqian/licaishi.git" target="_blank" rel="noopener">http://gitlab.xxxx.com/zhuqian/licaishi.git</a> ,根本没法正常克隆仓库，那有啥用啊，别急，咋们还可以用ssh方式啊。</p><p>上面我们已经配置gitlab的22端口映射到服务器的8081端口了，所以可以这样克隆:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone ssh://git@127.0.0.1:8081/zhuqian/licaishi.git</span><br><span class="line"># 或者</span><br><span class="line">git clone ssh://git@gitlab.xxxx.com:8081/zhuqian/licaishi.git</span><br></pre></td></tr></table></figure><p>对于pip install的话，可以这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install git+ssh://git@127.0.0.1:8081/zhuqian/algorithm.git</span><br><span class="line"># 或者</span><br><span class="line">pip install git+ssh://git@gitlab.xxxx.com:8081/zhuqian/algorithm.git</span><br></pre></td></tr></table></figure><p>你以为就这样完了，还没有，我们想要直接能在gitlab项目首页直接能够显示git访问方法，效果如下:<br><img src="/images/1046366-20180927105727421-1721871308.png" alt=""></p><p>要实现此效果，只需配置下<code>/etc/gitlab/gitlab.rb</code>即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">external_url &apos;http://gitlab.xxxx.com&apos;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">gitlab_rails[&apos;gitlab_shell_ssh_port&apos;] = 8081</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>另外需要注意下<code>nginx['listen_addresses'] = ['192.168.10.60']</code>，需要对应到本地的ip地址</p></blockquote></blockquote><p>配置完之后:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p>然后通过域名访问gitlab即可实现上述效果了，只不过http方式目前还无法解决。</p><h1>七、由mtu引起的无法访问的问题</h1><p>如果frp的admin界面一切正常，但是就是无法获取数据</p><p><img src="/images/1046366-20180927105741148-1074788234.png" alt=""></p><p>那么极有可能是你本地的网络最大分片小于服务器的最大分片，导致数据无法发送出去,解决办法是减小服务器的mtu:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig eth0 mtu 1000 up</span><br></pre></td></tr></table></figure><p>其他修改mtu的方式请自行google。</p><h1>八、References:</h1><ol><li><a href="https://mritd.me/2017/01/21/use-frp-for-internal-network-wear/" target="_blank" rel="noopener">利用 frp 进行内网穿透</a></li></ol>]]></content>
    
    <summary type="html">
    
      简单地说，内网穿透依赖于 NAT 原理，根据 NAT 设备不同大致可分为以下 4 大类(前3种NAT类型可统称为cone类型)
    
    </summary>
    
      <category term="内网穿透" scheme="http://blog.breakering.com/categories/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo初识</title>
    <link href="http://blog.breakering.com/2018/09/28/hexo-start/"/>
    <id>http://blog.breakering.com/2018/09/28/hexo-start/</id>
    <published>2018-09-28T12:58:27.000Z</published>
    <updated>2018-12-12T06:46:59.893Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      简单介绍hexo的用法.
    
    </summary>
    
      <category term="Hexo" scheme="http://blog.breakering.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://blog.breakering.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
