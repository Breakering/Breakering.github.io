{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/photo/index.md","path":"photo/index.md","modified":1,"renderable":0},{"_id":"source/images/1046366-20180927105631267-34167117.png","path":"images/1046366-20180927105631267-34167117.png","modified":1,"renderable":0},{"_id":"source/images/1046366-20180927105727421-1721871308.png","path":"images/1046366-20180927105727421-1721871308.png","modified":1,"renderable":0},{"_id":"source/images/1046366-20180927105741148-1074788234.png","path":"images/1046366-20180927105741148-1074788234.png","modified":1,"renderable":0},{"_id":"source/images/j-16x16.ico","path":"images/j-16x16.ico","modified":1,"renderable":0},{"_id":"source/images/j-32x32.ico","path":"images/j-32x32.ico","modified":1,"renderable":0},{"_id":"themes/hexo-theme-spfk/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"source/images/breakering.jpg","path":"images/breakering.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-spfk/source/css/default.css","path":"css/default.css","modified":1,"renderable":1},{"_id":"source/images/2018-11-16/1046366-20181009112517884-381181059.png","path":"images/2018-11-16/1046366-20181009112517884-381181059.png","modified":1,"renderable":0},{"_id":"source/images/2018-11-16/QQ20170613-215907.jpg","path":"images/2018-11-16/QQ20170613-215907.jpg","modified":1,"renderable":0},{"_id":"source/images/2018-11-19/2.png","path":"images/2018-11-19/2.png","modified":1,"renderable":0},{"_id":"source/images/2018-11-19/4.png","path":"images/2018-11-19/4.png","modified":1,"renderable":0},{"_id":"source/images/avatar/avatar.jpg","path":"images/avatar/avatar.jpg","modified":1,"renderable":0},{"_id":"source/images/1046366-20180927105622574-1652030646.png","path":"images/1046366-20180927105622574-1652030646.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-spfk/source/css/loading-style.css","path":"css/loading-style.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/css/showshare.css","path":"css/showshare.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/css/search.css","path":"css/search.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/TweenMax.js","path":"js/TweenMax.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/pace.js","path":"js/pace.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/alipay.png","path":"img/alipay.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/alipayimg.jpg","path":"img/alipayimg.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/coderwall.png","path":"img/coderwall.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/delicious.png","path":"img/delicious.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/douban.png","path":"img/douban.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/facebook.png","path":"img/facebook.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/github.png","path":"img/github.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/google.png","path":"img/google.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/linkedin.png","path":"img/linkedin.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/mail.png","path":"img/mail.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/pinboard.png","path":"img/pinboard.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/pinterest.png","path":"img/pinterest.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/qq.png","path":"img/qq.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/rss.png","path":"img/rss.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/twitter.png","path":"img/twitter.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/wechatimg.jpg","path":"img/wechatimg.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/segmentfault.png","path":"img/segmentfault.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/instagram.png","path":"img/instagram.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/wechat.png","path":"img/wechat.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/weibo.png","path":"img/weibo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/weixin.png","path":"img/weixin.png","modified":1,"renderable":1},{"_id":"source/images/2018-11-16/QQ20170613-220348.jpg","path":"images/2018-11-16/QQ20170613-220348.jpg","modified":1,"renderable":0},{"_id":"source/images/2018-11-19/3.png","path":"images/2018-11-19/3.png","modified":1,"renderable":0},{"_id":"source/images/2018-11-19/1.png","path":"images/2018-11-19/1.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-spfk/source/img/zhihu.png","path":"img/zhihu.png","modified":1,"renderable":1},{"_id":"source/images/2018-11-26/1543199245282.png","path":"images/2018-11-26/1543199245282.png","modified":1,"renderable":0},{"_id":"source/images/avatar/Breakering0.jpg","path":"images/avatar/Breakering0.jpg","modified":1,"renderable":0},{"_id":"source/images/avatar/Breakering.jpg","path":"images/avatar/Breakering.jpg","modified":1,"renderable":0},{"_id":"source/images/wallpaper/4.jpg","path":"images/wallpaper/4.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-spfk/source/background/bg-25.jpg","path":"background/bg-25.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/TweenMax.min.js","path":"js/TweenMax.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/embed.js","path":"js/embed.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/head.jpg","path":"img/head.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/css/pace/pace-theme-flash.css","path":"css/pace/pace-theme-flash.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-11.jpg","path":"background/bg-11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-109.jpg","path":"background/bg-109.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-17.jpg","path":"background/bg-17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-27.jpg","path":"background/bg-27.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-20.jpg","path":"background/bg-20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg.jpg","path":"background/bg.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/font-awesome/css/font-awesome.css","path":"font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-26.jpg","path":"background/bg-26.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/404/jquery.parallaxify-0.0.2.min.js","path":"js/404/jquery.parallaxify-0.0.2.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-15.jpg","path":"background/bg-15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-23.jpg","path":"background/bg-23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/fontawesome-webfont.woff2","path":"font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-7.jpg","path":"background/bg-7.jpg","modified":1,"renderable":1},{"_id":"source/images/cq/1.jpeg","path":"images/cq/1.jpeg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-14.jpg","path":"background/bg-14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-9.jpg","path":"background/bg-9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/like.css","path":"static/api/css/like.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_popup.css","path":"static/api/css/share_popup.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style0_16.css","path":"static/api/css/share_style0_16.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/js/404/jquery-2.0.3.min.js","path":"js/404/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style0_24.css","path":"static/api/css/share_style0_24.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style0_32.css","path":"static/api/css/share_style0_32.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style1_16.css","path":"static/api/css/share_style1_16.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style1_24.css","path":"static/api/css/share_style1_24.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style1_32.css","path":"static/api/css/share_style1_32.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style2.css","path":"static/api/css/share_style2.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style2_16.css","path":"static/api/css/share_style2_16.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style2_24.css","path":"static/api/css/share_style2_24.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style2_32.css","path":"static/api/css/share_style2_32.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style4.css","path":"static/api/css/share_style4.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/slide_share.css","path":"static/api/css/slide_share.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/weixin_popup.css","path":"static/api/css/weixin_popup.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share.js","path":"static/api/js/share.js","modified":1,"renderable":1},{"_id":"source/images/banner.jpg","path":"images/banner.jpg","modified":1,"renderable":0},{"_id":"source/images/cq/3.jpeg","path":"images/cq/3.jpeg","modified":1,"renderable":0},{"_id":"source/images/cq/2.jpeg","path":"images/cq/2.jpeg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-spfk/source/background/bg-19.jpg","path":"background/bg-19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-21.jpg","path":"background/bg-21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-22.jpg","path":"background/bg-22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-24.jpg","path":"background/bg-24.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-8.jpg","path":"background/bg-8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l8.gif","path":"static/api/img/share/l8.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/data.js","path":"static/api/js/trans/data.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/logger.js","path":"static/api/js/trans/logger.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/imgshare.css","path":"static/api/css/imgshare.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/css/select_share.css","path":"static/api/css/select_share.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-10.jpg","path":"background/bg-10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-18.jpg","path":"background/bg-18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/img/bg.jpg","path":"img/bg.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_0_16.png","path":"static/api/img/share/icons_0_16.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_1_24.png","path":"static/api/img/share/icons_1_24.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_1_32.png","path":"static/api/img/share/icons_1_32.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_2_16.png","path":"static/api/img/share/icons_2_16.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_2_24.png","path":"static/api/img/share/icons_2_24.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_2_32.png","path":"static/api/img/share/icons_2_32.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l0.gif","path":"static/api/img/share/l0.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l1.gif","path":"static/api/img/share/l1.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_0_24.png","path":"static/api/img/share/icons_0_24.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_0_32.png","path":"static/api/img/share/icons_0_32.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l2.gif","path":"static/api/img/share/l2.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l3.gif","path":"static/api/img/share/l3.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l4.gif","path":"static/api/img/share/l4.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l5.gif","path":"static/api/img/share/l5.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l6.gif","path":"static/api/img/share/l6.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l7.gif","path":"static/api/img/share/l7.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_1_16.png","path":"static/api/img/share/icons_1_16.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/pop_c.gif","path":"static/api/img/share/pop_c.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r0.gif","path":"static/api/img/share/r0.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r4.gif","path":"static/api/img/share/r4.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r5.gif","path":"static/api/img/share/r5.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r6.gif","path":"static/api/img/share/r6.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r7.gif","path":"static/api/img/share/r7.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r8.gif","path":"static/api/img/share/r8.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/sc.png","path":"static/api/img/share/sc.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/selectshare_close.png","path":"static/api/img/share/selectshare_close.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/share-search-icon.png","path":"static/api/img/share/share-search-icon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/base/class.js","path":"static/api/js/base/class.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/animate.js","path":"static/api/js/component/animate.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/anticheat.js","path":"static/api/js/component/anticheat.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/comm_tools.js","path":"static/api/js/component/comm_tools.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/partners.js","path":"static/api/js/component/partners.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/pop_base.js","path":"static/api/js/component/pop_base.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/pop_dialog.js","path":"static/api/js/component/pop_dialog.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/pop_popup.js","path":"static/api/js/component/pop_popup.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/pop_popup_slide.js","path":"static/api/js/component/pop_popup_slide.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/qrcode.js","path":"static/api/js/component/qrcode.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/conf/const.js","path":"static/api/js/conf/const.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/conf/define.js","path":"static/api/js/conf/define.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/api_base.js","path":"static/api/js/share/api_base.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/combine_api.js","path":"static/api/js/share/combine_api.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/image_api.js","path":"static/api/js/share/image_api.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/like_api.js","path":"static/api/js/share/like_api.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/likeshare.js","path":"static/api/js/share/likeshare.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/select_api.js","path":"static/api/js/share/select_api.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/share_api.js","path":"static/api/js/share/share_api.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/slide_api.js","path":"static/api/js/share/slide_api.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/start/router.js","path":"static/api/js/start/router.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/trans.js","path":"static/api/js/trans/trans.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/trans_bdxc.js","path":"static/api/js/trans/trans_bdxc.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/trans_bdysc.js","path":"static/api/js/trans/trans_bdysc.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/trans_weixin.js","path":"static/api/js/trans/trans_weixin.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/image_view.js","path":"static/api/js/view/image_view.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/like_view.js","path":"static/api/js/view/like_view.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/select_view.js","path":"static/api/js/view/select_view.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/share_view.js","path":"static/api/js/view/share_view.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/slide_view.js","path":"static/api/js/view/slide_view.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/view_base.js","path":"static/api/js/view/view_base.js","modified":1,"renderable":1},{"_id":"source/images/wallpaper/2.jpg","path":"images/wallpaper/2.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-spfk/source/background/bg-16.jpg","path":"background/bg-16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-111.jpg","path":"background/bg-111.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/js/base/tangram.js","path":"static/api/js/base/tangram.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-12.jpg","path":"background/bg-12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-13.jpg","path":"background/bg-13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r1.gif","path":"static/api/img/share/r1.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r2.gif","path":"static/api/img/share/r2.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r3.gif","path":"static/api/img/share/r3.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-spfk/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":1,"renderable":1},{"_id":"source/images/background.jpg","path":"images/background.jpg","modified":1,"renderable":0},{"_id":"source/images/wallpaper/1.jpg","path":"images/wallpaper/1.jpg","modified":1,"renderable":0},{"_id":"source/images/wallpaper/3.jpg","path":"images/wallpaper/3.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-spfk/source/background/bg-112.jpg","path":"background/bg-112.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538292128362},{"_id":"source/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538292128362},{"_id":"source/robots.txt","hash":"a6dd9e1f9f21cea6de430a4d4d239c851c0fc8e0","modified":1538292128366},{"_id":"themes/hexo-theme-spfk/_config.yml","hash":"61888a5e95a9f6b5d9273758682d487bc69aa16e","modified":1551146971960},{"_id":"source/_posts/GitLab备份与恢复.md","hash":"6076a46815d60a9243bb14facee6081bf1829cb5","modified":1544597220029},{"_id":"source/_posts/GitLab升级.md","hash":"d8eeb6052cfc4f201633cc3842c7d7fa75da56cb","modified":1544597219849},{"_id":"source/_posts/Hexo初识.md","hash":"d2ea2675dcfd71cf3019ee88968a2bf99d2c650e","modified":1544597219893},{"_id":"source/_posts/Linux在局域网如何通过hostname获取其ip.md","hash":"ef48b975a2adae44875c0b7a159f0465bb8437d3","modified":1544597350963},{"_id":"source/_posts/Hexo同步.md","hash":"0b22de37b9005e8d017098ca490df1685284a7e4","modified":1544597351007},{"_id":"source/_posts/Linux安装supervisor.md","hash":"ae24cbbb42c6d69622d27f31d3caddfbc7c747e4","modified":1548574198846},{"_id":"source/_posts/django-celery实现定时任务.md","hash":"0dab2b9bfd46c269163820a68181a081b866cf2c","modified":1544597219925},{"_id":"source/_posts/PostgreSQL允许被远程访问.md","hash":"baa66ef5c34b28e34626fd54d72b45d7768e7fd0","modified":1544597351243},{"_id":"themes/hexo-theme-spfk/README.md","hash":"228961ab390b883cb441fec95fd2ae6ab1f423ba","modified":1542351092468},{"_id":"source/_posts/ubuntu-中-Typora-安装.md","hash":"ef8f8314d926d983b7b5504b53e0f3085d6e11ac","modified":1544597351075},{"_id":"source/_posts/ubuntu18-04设置开机启动脚本.md","hash":"e315da1072e932dc330095f0e06a7fd098efd880","modified":1551331366172},{"_id":"source/_posts/vue中axios全局设置csrftoken以及Authorization.md","hash":"4731b614db079705fb1a03e11490f3e0e0d561fe","modified":1544597351111},{"_id":"source/_posts/vue使用axios.md","hash":"d3b2371042f75a6bfa705bc61511c70a15b34810","modified":1544597351043},{"_id":"source/_posts/vue跨域配置.md","hash":"fe964a171cb018cfdf53ac71891c4e5188621f7b","modified":1544671840410},{"_id":"source/_posts/Django常见错误解决办法.md","hash":"ab89357342ec4bafb8b450d2803735b9581e410d","modified":1544611327247},{"_id":"source/_posts/内网穿透frp.md","hash":"ad4262b383d9f4ddf6d6e69bd52bd854962017d7","modified":1560495901780},{"_id":"source/_posts/在Django中实现queryset级别缓存.md","hash":"e3a0ac2ae682b8c40a3bc96f68264e6c0384db19","modified":1544597410860},{"_id":"source/_posts/记GitLab服务器宕机的迁移过程.md","hash":"4fb3255dec36b3f8e195f272ea99ba5a71bb3506","modified":1560741866434},{"_id":"source/about/index.md","hash":"b2712f2e81e4e20bc0b227606fec2358caa08e1c","modified":1542180580220},{"_id":"source/categories/index.md","hash":"34e432bfb3c29444342cc08d75fca70abcd910b2","modified":1538292128362},{"_id":"source/photo/index.md","hash":"c962b23bbbbd53006cf2ed07b2b431d835d00a0a","modified":1548569156554},{"_id":"source/_posts/django修改request对象.md","hash":"aa0be12055cbd00317921678c9e7a5ce2cc05e14","modified":1544612459232},{"_id":"source/images/1046366-20180927105631267-34167117.png","hash":"aad2c61bfee92d6ddce65302c7fc845544f92184","modified":1538290427000},{"_id":"source/images/1046366-20180927105727421-1721871308.png","hash":"b0264800f4c3c14ad1f47c1310137ac7eaa1dc17","modified":1538294835000},{"_id":"source/images/1046366-20180927105741148-1074788234.png","hash":"b5444ac5e0e3b8aa500f7dfb5b9bddd67ee788be","modified":1538294840000},{"_id":"source/images/j-16x16.ico","hash":"3f37c2a78f1983bb9f9b0b75af88fb7300966a8b","modified":1538292128366},{"_id":"source/images/j-32x32.ico","hash":"08b56b6791db62b29a336ae957dd6f56bc1c4708","modified":1538292128366},{"_id":"source/pinboard/index.md","hash":"ea7bebf13be1e43dcbe42ec6a7de1e6436bfc9e1","modified":1543226117747},{"_id":"source/tags/index.md","hash":"2b579734ce27a6495d50e0975e29e970981d46a9","modified":1538292128366},{"_id":"themes/hexo-theme-spfk/languages/de.yml","hash":"ecb13af8af81ccc033ae7494cb2f94f84f6466ad","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/languages/default.yml","hash":"9e59cd11b290be84909612beb12d0f93ce737f53","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/languages/en.yml","hash":"8fa0a7482188ca56fd3cf19c4a87320f85a76846","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/languages/es.yml","hash":"1f9e9c0084e972c8e40045da963ec4904ac79327","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/languages/fr-FR.yml","hash":"12cfa96dc412ecb6f8bf4de2690575929464906e","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/languages/pt-BR","hash":"922b6d836cc690742b2d55a725e3886c5d0cbb75","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/languages/ru.yml","hash":"9997425292031ee8a58a93346ac6d3f38f18e566","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/languages/zh-Hans.yml","hash":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/languages/zh-hk.yml","hash":"606dfb34d3fec1d7895a654ff7a5a1de0c6a5c55","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/languages/zh-tw.yml","hash":"9e4034870b57d2bb3063c91f8d206a6c4d7b3789","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/languages/zh.yml","hash":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/layout.ejs","hash":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/plugins.swig","hash":"f809b5e62e968a80921c56e5d7658325b48b7263","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/source/apple-touch-icon.png","hash":"3f37c2a78f1983bb9f9b0b75af88fb7300966a8b","modified":1538292128000},{"_id":"source/images/breakering.jpg","hash":"13a20e60f53d42e197019ed81e3d7270a0ccd909","modified":1538292128366},{"_id":"source/_posts/jupyter美化.md","hash":"52a87c6e51301b3e1d7733366df05a34c1510d6b","modified":1544597351159},{"_id":"themes/hexo-theme-spfk/source/css/default.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542351092532},{"_id":"source/_posts/使用pipenv管理python项目.md","hash":"e9ab1158d1425374c4575191d75931a681d09ada","modified":1550744379671},{"_id":"source/images/2018-11-16/1046366-20181009112517884-381181059.png","hash":"6660b22bcdbea7a2be64bcfe0d3720f8e943eb27","modified":1542358975000},{"_id":"source/images/2018-11-16/QQ20170613-215907.jpg","hash":"b73d5680983c8f3577c0d6ebf4d356b1761a0da4","modified":1542360158000},{"_id":"source/images/2018-11-19/2.png","hash":"3811bf2d8a574936d7a1b6a6d409da40288ff464","modified":1542615360000},{"_id":"source/images/2018-11-19/4.png","hash":"66b3595bcec60570f24816f221cbc79548e4f487","modified":1542615556000},{"_id":"source/images/avatar/avatar.jpg","hash":"2fd260c7d71adf8f2e4cf473fbfbe0f46ba3a180","modified":1551237394592},{"_id":"themes/hexo-theme-spfk/layout/_partial/archive-post.ejs","hash":"8af583c5f60c69ffdc97bee4e8fdac1ba34ebecd","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/after-footer.ejs","hash":"005eb0498e81bf9dbfffbad3a7c5c277c82b701d","modified":1549956526251},{"_id":"themes/hexo-theme-spfk/layout/_partial/background.ejs","hash":"cb656037dae582272c748c68a174f2da622d5a12","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/bodybackground.ejs","hash":"931700a928b84577cc33dfff68a009188885f6c0","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/article.ejs","hash":"5a03a0143e87b4c59ebd23c3c4687b8ade997fce","modified":1544592555610},{"_id":"themes/hexo-theme-spfk/layout/_partial/footer.ejs","hash":"f084f958c3aabfd927e7298392c87c76ba7e7fb2","modified":1544593601220},{"_id":"themes/hexo-theme-spfk/layout/_partial/case.swig","hash":"a2a7ec0e4c203e49fd32335c60c3b9851ed6e4a5","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/hide-labels.ejs","hash":"e981795db4954ba5cc9d6844a6a2799bffdc0af3","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/mathjax.ejs","hash":"cdfd21f079933f3a275bc4088e1ca5e6068e75b4","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/mobile-nav.ejs","hash":"320de58b166710d02963d80f27bcd50478841401","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/page.ejs","hash":"55ffdcc87b5fa50afdc370f439c0e812e307cbff","modified":1542351092468},{"_id":"source/images/1046366-20180927105622574-1652030646.png","hash":"6a101389d9798bf03141d3def6b4c25d056df7c0","modified":1538290411000},{"_id":"themes/hexo-theme-spfk/layout/_partial/left-col.ejs","hash":"0548c0c166906d1eb94b7f726516002bc1e9952d","modified":1549956831562},{"_id":"themes/hexo-theme-spfk/layout/_partial/plugin.swig","hash":"17b6c6945e4b1b41dbb10d851f85ca10100c28ea","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/post-nav-button.ejs","hash":"c817bdf39f62670872aae19accea4c51f5e0bfa7","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/theme.swig","hash":"5a279ad8f6c6b7c104cce495faa563d8b7a7c74a","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/toc.ejs","hash":"84bbda825793de643d5a40190fab2160af1e75e3","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/scrolling-button.ejs","hash":"b3a28974f37375796687e6100b48c3da6f662640","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/work.swig","hash":"6bdb6ec45f6179875e5a33bfdc7568a3831638fd","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/layout/_partial/head.ejs","hash":"6f34f1062b8bbd46bb5216332c8110c08697c6d2","modified":1549956500558},{"_id":"themes/hexo-theme-spfk/source/css/loading-style.css","hash":"1f67362d809e85edc9f122db7bc3711af1ed1d8b","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/_variables.styl","hash":"a753c14f409a294188f2e99575f2c10b82fd56a2","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/layout/_partial/sidebar.swig","hash":"38bea91021bc559245ef7765a3fdd805ec9885c1","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/source/css/showshare.css","hash":"d5288601c95acd7fea993ac8cc3d04efcbdd1559","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/style.styl","hash":"e2064d2ba11610154306730bfbac821b9633abe7","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/search.css","hash":"07b0eb9cc1f3d87adf09c83c5ad818eca98d3b10","modified":1549958947218},{"_id":"themes/hexo-theme-spfk/source/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/js/TweenMax.js","hash":"0ba64564a4fde4085fa3971dd53b7d64a41751e1","modified":1542351092548},{"_id":"themes/hexo-theme-spfk/source/js/clipboard.min.js","hash":"c13b4bb8fee46447284590d2afc0efca0ea3cb7b","modified":1542351092548},{"_id":"themes/hexo-theme-spfk/source/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1542351092548},{"_id":"themes/hexo-theme-spfk/source/js/jquery.lazyload.js","hash":"8e4ad3e17f8e82be311b6b6e87811762e2b2d764","modified":1542351092548},{"_id":"themes/hexo-theme-spfk/source/js/mobile.js","hash":"d3847e5bcaf39108931724ecb02770c62b10889f","modified":1542351092548},{"_id":"themes/hexo-theme-spfk/source/js/main.js","hash":"921b2fb56e48cce3d16ceb4a3fadf8e666c73a0a","modified":1542351092548},{"_id":"themes/hexo-theme-spfk/source/js/pace.js","hash":"b49c10cd65d9488f7338e3c778e55ac6628650f3","modified":1542351092548},{"_id":"themes/hexo-theme-spfk/source/js/pc.js","hash":"ab375af6e3bcd054b1e87e1a8dcd3d7d25c2db40","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/js/plugins.js","hash":"c1cf96b2d852b5803228a34d99014b005623bc06","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/img/alipay.png","hash":"6ec0c618109aac31a212d252a3b85f2975b82b3a","modified":1542351092540},{"_id":"themes/hexo-theme-spfk/source/img/alipayimg.jpg","hash":"81b1d55f45b4ff641d10a2e90cfa9d4a9fe4b89c","modified":1542613562000},{"_id":"themes/hexo-theme-spfk/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/source/js/search.js","hash":"130335299cad06aed41ade598c4e2445dc8eebce","modified":1549959248543},{"_id":"themes/hexo-theme-spfk/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/source/img/favicon.png","hash":"5b4e9c94ff3396db5b074b69c1aa5bb909aba825","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/source/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/source/img/wechatimg.jpg","hash":"a84daffaa8bc70b928bbfbc868846cfa8262f3eb","modified":1542361818000},{"_id":"themes/hexo-theme-spfk/source/img/segmentfault.png","hash":"4483ab273423deb65021111fc8ad9512b69e45b2","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/source/img/instagram.png","hash":"3c148a3882a8d141d7d405be8c4815d0dcb03561","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/source/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1542351092548},{"_id":"themes/hexo-theme-spfk/source/img/weixin.png","hash":"92b8df9aba9169c1553c01994bf21a938fa39cb7","modified":1542351092548},{"_id":"source/images/2018-11-16/QQ20170613-220348.jpg","hash":"6bdbc4ef03f519c00dd06ede6e344a1b59ae1102","modified":1542360250000},{"_id":"source/images/2018-11-19/3.png","hash":"878f162ce4beb27eaf9abcc8c37c3f7ff352bcf2","modified":1542615550000},{"_id":"source/images/2018-11-19/1.png","hash":"51b19ab4be92b175f5370c3c9b0497773d7e9a65","modified":1542615355000},{"_id":"themes/hexo-theme-spfk/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1542351092548},{"_id":"source/images/2018-11-26/1543199245282.png","hash":"09d93dfd6e560cc0fa793c3f9c7f0165e434e478","modified":1543199275597},{"_id":"source/images/avatar/Breakering0.jpg","hash":"5215ed5322761e96ae81286e5d4a0628527f530e","modified":1551237390332},{"_id":"source/images/avatar/Breakering.jpg","hash":"13a20e60f53d42e197019ed81e3d7270a0ccd909","modified":1551237381776},{"_id":"source/images/wallpaper/4.jpg","hash":"9741bce82809ebdfc2bca8a3fff14715108fedb4","modified":1460251089000},{"_id":"themes/hexo-theme-spfk/source/background/bg-25.jpg","hash":"7a05a524b70c9acd75c3f16a3b9992e4587995bd","modified":1542351092516},{"_id":"themes/hexo-theme-spfk/source/js/TweenMax.min.js","hash":"eaa4e4a08400da3f22dedda706ba56cdce5b0b7a","modified":1542351092548},{"_id":"themes/hexo-theme-spfk/source/js/embed.js","hash":"8d2d4a812ab639bc02fdd8749d3a39f6b9406c54","modified":1542351092548},{"_id":"themes/hexo-theme-spfk/source/img/head.jpg","hash":"80c0999acfc1173183d3dd243b4b90d077ab97cb","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/layout/_partial/analytics/baidu-analytics.ejs","hash":"b21500b87d79a0068e3ca0408b4e125e3e749d01","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/analytics/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/comments/disqus.ejs","hash":"7792a79ab85ef28551cc2a793735973b1d5521a7","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/comments/duoshuo.ejs","hash":"f6112c3f08f46dde1c0ba6a5bee8017624590e47","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/comments/gitment.ejs","hash":"a3248f670ca13c4ea1e330cf8b89152adb8b5625","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/comments/youyan.ejs","hash":"a6853b59ee60e775de1ed90b242084f83774d195","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/post/TipTitle.ejs","hash":"65b0956edca84e0bc0eb616ec236309822d5f803","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/post/category.ejs","hash":"265bb12f7cfa5e0bcbb74fdd409ba13a6d9d2e22","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/post/date.ejs","hash":"1cfcf2e06ab9b1c6dcd44f41825dfe98d400c7ea","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/post/loading.ejs","hash":"52a576a8afee08d33c6f69a61c496e1820132e91","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/post/nav.ejs","hash":"4779c17cf76bf4560e52708102467bb8ec7a2781","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/post/swiftype.ejs","hash":"76374e601d911e1279e1944d2a6b7eb3391c7c7c","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/post/tag.ejs","hash":"9dad471e27de9e066666f3082137eccaede2e67b","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/share/baidu-share.ejs","hash":"993b7d231881601ba79aab1e78d75dcb271b3500","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/share/share.ejs","hash":"62467610ba6df9b63350d163e806be774dcf5a00","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/layout/_partial/share/showshare.ejs","hash":"410b809eb6c50bacfd9e1e573f1e0251841bc79d","modified":1542351092468},{"_id":"themes/hexo-theme-spfk/source/css/_partial/baidushare.styl","hash":"fe36e3d8933b1b0b674aaf16e50dbf6090099912","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/_partial/footer.styl","hash":"cbf916a5338e69e05d0815c53aeb818d636b6d99","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/_partial/archive.styl","hash":"a8bc2e2458bcc51fa68122274a41f5e4e52a8ebd","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/_partial/article.styl","hash":"29788d924d74e3fec5157dc7b3a0bb9645fb468b","modified":1544592567442},{"_id":"themes/hexo-theme-spfk/source/css/_partial/main.styl","hash":"6e3d15fbe2663bb6fc408df4a771925c3eac65cf","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/_partial/instagram.styl","hash":"db9cc156c7df27f7f54b0e7ff34b5949f55f99eb","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/_partial/mobile-slider.styl","hash":"3bf9f2359f68c700e21618ad6262db81038c3d96","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/_partial/mobile.styl","hash":"53b1a06e08df81427505cbc76cc8eb02bea54356","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/_partial/page.styl","hash":"46b9c91428c1e1f42cc8a1010f600f70fb8edc82","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/_partial/plugins.styl","hash":"629ae10dfc053dbfc074966f0bf7f0115acf65e2","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/_partial/reward.styl","hash":"2b705bcc1c2f8c71a979aa10851a162d1deba394","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/_partial/scroll.styl","hash":"1932774d30b8706919342f9cf36ea2d99987ce14","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/_partial/tagcloud.styl","hash":"91e6553775ca931a1b3db1ab11c4cf227df68c21","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/_partial/wheelmenu.styl","hash":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/pace/pace-theme-flash.css","hash":"508bce8b59a1fbc1f1443a7c4ab3b026e5517dab","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/_partial/share.styl","hash":"2dde7c9ea40c71fce3dbd8d5e2bcc8d9682141b8","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1542351092536},{"_id":"themes/hexo-theme-spfk/source/background/bg-11.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1542351092476},{"_id":"themes/hexo-theme-spfk/source/background/bg-109.jpg","hash":"6171c1e921c8cc9bdcd7276cf7f0bee5295f4672","modified":1542351092476},{"_id":"themes/hexo-theme-spfk/source/background/bg-1.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1542351092472},{"_id":"themes/hexo-theme-spfk/source/background/bg-17.jpg","hash":"6ab5e470059e8ccb0c8bc6786abfb5db7e9a1826","modified":1542351092504},{"_id":"themes/hexo-theme-spfk/source/background/bg-27.jpg","hash":"ced50e6e8cad2b0db97445c4e1463d4a62540b9b","modified":1542351092520},{"_id":"themes/hexo-theme-spfk/source/background/bg-20.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1542351092512},{"_id":"themes/hexo-theme-spfk/source/background/bg-3.jpg","hash":"f1347eddd07bdae93ab6bebad8627eddc5baeb44","modified":1542351092520},{"_id":"themes/hexo-theme-spfk/source/background/bg.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1542351092536},{"_id":"themes/hexo-theme-spfk/source/background/bg-26.jpg","hash":"3730aa317f9d75ca327b34478cd58e72667b04e8","modified":1542351092520},{"_id":"themes/hexo-theme-spfk/source/js/404/jquery.parallaxify-0.0.2.min.js","hash":"b97e2dfcb210b76f7bdd6e1800b26128bf4fad99","modified":1542351092548},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1542351092536},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1542351092536},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1542351092540},{"_id":"themes/hexo-theme-spfk/source/background/bg-15.jpg","hash":"ce5760578eb814fe951c56200e81c6f47b6468d4","modified":1542351092500},{"_id":"themes/hexo-theme-spfk/source/background/bg-23.jpg","hash":"050937d649be2c02ef8a66a0ffe7d320b236d1b0","modified":1542351092516},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1542351092540},{"_id":"themes/hexo-theme-spfk/source/background/bg-7.jpg","hash":"acbe0946a47ba16b79f062dbee14c4c9ff9a48da","modified":1542351092528},{"_id":"source/images/cq/1.jpeg","hash":"435a92d1177d2ceed4f598035aef9af7ce165917","modified":1544771679000},{"_id":"themes/hexo-theme-spfk/source/css/_partial/highlight.styl","hash":"62d7930e9556f893088c65c5fc4229a10ebc7671","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/_partial/customise/blockquote.styl","hash":"83179f1d0e12b025cd433a6071b2826c2b4168cc","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/_partial/customise/code-block.styl","hash":"1f05c0558b2970c369fe19bafbc8a1821c09bce0","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/css/_partial/customise/inline-code.styl","hash":"ac2fcef8823d5566c0e27f23b2a46beecbd71c72","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1542351092540},{"_id":"themes/hexo-theme-spfk/source/background/bg-14.jpg","hash":"2fd6ede2bc9de2d26d910ea4e45d28b2350881eb","modified":1542351092500},{"_id":"themes/hexo-theme-spfk/source/background/bg-9.jpg","hash":"df731da0fe0de9a05d99d017e747252c990f972d","modified":1542351092528},{"_id":"themes/hexo-theme-spfk/source/css/_partial/post/youyan.styl","hash":"ac2869e2e0fb3a1ee0df4b0c0a233a2b1923ea20","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/js/gitment.browser.js","hash":"b16277d8b38666a58cbaeb339f4fb0e82238ca1b","modified":1548570993660},{"_id":"themes/hexo-theme-spfk/source/static/api/css/like.css","hash":"2024d58206df01b858c38f07957f928b44e14cb3","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_popup.css","hash":"338ba2b30ef8ce0c84cd36b37d7f8482996291dc","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style0_16.css","hash":"090e77e9e6e9b8ee0d73a233cbe46499de935bdd","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/js/404/jquery-2.0.3.min.js","hash":"fbf9c77d0c4e3c34a485980c1e5316b6212160c8","modified":1542351092548},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style0_24.css","hash":"7d1f9f32b80f91001f4f951aa045180cde22d82e","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style0_32.css","hash":"7c2d12ea532c8a55c102b649bb23ef5bf53b3ed3","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style1_16.css","hash":"aeb4e9fa96cfa0167481e1f4007079dc3f3c6c27","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style1_24.css","hash":"3ee5f745c863b4f68299fe5dc125f913ca619c07","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style1_32.css","hash":"626d67a4c0bb72a152e90d25dbf281c0c35a2140","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style2.css","hash":"1ad451187cde8a74843fd398b924ca0ac911e9be","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style2_16.css","hash":"572c8e856988e463eb865f38d33ba003cc20d083","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style2_24.css","hash":"917d963d3be111064cbb1d122963da91ee3724a0","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style2_32.css","hash":"3657bbc4b5bbc66ebca4906ee0a1cbf9f98be883","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/css/share_style4.css","hash":"0a9e2ed712a5ef5c4699c038cd001a0d688a0fdf","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/css/slide_share.css","hash":"3898feaf45559b039f885bee8f9e831f48adb20c","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/css/weixin_popup.css","hash":"5e6c5084bfd16051de5776c2e136a5462b08a32c","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share.js","hash":"5e71147fe4a93bc99387a5cc1c6894d8b6ab2d5e","modified":1542351092556},{"_id":"source/images/banner.jpg","hash":"c0be06aefc9a818c5a836bb88026999f050c5d38","modified":1460251155000},{"_id":"source/images/cq/3.jpeg","hash":"fbd749880ba7a4714a04dc21c57cf97da4581405","modified":1544771681000},{"_id":"source/images/cq/2.jpeg","hash":"b78cb2b6c7b24e4427dcde3ca9a01585709aff49","modified":1544771680000},{"_id":"themes/hexo-theme-spfk/source/background/bg-19.jpg","hash":"d77504412d28432643fc61ed9fd9f7c57096bdd9","modified":1542351092508},{"_id":"themes/hexo-theme-spfk/source/background/bg-21.jpg","hash":"7c4c6cd5d75115093fa29bba7372fa198f04b0f1","modified":1542351092512},{"_id":"themes/hexo-theme-spfk/source/background/bg-22.jpg","hash":"7a055391fa4188d9c22fdc1d34a10b26e2f0826d","modified":1542351092512},{"_id":"themes/hexo-theme-spfk/source/background/bg-24.jpg","hash":"796fa5262d7714e8ce9496a2d03864429cfc5b45","modified":1542351092516},{"_id":"themes/hexo-theme-spfk/source/background/bg-4.jpg","hash":"da47f889e02241c8b095f852fb7efd89c114599d","modified":1542351092520},{"_id":"themes/hexo-theme-spfk/source/background/bg-6.jpg","hash":"1a4f4c8875b2c56e7992000979a7fca7856eec35","modified":1542351092524},{"_id":"themes/hexo-theme-spfk/source/background/bg-8.jpg","hash":"dbecc189e28d00fa23e397eb512e039c2ff03c87","modified":1542351092528},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l8.gif","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/data.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542351092556},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/logger.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542351092556},{"_id":"themes/hexo-theme-spfk/source/static/api/css/imgshare.css","hash":"c3624a2dde649ed28b2e5d1f050fd971fbaf71a0","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/css/select_share.css","hash":"d0259abdb410193cf761e42bffaa51e70327a0cd","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/background/bg-10.jpg","hash":"dfb23c1c3cf8a3dcb8dc0ea10cf06501c151a2a2","modified":1542351092476},{"_id":"themes/hexo-theme-spfk/source/background/bg-18.jpg","hash":"4d61dc41a781a9c1d37c9e5e413ac0d8a9538f6a","modified":1542351092504},{"_id":"themes/hexo-theme-spfk/source/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1542351092544},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_0_16.png","hash":"0eec1e81a04664b2032bd389513349e9bd5d5b0f","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/css/_partial/post/gitment.styl","hash":"9a103392d4fd8ba0667e633fcb8b30d36d51ef65","modified":1542351092532},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_1_24.png","hash":"9f1d472095dbe138ef7aff069b1d18cae6ffa942","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_1_32.png","hash":"09825de5f238c97e4374d545961d6e0d5bbfb3e2","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_2_16.png","hash":"07340442cb61aabb419dd226f4bfb206a7577f52","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_2_24.png","hash":"e47fb87c533f2be89f22901f0864d9b5ef83412d","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_2_32.png","hash":"deba62865245a6b5aafa446787d72165c703b943","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l0.gif","hash":"738b92632b0a9789a9eb568b8d101eb64f55f6e0","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l1.gif","hash":"70e1932ca7a622ed3322b683eceb7a590860a55e","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_0_24.png","hash":"a89223f9714c8c4fa169430a327963ca6a1c9a6e","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_0_32.png","hash":"c20521634fdacef39631031671528713e6ba6081","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l2.gif","hash":"e6a5d6104c226a686d48759e0268e09d762e242e","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l3.gif","hash":"26c0dd37d98df63abb9d3d83e01bb47c34ee3f0f","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l4.gif","hash":"8a9c3cf99766d3f07a9c480cfdffdc3197b9a6b9","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l5.gif","hash":"148706f56b8ef4fd9d8483d0ac3a6730e72fc0ad","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l6.gif","hash":"f4b8e3188f744f13aca46b27b451d55d9e209c48","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/l7.gif","hash":"e4f7e5e56c8f4eb026b5cb0affe3bd69c31af261","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/icons_1_16.png","hash":"3793c3265429ab7b830bfaf18322259cd0b4c4ef","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/pop_c.gif","hash":"e8b9ece6ddaa47ccb2c15f2396d1cd3020740603","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r0.gif","hash":"882f255fbafc0136a3917c1dd40db88879c1b1c1","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r4.gif","hash":"517435e69a2215a0f003e75a4861154ca963c30e","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r5.gif","hash":"e61b32d1830390303927bdab21823959f8dc7023","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r6.gif","hash":"4bc01e08ef0015fddf5b8c7257c094ec584ca3ee","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r7.gif","hash":"3c596c924910c93cf3e37cc1b2870dbf271151e2","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r8.gif","hash":"c068ece54a72a3f2428d4f1b5ca7c176f027dd4e","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/sc.png","hash":"e5a2ca56973a3d6608e7e3a48ebd9fa5ebda9991","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/selectshare_close.png","hash":"6f3666278268890a153c85fb9f04ac848c442561","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/share-search-icon.png","hash":"0629677a7eb5aa3e8bab3faa310c6d8c467a3287","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/js/base/class.js","hash":"ad1e5a3011e30b83ac8aaeabffc3311dcb151bf5","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/animate.js","hash":"00b6f74ed82e5a21a9295dd2dc963e892734b7f6","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/anticheat.js","hash":"ee6b11a7ed39ae67c1c2aeeef96b4a0f40f8083c","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/comm_tools.js","hash":"e651fbb1a85ab9c615ee833f4d042c203ef430bc","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/partners.js","hash":"a4c275ffb4d3557280211e6bf0573485b397ffd8","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/pop_base.js","hash":"eae6e120c149a21caa2883c533ccc40bc07fda51","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/pop_dialog.js","hash":"4417d2fa9ad8ff6c79a2352ef07e9d10a1313ee0","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/pop_popup.js","hash":"aface5a8c3f71e9e024bf0df5b361ed8f5452f50","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/pop_popup_slide.js","hash":"1119fc14abd34ffb8e1f653cd30ca26adaafa3bf","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/js/component/qrcode.js","hash":"2e3cc4cc5545556dd97ab899ff32d3ab7ccee808","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/js/conf/const.js","hash":"e2269411b129b847eca265fbc73f0d573f2474bb","modified":1542351092556},{"_id":"themes/hexo-theme-spfk/source/static/api/js/conf/define.js","hash":"1393906ec26b7cf711c18e569a64f7d0c1951fc7","modified":1542351092556},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/api_base.js","hash":"cbacd664451f80955c2ff4caccd4b9110062c714","modified":1542351092556},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/combine_api.js","hash":"c45d76df1707b4fd739dae7022dc4a015632a81a","modified":1542351092556},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/image_api.js","hash":"43a93415f2a5dd34760042c2bcd9f4692feecb5d","modified":1542351092556},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/like_api.js","hash":"3526047b7f9f7446b883e2fa5ebcf143526449be","modified":1542351092556},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/likeshare.js","hash":"d088ffe7b6451cedf202280d16e85f75a8c3bfd3","modified":1542351092556},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/select_api.js","hash":"bf259a7912ee6124d741dbb5e45cab40bfa45e90","modified":1542351092556},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/share_api.js","hash":"f7b86d0cc063f692a73a174d04e77cbe3c5facc7","modified":1542351092556},{"_id":"themes/hexo-theme-spfk/source/static/api/js/share/slide_api.js","hash":"c317e3f7fec13d89178e475f26a689bb94e5aa76","modified":1542351092556},{"_id":"themes/hexo-theme-spfk/source/static/api/js/start/router.js","hash":"97c195ae0d30dd8c7aac55a0555f082eeed4eee0","modified":1542351092556},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/trans.js","hash":"2bf87aff540cba3bee6cc05a7a8e9a2bc8b5d907","modified":1542351092556},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/trans_bdxc.js","hash":"da78025de5717315252d2d33b4252c89b891c71c","modified":1542351092556},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/trans_bdysc.js","hash":"1be632b99fdd67ba5279aa6c56db7d528fd094c3","modified":1542351092556},{"_id":"themes/hexo-theme-spfk/source/static/api/js/trans/trans_weixin.js","hash":"e68e9bc91ee6fbcd64ac788463870f01602a8562","modified":1542351092556},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/image_view.js","hash":"bb66297a5bd2c7dd931b9145f5d4a616876f3373","modified":1542351092556},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/like_view.js","hash":"42b51bd3ee4815b9ca8df6dacb9c81a8a34d762a","modified":1542351092556},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/select_view.js","hash":"2611efec1d31d85609feea0c57e14d3f817a6220","modified":1542351092556},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/share_view.js","hash":"f445ce9cbbcf887da5e248b1cfadc03ab7df76d0","modified":1542351092556},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/slide_view.js","hash":"973ded5cd15eb119e79ffd9326af3a44167b26bd","modified":1542351092556},{"_id":"themes/hexo-theme-spfk/source/static/api/js/view/view_base.js","hash":"b3fd7dafde05d63af3dfe9e0a59f9367f81402c5","modified":1542351092556},{"_id":"source/images/wallpaper/2.jpg","hash":"c0be06aefc9a818c5a836bb88026999f050c5d38","modified":1460251155000},{"_id":"themes/hexo-theme-spfk/source/background/bg-16.jpg","hash":"d1a34d0c4b69262169b543922e4aeb4dae997ad8","modified":1542351092500},{"_id":"themes/hexo-theme-spfk/source/background/bg-111.jpg","hash":"e1631b47fede8da6c03582ceed648668547c4f09","modified":1542351092476},{"_id":"themes/hexo-theme-spfk/source/font-awesome/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1542351092540},{"_id":"themes/hexo-theme-spfk/source/static/api/js/base/tangram.js","hash":"e1952e27f6dc3d6339128cec157acef8cc0a775f","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/background/bg-12.jpg","hash":"2e0815591309863d8130881681cde32ec4bfebf1","modified":1542351092496},{"_id":"themes/hexo-theme-spfk/source/background/bg-2.jpg","hash":"40a6db13e9c461f80e2c4efee7fb63bbd594e751","modified":1542351092508},{"_id":"themes/hexo-theme-spfk/source/background/bg-13.jpg","hash":"d7237c6014e28c90f53287f48f718d0759af104b","modified":1542351092496},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r1.gif","hash":"96064d132ee2477c0e444c2e18162f9d1dc9e9c2","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r2.gif","hash":"67c84a67be3b039892e9cb8c7c29ed29813bf60f","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/static/api/img/share/r3.gif","hash":"ecdd21f1457be54afc96e2d005524eef93d7bf85","modified":1542351092552},{"_id":"themes/hexo-theme-spfk/source/background/bg-5.jpg","hash":"2d5da2a209732cce0abf2ca234c0bef0516b65ff","modified":1542351092524},{"_id":"source/images/background.jpg","hash":"81cc186f993bef4658eacdae54b6557936a1afe8","modified":1542338463000},{"_id":"source/images/wallpaper/1.jpg","hash":"81cc186f993bef4658eacdae54b6557936a1afe8","modified":1542338463000},{"_id":"source/images/wallpaper/3.jpg","hash":"feeb43179c382e954880894163aecda1a1377d6c","modified":1460251119000},{"_id":"themes/hexo-theme-spfk/source/background/bg-112.jpg","hash":"54d04b06878eec5d021b6f257bc44298f953a2b7","modified":1542351092492},{"_id":"public/atom.xml","hash":"67a1cba89ce25f49c357f9ad90e4b86d04284c85","modified":1560741881646},{"_id":"public/search.xml","hash":"03e06cb3796c11c5ab0b5be32bc3038a6d06dff4","modified":1560741881833},{"_id":"public/baidusitemap.xml","hash":"42ca07d6641e35213eb495b060b8af60b52db42d","modified":1560741881842},{"_id":"public/sitemap.xml","hash":"874ba2b3506631e07e1b8f76cec5e1f18cbae3a5","modified":1560741881842},{"_id":"public/about/index.html","hash":"8e2845459941818a65938573b5e7f5023c12dde5","modified":1560741881858},{"_id":"public/categories/index.html","hash":"f3ee17ceeb2327cfdefe9bd9f40ab3f32381b556","modified":1560741881864},{"_id":"public/tags/index.html","hash":"9d07e4aedac8b5b45bf51491c7fb2b268f4c687b","modified":1560741881865},{"_id":"public/pinboard/index.html","hash":"f04119c1556feeda68cec2b1e5aea089e705a226","modified":1560741881865},{"_id":"public/2019/02/28/ubuntu-boot-script/index.html","hash":"16dbe507e3480182c9b1113e13e25ef22d28f2c8","modified":1560741881865},{"_id":"public/2019/01/27/install-supervisor/index.html","hash":"57bc0a26392fee5986d650e308082e949839dbca","modified":1560741881865},{"_id":"public/2018/12/12/modify-request/index.html","hash":"465d1dbdd1614d554bb6dec26d87262df6cd8f63","modified":1560741881865},{"_id":"public/2018/11/30/vue-cross-domain/index.html","hash":"dda9ed0ef869c36a6a99d6803db86fd39bbb94d3","modified":1560741881865},{"_id":"public/2018/11/29/vue-axios-set/index.html","hash":"32d075fe31ee7f4268889d47d0fb832c8a8f7398","modified":1560741881865},{"_id":"public/2018/11/27/vue-use-axios/index.html","hash":"3bbc43378370a8db350c933c62ef76f549da3085","modified":1560741881865},{"_id":"public/2018/11/26/jupyter-beauty/index.html","hash":"7b349052ad669909bf967015b5ab9bb88822531c","modified":1560741881865},{"_id":"public/2018/11/26/ubuntu-typora/index.html","hash":"59f01e8829699403e5412627b9e8f3cb82b08709","modified":1560741881865},{"_id":"public/2018/11/19/gitlab-update/index.html","hash":"4c6ce92d827fd4b7c4e64fe8ea381925242025f2","modified":1560741881865},{"_id":"public/2018/11/19/gitlab-backup/index.html","hash":"004aff29a55b4b26b745af1ef1217fdfa48f86ec","modified":1560741881865},{"_id":"public/2018/11/19/pipenv/index.html","hash":"ad6d9dea0416bfa6364c067660e4b412ea7d0a82","modified":1560741881865},{"_id":"public/2018/11/19/django-errors/index.html","hash":"bb3c1dd8c27a5f234f4b3d3ce8666942515a077b","modified":1560741881866},{"_id":"public/2018/11/19/postgresql-remote/index.html","hash":"68a52954f704affd4f0c05d05ca07393b86bac1f","modified":1560741881866},{"_id":"public/2018/11/16/django-celery/index.html","hash":"b906ce75ffd995474646e9e9a0d8d59bb570472c","modified":1560741881866},{"_id":"public/2018/11/16/linux-hostname_to_ip/index.html","hash":"cdd6b2422b2b532b7174bc23db24f74de33fe6f9","modified":1560741881866},{"_id":"public/2018/11/16/django-queryset-cache/index.html","hash":"7b5abce35e5bcf537460d28eb23dec9b31f1012d","modified":1560741881866},{"_id":"public/2018/11/15/hexo-sync/index.html","hash":"382523c57f93b95cc79270fd6f455302b7621fd9","modified":1560741881866},{"_id":"public/2018/09/28/frp/index.html","hash":"a2293fea6626d837a4d8318fb2b559e27e3bd9f0","modified":1560741881866},{"_id":"public/2018/09/28/hexo-start/index.html","hash":"ba2fd491a3c508364e8601cafaa511fdd39e1fff","modified":1560741881866},{"_id":"public/archives/index.html","hash":"9ab682c40061a5a6f279921aa462795c29ab757f","modified":1560741881866},{"_id":"public/archives/page/2/index.html","hash":"56ff438c9b2698d2aa72fe3b86ad612e6dd31ae6","modified":1560741881866},{"_id":"public/archives/2018/index.html","hash":"a52bed17084f6331cca8e1acecd1c0715487f11e","modified":1560741881866},{"_id":"public/archives/2018/page/2/index.html","hash":"9717516245b54d218ab645cbf70f0e73bbf18491","modified":1560741881866},{"_id":"public/archives/2018/09/index.html","hash":"602d121cf984fe3fc047480f28fd8b6e54fb5515","modified":1560741881866},{"_id":"public/archives/2018/11/index.html","hash":"d93365ab30d0f614d1c4512532be143fb2592a6a","modified":1560741881866},{"_id":"public/archives/2018/11/page/2/index.html","hash":"d01f4c7c32a1eb4fb09567dd1729ea593c8ba155","modified":1560741881866},{"_id":"public/archives/2018/12/index.html","hash":"06360337eb3d88683eaf0343ff1ad1a5f8ee8b4f","modified":1560741881866},{"_id":"public/archives/2019/index.html","hash":"35983a0332dffd48edc8bbb6d55dc4750c9695ba","modified":1560741881866},{"_id":"public/archives/2019/01/index.html","hash":"2715613fb8f0ee593b2b154ec61d8d78c54c7443","modified":1560741881866},{"_id":"public/archives/2019/02/index.html","hash":"84d8b0a3f53967cd48517590c59f873643e562a3","modified":1560741881866},{"_id":"public/categories/GitLab/index.html","hash":"645566033434a397b2d702262104fc5f1671743a","modified":1560741881866},{"_id":"public/categories/Hexo/index.html","hash":"8314d3dbd1a466867355a43d09796d0ab9a2b541","modified":1560741881867},{"_id":"public/categories/Linux/index.html","hash":"c4e553309c9719e46b5276a3e539e7bd190d3b0f","modified":1560741881867},{"_id":"public/categories/supervisor/index.html","hash":"de88c5662ebdd45913205a0f885fab191475661f","modified":1560741881867},{"_id":"public/categories/Django/index.html","hash":"da60c07c770bf1cf50a9143a7c865ed002198c2e","modified":1560741881867},{"_id":"public/categories/PostgreSQL/index.html","hash":"47eac5ed4e73a5c4f637d355c4a6b8f4e325b459","modified":1560741881867},{"_id":"public/categories/Ubuntu/index.html","hash":"086e1cd3ff26a4ebabc38dc6b99a76dfda45e605","modified":1560741881867},{"_id":"public/categories/vue/index.html","hash":"1c33a30902634945808564776656ef94ec9d43fd","modified":1560741881867},{"_id":"public/categories/内网穿透/index.html","hash":"1ea892ea3cee80345977885c5005156f7ec5112e","modified":1560741881867},{"_id":"public/categories/Ubuntu/工具/index.html","hash":"b6672210e9e785aea67a9373101fc1ef58550932","modified":1560741881867},{"_id":"public/categories/jupyter/index.html","hash":"3b11e512be578d8c926fc0ebb4e4f45d0a294935","modified":1560741881867},{"_id":"public/categories/Python/index.html","hash":"bdc1bcc8c7e1fa114bee2ae7d62f120ca57ad38a","modified":1560741881868},{"_id":"public/index.html","hash":"79e7e1ff4b4b91f806aaaf3bb2203c4a431a032a","modified":1560741881868},{"_id":"public/page/2/index.html","hash":"db6bda6c79f20ed5ca0e92ee09513adcabb23638","modified":1560741881868},{"_id":"public/tags/GitLab/index.html","hash":"c6b1958c1cfab1f35109ed04385322af6a149f60","modified":1560741881868},{"_id":"public/tags/Hexo/index.html","hash":"4028988f54b7451c3629ac5b38cdddf64ebb0ad4","modified":1560741881868},{"_id":"public/tags/Linux/index.html","hash":"b34e7bd62729fa5e6009ccaffaef869c3a9b8e3b","modified":1560741881868},{"_id":"public/tags/supervisor/index.html","hash":"8fd5472659606d6ce5117c9775a6bbed12185db7","modified":1560741881868},{"_id":"public/tags/Django/index.html","hash":"cdd0d02e269c74d4452be4f0f7de7b55d18d42a9","modified":1560741881868},{"_id":"public/tags/PostgreSQL/index.html","hash":"195d65711812e153af233dcddf4bb30c916a7bf8","modified":1560741881868},{"_id":"public/tags/Ubuntu/index.html","hash":"d8781360171bb7b496b8f1e3bf39dc8d7d46b4c3","modified":1560741881868},{"_id":"public/tags/工具/index.html","hash":"62d1b6e00e545e8979b7ae6bfd7e31a74d5808ab","modified":1560741881868},{"_id":"public/tags/vue/index.html","hash":"8b47b19d7d55b713a0b689995ab923bd9e347fe0","modified":1560741881868},{"_id":"public/tags/jupyter/index.html","hash":"3cbce0a0e884de7f3301e9db854ece5805f6ae1a","modified":1560741881868},{"_id":"public/tags/Python/index.html","hash":"6ef47691f2a221d98a7136dd723f138c746bf5e4","modified":1560741881868},{"_id":"public/2019/06/17/gitlab-migrations/index.html","hash":"2e526182f38fcdd74393bed62a3bbf0174aea246","modified":1560741881886},{"_id":"public/archives/2019/06/index.html","hash":"01662ddf7d14a9b2af1c50b4a720270acdc9e637","modified":1560741881886},{"_id":"public/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560741881886},{"_id":"public/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560741881886},{"_id":"public/static/api/img/share/l8.gif","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560741881886},{"_id":"public/photo/index.md","hash":"c962b23bbbbd53006cf2ed07b2b431d835d00a0a","modified":1560741881899},{"_id":"public/robots.txt","hash":"a6dd9e1f9f21cea6de430a4d4d239c851c0fc8e0","modified":1560741881899},{"_id":"public/images/1046366-20180927105631267-34167117.png","hash":"aad2c61bfee92d6ddce65302c7fc845544f92184","modified":1560741881899},{"_id":"public/images/1046366-20180927105727421-1721871308.png","hash":"b0264800f4c3c14ad1f47c1310137ac7eaa1dc17","modified":1560741881899},{"_id":"public/images/1046366-20180927105741148-1074788234.png","hash":"b5444ac5e0e3b8aa500f7dfb5b9bddd67ee788be","modified":1560741881899},{"_id":"public/images/j-16x16.ico","hash":"3f37c2a78f1983bb9f9b0b75af88fb7300966a8b","modified":1560741881899},{"_id":"public/images/j-32x32.ico","hash":"08b56b6791db62b29a336ae957dd6f56bc1c4708","modified":1560741881899},{"_id":"public/apple-touch-icon.png","hash":"3f37c2a78f1983bb9f9b0b75af88fb7300966a8b","modified":1560741881899},{"_id":"public/images/2018-11-16/1046366-20181009112517884-381181059.png","hash":"6660b22bcdbea7a2be64bcfe0d3720f8e943eb27","modified":1560741881899},{"_id":"public/images/2018-11-19/2.png","hash":"3811bf2d8a574936d7a1b6a6d409da40288ff464","modified":1560741881900},{"_id":"public/images/2018-11-16/QQ20170613-215907.jpg","hash":"b73d5680983c8f3577c0d6ebf4d356b1761a0da4","modified":1560741881900},{"_id":"public/images/2018-11-19/4.png","hash":"66b3595bcec60570f24816f221cbc79548e4f487","modified":1560741881900},{"_id":"public/images/avatar/avatar.jpg","hash":"2fd260c7d71adf8f2e4cf473fbfbe0f46ba3a180","modified":1560741881900},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1560741881900},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1560741881900},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1560741881900},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1560741881900},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1560741881900},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1560741881900},{"_id":"public/img/alipay.png","hash":"6ec0c618109aac31a212d252a3b85f2975b82b3a","modified":1560741881900},{"_id":"public/img/alipayimg.jpg","hash":"81b1d55f45b4ff641d10a2e90cfa9d4a9fe4b89c","modified":1560741881900},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1560741881900},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1560741881900},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1560741881900},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1560741881900},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1560741881900},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1560741881900},{"_id":"public/img/favicon.png","hash":"5b4e9c94ff3396db5b074b69c1aa5bb909aba825","modified":1560741881900},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1560741881900},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1560741881900},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1560741881900},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1560741881900},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1560741881901},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1560741881901},{"_id":"public/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1560741881901},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1560741881901},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1560741881901},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1560741881901},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1560741881901},{"_id":"public/img/wechatimg.jpg","hash":"a84daffaa8bc70b928bbfbc868846cfa8262f3eb","modified":1560741881901},{"_id":"public/img/segmentfault.png","hash":"4483ab273423deb65021111fc8ad9512b69e45b2","modified":1560741881901},{"_id":"public/img/instagram.png","hash":"3c148a3882a8d141d7d405be8c4815d0dcb03561","modified":1560741881901},{"_id":"public/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1560741881901},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1560741881901},{"_id":"public/img/weixin.png","hash":"92b8df9aba9169c1553c01994bf21a938fa39cb7","modified":1560741881901},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1560741881901},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1560741881901},{"_id":"public/static/api/img/share/icons_0_16.png","hash":"0eec1e81a04664b2032bd389513349e9bd5d5b0f","modified":1560741881901},{"_id":"public/static/api/img/share/icons_1_24.png","hash":"9f1d472095dbe138ef7aff069b1d18cae6ffa942","modified":1560741881901},{"_id":"public/static/api/img/share/icons_1_32.png","hash":"09825de5f238c97e4374d545961d6e0d5bbfb3e2","modified":1560741881901},{"_id":"public/static/api/img/share/icons_2_16.png","hash":"07340442cb61aabb419dd226f4bfb206a7577f52","modified":1560741881901},{"_id":"public/static/api/img/share/icons_2_24.png","hash":"e47fb87c533f2be89f22901f0864d9b5ef83412d","modified":1560741881901},{"_id":"public/static/api/img/share/icons_2_32.png","hash":"deba62865245a6b5aafa446787d72165c703b943","modified":1560741881901},{"_id":"public/static/api/img/share/l0.gif","hash":"738b92632b0a9789a9eb568b8d101eb64f55f6e0","modified":1560741881901},{"_id":"public/static/api/img/share/l1.gif","hash":"70e1932ca7a622ed3322b683eceb7a590860a55e","modified":1560741881901},{"_id":"public/static/api/img/share/icons_0_24.png","hash":"a89223f9714c8c4fa169430a327963ca6a1c9a6e","modified":1560741881901},{"_id":"public/static/api/img/share/icons_0_32.png","hash":"c20521634fdacef39631031671528713e6ba6081","modified":1560741881902},{"_id":"public/static/api/img/share/l2.gif","hash":"e6a5d6104c226a686d48759e0268e09d762e242e","modified":1560741881902},{"_id":"public/static/api/img/share/l3.gif","hash":"26c0dd37d98df63abb9d3d83e01bb47c34ee3f0f","modified":1560741881902},{"_id":"public/static/api/img/share/l4.gif","hash":"8a9c3cf99766d3f07a9c480cfdffdc3197b9a6b9","modified":1560741881902},{"_id":"public/static/api/img/share/l5.gif","hash":"148706f56b8ef4fd9d8483d0ac3a6730e72fc0ad","modified":1560741881902},{"_id":"public/static/api/img/share/l6.gif","hash":"f4b8e3188f744f13aca46b27b451d55d9e209c48","modified":1560741881902},{"_id":"public/static/api/img/share/l7.gif","hash":"e4f7e5e56c8f4eb026b5cb0affe3bd69c31af261","modified":1560741881902},{"_id":"public/static/api/img/share/icons_1_16.png","hash":"3793c3265429ab7b830bfaf18322259cd0b4c4ef","modified":1560741881902},{"_id":"public/static/api/img/share/pop_c.gif","hash":"e8b9ece6ddaa47ccb2c15f2396d1cd3020740603","modified":1560741881902},{"_id":"public/static/api/img/share/r0.gif","hash":"882f255fbafc0136a3917c1dd40db88879c1b1c1","modified":1560741881902},{"_id":"public/static/api/img/share/r4.gif","hash":"517435e69a2215a0f003e75a4861154ca963c30e","modified":1560741881902},{"_id":"public/static/api/img/share/r5.gif","hash":"e61b32d1830390303927bdab21823959f8dc7023","modified":1560741881902},{"_id":"public/static/api/img/share/r6.gif","hash":"4bc01e08ef0015fddf5b8c7257c094ec584ca3ee","modified":1560741881902},{"_id":"public/static/api/img/share/r7.gif","hash":"3c596c924910c93cf3e37cc1b2870dbf271151e2","modified":1560741881902},{"_id":"public/static/api/img/share/r8.gif","hash":"c068ece54a72a3f2428d4f1b5ca7c176f027dd4e","modified":1560741881902},{"_id":"public/static/api/img/share/sc.png","hash":"e5a2ca56973a3d6608e7e3a48ebd9fa5ebda9991","modified":1560741881902},{"_id":"public/static/api/img/share/selectshare_close.png","hash":"6f3666278268890a153c85fb9f04ac848c442561","modified":1560741881902},{"_id":"public/static/api/img/share/share-search-icon.png","hash":"0629677a7eb5aa3e8bab3faa310c6d8c467a3287","modified":1560741881902},{"_id":"public/static/api/img/share/r1.gif","hash":"96064d132ee2477c0e444c2e18162f9d1dc9e9c2","modified":1560741881902},{"_id":"public/static/api/img/share/r2.gif","hash":"67c84a67be3b039892e9cb8c7c29ed29813bf60f","modified":1560741881902},{"_id":"public/static/api/img/share/r3.gif","hash":"ecdd21f1457be54afc96e2d005524eef93d7bf85","modified":1560741881902},{"_id":"public/images/breakering.jpg","hash":"13a20e60f53d42e197019ed81e3d7270a0ccd909","modified":1560741882839},{"_id":"public/images/1046366-20180927105622574-1652030646.png","hash":"6a101389d9798bf03141d3def6b4c25d056df7c0","modified":1560741882841},{"_id":"public/images/2018-11-16/QQ20170613-220348.jpg","hash":"6bdbc4ef03f519c00dd06ede6e344a1b59ae1102","modified":1560741882849},{"_id":"public/images/2018-11-19/3.png","hash":"878f162ce4beb27eaf9abcc8c37c3f7ff352bcf2","modified":1560741882849},{"_id":"public/images/2018-11-19/1.png","hash":"51b19ab4be92b175f5370c3c9b0497773d7e9a65","modified":1560741882850},{"_id":"public/images/avatar/Breakering0.jpg","hash":"5215ed5322761e96ae81286e5d4a0628527f530e","modified":1560741882850},{"_id":"public/images/2018-11-26/1543199245282.png","hash":"09d93dfd6e560cc0fa793c3f9c7f0165e434e478","modified":1560741882850},{"_id":"public/images/avatar/Breakering.jpg","hash":"13a20e60f53d42e197019ed81e3d7270a0ccd909","modified":1560741882850},{"_id":"public/images/wallpaper/4.jpg","hash":"9741bce82809ebdfc2bca8a3fff14715108fedb4","modified":1560741882850},{"_id":"public/background/bg-25.jpg","hash":"7a05a524b70c9acd75c3f16a3b9992e4587995bd","modified":1560741882850},{"_id":"public/img/head.jpg","hash":"80c0999acfc1173183d3dd243b4b90d077ab97cb","modified":1560741882850},{"_id":"public/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1560741882850},{"_id":"public/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1560741882850},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1560741882850},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1560741882850},{"_id":"public/css/default.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560741882861},{"_id":"public/css/loading-style.css","hash":"1f67362d809e85edc9f122db7bc3711af1ed1d8b","modified":1560741882861},{"_id":"public/css/showshare.css","hash":"3efc4afd0d136fb5dec993e9cd9ce85b9d1cf589","modified":1560741882861},{"_id":"public/css/search.css","hash":"07b0eb9cc1f3d87adf09c83c5ad818eca98d3b10","modified":1560741882861},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1560741882861},{"_id":"public/js/TweenMax.js","hash":"0ba64564a4fde4085fa3971dd53b7d64a41751e1","modified":1560741882861},{"_id":"public/js/clipboard.min.js","hash":"c13b4bb8fee46447284590d2afc0efca0ea3cb7b","modified":1560741882861},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1560741882861},{"_id":"public/js/jquery.lazyload.js","hash":"8e4ad3e17f8e82be311b6b6e87811762e2b2d764","modified":1560741882861},{"_id":"public/js/main.js","hash":"921b2fb56e48cce3d16ceb4a3fadf8e666c73a0a","modified":1560741882861},{"_id":"public/js/mobile.js","hash":"d3847e5bcaf39108931724ecb02770c62b10889f","modified":1560741882862},{"_id":"public/js/pc.js","hash":"ab375af6e3bcd054b1e87e1a8dcd3d7d25c2db40","modified":1560741882862},{"_id":"public/js/plugins.js","hash":"c1cf96b2d852b5803228a34d99014b005623bc06","modified":1560741882862},{"_id":"public/js/search.js","hash":"130335299cad06aed41ade598c4e2445dc8eebce","modified":1560741882862},{"_id":"public/css/pace/pace-theme-flash.css","hash":"508bce8b59a1fbc1f1443a7c4ab3b026e5517dab","modified":1560741882862},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1560741882862},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1560741882862},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1560741882862},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1560741882862},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1560741882862},{"_id":"public/js/404/jquery.parallaxify-0.0.2.min.js","hash":"b97e2dfcb210b76f7bdd6e1800b26128bf4fad99","modified":1560741882862},{"_id":"public/static/api/css/like.css","hash":"2024d58206df01b858c38f07957f928b44e14cb3","modified":1560741882862},{"_id":"public/static/api/css/share_popup.css","hash":"338ba2b30ef8ce0c84cd36b37d7f8482996291dc","modified":1560741882862},{"_id":"public/static/api/css/share_style0_16.css","hash":"090e77e9e6e9b8ee0d73a233cbe46499de935bdd","modified":1560741882862},{"_id":"public/static/api/css/share_style0_32.css","hash":"7c2d12ea532c8a55c102b649bb23ef5bf53b3ed3","modified":1560741882862},{"_id":"public/static/api/css/share_style0_24.css","hash":"7d1f9f32b80f91001f4f951aa045180cde22d82e","modified":1560741882862},{"_id":"public/static/api/css/share_style1_16.css","hash":"aeb4e9fa96cfa0167481e1f4007079dc3f3c6c27","modified":1560741882862},{"_id":"public/static/api/css/share_style1_24.css","hash":"3ee5f745c863b4f68299fe5dc125f913ca619c07","modified":1560741882862},{"_id":"public/static/api/css/share_style1_32.css","hash":"626d67a4c0bb72a152e90d25dbf281c0c35a2140","modified":1560741882862},{"_id":"public/static/api/css/share_style2.css","hash":"1ad451187cde8a74843fd398b924ca0ac911e9be","modified":1560741882862},{"_id":"public/static/api/css/share_style2_16.css","hash":"572c8e856988e463eb865f38d33ba003cc20d083","modified":1560741882862},{"_id":"public/static/api/css/share_style2_24.css","hash":"917d963d3be111064cbb1d122963da91ee3724a0","modified":1560741882862},{"_id":"public/static/api/css/share_style2_32.css","hash":"3657bbc4b5bbc66ebca4906ee0a1cbf9f98be883","modified":1560741882862},{"_id":"public/static/api/css/share_style4.css","hash":"0a9e2ed712a5ef5c4699c038cd001a0d688a0fdf","modified":1560741882863},{"_id":"public/static/api/css/slide_share.css","hash":"3898feaf45559b039f885bee8f9e831f48adb20c","modified":1560741882863},{"_id":"public/static/api/css/weixin_popup.css","hash":"5e6c5084bfd16051de5776c2e136a5462b08a32c","modified":1560741882863},{"_id":"public/static/api/js/trans/data.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560741882863},{"_id":"public/static/api/js/trans/logger.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560741882863},{"_id":"public/static/api/css/imgshare.css","hash":"c3624a2dde649ed28b2e5d1f050fd971fbaf71a0","modified":1560741882863},{"_id":"public/static/api/css/select_share.css","hash":"d0259abdb410193cf761e42bffaa51e70327a0cd","modified":1560741882863},{"_id":"public/static/api/js/base/class.js","hash":"ad1e5a3011e30b83ac8aaeabffc3311dcb151bf5","modified":1560741882863},{"_id":"public/static/api/js/component/animate.js","hash":"00b6f74ed82e5a21a9295dd2dc963e892734b7f6","modified":1560741882863},{"_id":"public/static/api/js/component/anticheat.js","hash":"ee6b11a7ed39ae67c1c2aeeef96b4a0f40f8083c","modified":1560741882863},{"_id":"public/static/api/js/component/comm_tools.js","hash":"e651fbb1a85ab9c615ee833f4d042c203ef430bc","modified":1560741882863},{"_id":"public/static/api/js/component/partners.js","hash":"a4c275ffb4d3557280211e6bf0573485b397ffd8","modified":1560741882863},{"_id":"public/static/api/js/component/pop_base.js","hash":"eae6e120c149a21caa2883c533ccc40bc07fda51","modified":1560741882863},{"_id":"public/static/api/js/component/pop_dialog.js","hash":"4417d2fa9ad8ff6c79a2352ef07e9d10a1313ee0","modified":1560741882863},{"_id":"public/static/api/js/component/pop_popup.js","hash":"aface5a8c3f71e9e024bf0df5b361ed8f5452f50","modified":1560741882863},{"_id":"public/static/api/js/component/pop_popup_slide.js","hash":"1119fc14abd34ffb8e1f653cd30ca26adaafa3bf","modified":1560741882863},{"_id":"public/static/api/js/component/qrcode.js","hash":"2e3cc4cc5545556dd97ab899ff32d3ab7ccee808","modified":1560741882863},{"_id":"public/static/api/js/conf/const.js","hash":"e2269411b129b847eca265fbc73f0d573f2474bb","modified":1560741882863},{"_id":"public/static/api/js/conf/define.js","hash":"1393906ec26b7cf711c18e569a64f7d0c1951fc7","modified":1560741882863},{"_id":"public/static/api/js/share/api_base.js","hash":"cbacd664451f80955c2ff4caccd4b9110062c714","modified":1560741882863},{"_id":"public/static/api/js/share/combine_api.js","hash":"c45d76df1707b4fd739dae7022dc4a015632a81a","modified":1560741882864},{"_id":"public/static/api/js/share/image_api.js","hash":"43a93415f2a5dd34760042c2bcd9f4692feecb5d","modified":1560741882864},{"_id":"public/static/api/js/share/like_api.js","hash":"3526047b7f9f7446b883e2fa5ebcf143526449be","modified":1560741882864},{"_id":"public/static/api/js/share/likeshare.js","hash":"d088ffe7b6451cedf202280d16e85f75a8c3bfd3","modified":1560741882864},{"_id":"public/static/api/js/share/select_api.js","hash":"bf259a7912ee6124d741dbb5e45cab40bfa45e90","modified":1560741882864},{"_id":"public/static/api/js/share/share_api.js","hash":"f7b86d0cc063f692a73a174d04e77cbe3c5facc7","modified":1560741882864},{"_id":"public/static/api/js/share/slide_api.js","hash":"c317e3f7fec13d89178e475f26a689bb94e5aa76","modified":1560741882864},{"_id":"public/static/api/js/start/router.js","hash":"97c195ae0d30dd8c7aac55a0555f082eeed4eee0","modified":1560741882864},{"_id":"public/static/api/js/trans/trans.js","hash":"2bf87aff540cba3bee6cc05a7a8e9a2bc8b5d907","modified":1560741882864},{"_id":"public/static/api/js/trans/trans_bdysc.js","hash":"1be632b99fdd67ba5279aa6c56db7d528fd094c3","modified":1560741882864},{"_id":"public/static/api/js/trans/trans_weixin.js","hash":"e68e9bc91ee6fbcd64ac788463870f01602a8562","modified":1560741882864},{"_id":"public/static/api/js/trans/trans_bdxc.js","hash":"da78025de5717315252d2d33b4252c89b891c71c","modified":1560741882864},{"_id":"public/static/api/js/view/image_view.js","hash":"bb66297a5bd2c7dd931b9145f5d4a616876f3373","modified":1560741882864},{"_id":"public/static/api/js/view/like_view.js","hash":"42b51bd3ee4815b9ca8df6dacb9c81a8a34d762a","modified":1560741882864},{"_id":"public/static/api/js/view/select_view.js","hash":"2611efec1d31d85609feea0c57e14d3f817a6220","modified":1560741882864},{"_id":"public/static/api/js/view/share_view.js","hash":"f445ce9cbbcf887da5e248b1cfadc03ab7df76d0","modified":1560741882864},{"_id":"public/static/api/js/view/slide_view.js","hash":"973ded5cd15eb119e79ffd9326af3a44167b26bd","modified":1560741882864},{"_id":"public/static/api/js/view/view_base.js","hash":"b3fd7dafde05d63af3dfe9e0a59f9367f81402c5","modified":1560741882864},{"_id":"public/css/style.css","hash":"dc57f5631090de24620a712bf2bdb92f789c6427","modified":1560741882864},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1560741882864},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1560741882864},{"_id":"public/js/pace.js","hash":"b49c10cd65d9488f7338e3c778e55ac6628650f3","modified":1560741882864},{"_id":"public/js/TweenMax.min.js","hash":"eaa4e4a08400da3f22dedda706ba56cdce5b0b7a","modified":1560741882865},{"_id":"public/js/embed.js","hash":"8d2d4a812ab639bc02fdd8749d3a39f6b9406c54","modified":1560741882865},{"_id":"public/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1560741882865},{"_id":"public/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1560741882865},{"_id":"public/js/gitment.browser.js","hash":"b16277d8b38666a58cbaeb339f4fb0e82238ca1b","modified":1560741882865},{"_id":"public/js/404/jquery-2.0.3.min.js","hash":"fbf9c77d0c4e3c34a485980c1e5316b6212160c8","modified":1560741882865},{"_id":"public/static/api/js/share.js","hash":"5e71147fe4a93bc99387a5cc1c6894d8b6ab2d5e","modified":1560741882865},{"_id":"public/static/api/js/base/tangram.js","hash":"e1952e27f6dc3d6339128cec157acef8cc0a775f","modified":1560741882865},{"_id":"public/background/bg-109.jpg","hash":"6171c1e921c8cc9bdcd7276cf7f0bee5295f4672","modified":1560741882865},{"_id":"public/background/bg-1.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1560741882865},{"_id":"public/background/bg-11.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1560741882865},{"_id":"public/background/bg-27.jpg","hash":"ced50e6e8cad2b0db97445c4e1463d4a62540b9b","modified":1560741882865},{"_id":"public/background/bg.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1560741882865},{"_id":"public/background/bg-17.jpg","hash":"6ab5e470059e8ccb0c8bc6786abfb5db7e9a1826","modified":1560741882865},{"_id":"public/background/bg-20.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1560741882866},{"_id":"public/background/bg-26.jpg","hash":"3730aa317f9d75ca327b34478cd58e72667b04e8","modified":1560741882866},{"_id":"public/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1560741882866},{"_id":"public/background/bg-3.jpg","hash":"f1347eddd07bdae93ab6bebad8627eddc5baeb44","modified":1560741882875},{"_id":"public/background/bg-15.jpg","hash":"ce5760578eb814fe951c56200e81c6f47b6468d4","modified":1560741882875},{"_id":"public/background/bg-23.jpg","hash":"050937d649be2c02ef8a66a0ffe7d320b236d1b0","modified":1560741882876},{"_id":"public/background/bg-7.jpg","hash":"acbe0946a47ba16b79f062dbee14c4c9ff9a48da","modified":1560741882876},{"_id":"public/images/cq/1.jpeg","hash":"435a92d1177d2ceed4f598035aef9af7ce165917","modified":1560741882883},{"_id":"public/background/bg-14.jpg","hash":"2fd6ede2bc9de2d26d910ea4e45d28b2350881eb","modified":1560741882883},{"_id":"public/background/bg-9.jpg","hash":"df731da0fe0de9a05d99d017e747252c990f972d","modified":1560741882884},{"_id":"public/images/cq/2.jpeg","hash":"b78cb2b6c7b24e4427dcde3ca9a01585709aff49","modified":1560741882894},{"_id":"public/images/cq/3.jpeg","hash":"fbd749880ba7a4714a04dc21c57cf97da4581405","modified":1560741882895},{"_id":"public/background/bg-19.jpg","hash":"d77504412d28432643fc61ed9fd9f7c57096bdd9","modified":1560741882895},{"_id":"public/background/bg-21.jpg","hash":"7c4c6cd5d75115093fa29bba7372fa198f04b0f1","modified":1560741882896},{"_id":"public/background/bg-22.jpg","hash":"7a055391fa4188d9c22fdc1d34a10b26e2f0826d","modified":1560741882896},{"_id":"public/background/bg-4.jpg","hash":"da47f889e02241c8b095f852fb7efd89c114599d","modified":1560741882896},{"_id":"public/background/bg-24.jpg","hash":"796fa5262d7714e8ce9496a2d03864429cfc5b45","modified":1560741882897},{"_id":"public/background/bg-6.jpg","hash":"1a4f4c8875b2c56e7992000979a7fca7856eec35","modified":1560741882897},{"_id":"public/background/bg-8.jpg","hash":"dbecc189e28d00fa23e397eb512e039c2ff03c87","modified":1560741882897},{"_id":"public/font-awesome/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1560741882897},{"_id":"public/background/bg-18.jpg","hash":"4d61dc41a781a9c1d37c9e5e413ac0d8a9538f6a","modified":1560741882907},{"_id":"public/background/bg-10.jpg","hash":"dfb23c1c3cf8a3dcb8dc0ea10cf06501c151a2a2","modified":1560741882907},{"_id":"public/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1560741882907},{"_id":"public/background/bg-12.jpg","hash":"2e0815591309863d8130881681cde32ec4bfebf1","modified":1560741882907},{"_id":"public/images/banner.jpg","hash":"c0be06aefc9a818c5a836bb88026999f050c5d38","modified":1560741882909},{"_id":"public/background/bg-16.jpg","hash":"d1a34d0c4b69262169b543922e4aeb4dae997ad8","modified":1560741882909},{"_id":"public/background/bg-111.jpg","hash":"e1631b47fede8da6c03582ceed648668547c4f09","modified":1560741882910},{"_id":"public/images/wallpaper/2.jpg","hash":"c0be06aefc9a818c5a836bb88026999f050c5d38","modified":1560741882911},{"_id":"public/background/bg-13.jpg","hash":"d7237c6014e28c90f53287f48f718d0759af104b","modified":1560741882911},{"_id":"public/background/bg-2.jpg","hash":"40a6db13e9c461f80e2c4efee7fb63bbd594e751","modified":1560741882912},{"_id":"public/background/bg-5.jpg","hash":"2d5da2a209732cce0abf2ca234c0bef0516b65ff","modified":1560741882914},{"_id":"public/images/background.jpg","hash":"81cc186f993bef4658eacdae54b6557936a1afe8","modified":1560741882918},{"_id":"public/images/wallpaper/1.jpg","hash":"81cc186f993bef4658eacdae54b6557936a1afe8","modified":1560741882918},{"_id":"public/images/wallpaper/3.jpg","hash":"feeb43179c382e954880894163aecda1a1377d6c","modified":1560741882918},{"_id":"public/background/bg-112.jpg","hash":"54d04b06878eec5d021b6f257bc44298f953a2b7","modified":1560741882925}],"Category":[{"name":"GitLab","_id":"cjwztf1v30004vifcmvhue9yo"},{"name":"Hexo","_id":"cjwztf1vg000gvifc9lifdg60"},{"name":"Linux","_id":"cjwztf1vj000nvifcqox5ykns"},{"name":"supervisor","_id":"cjwztf1vo000yvifcxbqt3ka6"},{"name":"Django","_id":"cjwztf1vq0015vifcgxgl17cn"},{"name":"PostgreSQL","_id":"cjwztf1vt001cvifcxbhdf85g"},{"name":"Ubuntu","_id":"cjwztf1vu001hvifcw7bfc65r"},{"name":"vue","_id":"cjwztf1vw001qvifcodsrrcwq"},{"name":"内网穿透","_id":"cjwztf1vz0026vifcr01kfvgu"},{"name":"工具","parent":"cjwztf1vu001hvifcw7bfc65r","_id":"cjwztf1w1002evifcqa8xdidn"},{"name":"jupyter","_id":"cjwztf1wd002mvifckvgnbs1b"},{"name":"Python","_id":"cjwztf1we002ovifcvxeqqsdz"}],"Data":[],"Page":[{"title":"关于","date":"2018-09-28T11:03:04.000Z","comments":0,"_content":"sdfsadfsdafasdf","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2018-09-28 19:03:04\ncomments: false\n---\nsdfsadfsdafasdf","updated":"2018-11-14T07:29:40.220Z","path":"about/index.html","layout":"page","_id":"cjwztf1uz0001vifcw4knhsen","content":"<p>sdfsadfsdafasdf</p>\n","site":{"data":{}},"excerpt":"","more":"<p>sdfsadfsdafasdf</p>\n"},{"title":"分类","date":"2018-09-28T11:02:56.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-09-28 19:02:56\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-09-30T07:22:08.362Z","path":"categories/index.html","layout":"page","_id":"cjwztf1v10003vifczfnewlt3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-09-28T11:02:47.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-09-28 19:02:47\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-09-30T07:22:08.366Z","path":"tags/index.html","layout":"page","_id":"cjwztf1v50007vifcvk663bfm","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"我的pinboard","date":"2018-11-26T09:36:52.000Z","comments":0,"original":false,"_content":"<iframe src=\"https://pinboard.in/u:Breakering\" width=\"100%\" height=\"800px\" style=\"\n    background: white;\n\"></iframe>\n\n","source":"pinboard/index.md","raw":"---\ntitle: 我的pinboard\ndate: 2018-11-26 17:36:52\ncomments: false\noriginal: false\n---\n<iframe src=\"https://pinboard.in/u:Breakering\" width=\"100%\" height=\"800px\" style=\"\n    background: white;\n\"></iframe>\n\n","updated":"2018-11-26T09:55:17.747Z","path":"pinboard/index.html","layout":"page","_id":"cjwztf1v70009vifc93fys0d5","content":"<iframe src=\"https://pinboard.in/u:Breakering\" width=\"100%\" height=\"800px\" style=\"\n    background: white;\n\"></iframe>\n","site":{"data":{}},"excerpt":"","more":"<iframe src=\"https://pinboard.in/u:Breakering\" width=\"100%\" height=\"800px\" style=\"\n    background: white;\n\"></iframe>\n"}],"Post":[{"title":"GitLab备份与恢复","subtitle":"gitlab-backup","original":true,"date":"2018-11-19T08:15:50.000Z","description":"GitLab备份与恢复","photos":[],"_content":"# 一、 备份gitlab\ngitlab的备份比较简单，我们直接使用gitlab本身提供的命令进行备份即可。\n\n## 1.1 通过gitlab-rake命令备份gitlab\ngitlab提供的备份命令为gitlab-rake，备份命令使用如下:\n\n```shell\ngitlab-rake gitlab:backup:create\n```\n\n该命令会备份gitlab仓库、数据库、用户、用户组、用户密钥、权限等信息。\n\n备份完成后备份文件会出现在`/var/opt/gitlab/backups/`\n![](/images/2018-11-19/1.png)\n\n当然备份的位置可以更换,使用如下命令：\n\n```shell\nvim /etc/gitlab/gitlab.rb\n```\n\n![](/images/2018-11-19/2.png)\n\n修改上图`backup_path`的值即可，之后使用`gitlab-ctl reconfigure`使得配置生效\n\n**ps：备份文件的名称中1537261122_2018_09_18_9.2.5是此次备份的编号。该编号我们会在后续恢复gitlab数据使用到。**\n\n## 1.2 定时备份gitlab\n如果要使ｇitlab自动进行备份的话，我们可以通过crontab命令来实现自动备份。强烈建议使用系统crontab命令，而不是用户crontab。\n\n以实现每天凌晨4点进行一次自动备份为例，系统的crontab配置如下:\n\n```shell\nvim /etc/crontab\n```\n\n`0 4 * * * root /opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1`\n\n然后重启crontab服务，如下：\n\n```shell\nsystemctl restart crond\n```\n\n## 1.3 保留部分备份文件\n随着时间的推移gitlab备份文件越来越多，服务器的磁盘空间也不够大。\n\n此时我们就要删除部分旧的备份文件，gitlab也提供了删除旧的备份文件功能。该功能在gitlab的配置文件中，进行配置即可。\n\n在此以保留7天之前的备份文件为例，如下：\n\n```shell\nvim /etc/gitlab/gitlab.rb\n```\n\n`gitlab_rails[‘backup_keep_time’] = 604800`\n\n其中backup_keep_time是以秒为单位进行计算的，然后执行命令`gitlab-ctl reconfigure`即可。\n\n# 二、gitlab仓库恢复\n要验证gitlab备份的有效性，我们可以把该备份文件复制到已经安装好gitlab服务器的/var/opt/gitlab/backups/目录下。然后进行数据恢复，最后访问并查看其数据完整性即可。\n\n通过gitlab备份文件可以恢复gitlab所有的信息，包括仓库、数据库、用户、用户组、用户密钥、权限等信息。\n\n**ps：新服务器上的gitlab的版本号必须与创建备份时的gitlab版本号相同。**\n\ngitlab数据恢复比较简单，具体步骤如下：\n\n## 2.1 停止相关数据连接服务\n在gitlab服务器上停止相关数据连接服务，命令如下：\n\n```shell\ngitlab-ctl stop unicorn\ngitlab-ctl stop sidekiq\n```\n\n## 2.2 恢复gitlab仓库\n现在我们要从1537261122_2018_09_18_9.2.5这个备份编号中，恢复数据，命令如下：\n\n```shell\ngitlab-rake gitlab:backup:restore BACKUP=1537261122_2018_09_18_9.2.5\n```\n\n如果出现多个done的信息，说明整个gitlab数据就已经正常恢复完毕。\n\n## 2.3 启动gitlab服务\n恢复完毕以后，我们现在来启动gitlab，使用以下命令：\n\n```shell\ngitlab-ctl start\n```\n\n**强烈建议：重启该新服务器。**\n\n# 三、References:\n1. [gitlab的备份与恢复](https://www.ilanni.com/?p=13890)\n","source":"_posts/GitLab备份与恢复.md","raw":"---\ntitle: GitLab备份与恢复\nsubtitle: gitlab-backup\noriginal: true\ndate: 2018-11-19 16:15:50\ndescription: GitLab备份与恢复\ntags: GitLab\ncategories: GitLab\nphotos:\n---\n# 一、 备份gitlab\ngitlab的备份比较简单，我们直接使用gitlab本身提供的命令进行备份即可。\n\n## 1.1 通过gitlab-rake命令备份gitlab\ngitlab提供的备份命令为gitlab-rake，备份命令使用如下:\n\n```shell\ngitlab-rake gitlab:backup:create\n```\n\n该命令会备份gitlab仓库、数据库、用户、用户组、用户密钥、权限等信息。\n\n备份完成后备份文件会出现在`/var/opt/gitlab/backups/`\n![](/images/2018-11-19/1.png)\n\n当然备份的位置可以更换,使用如下命令：\n\n```shell\nvim /etc/gitlab/gitlab.rb\n```\n\n![](/images/2018-11-19/2.png)\n\n修改上图`backup_path`的值即可，之后使用`gitlab-ctl reconfigure`使得配置生效\n\n**ps：备份文件的名称中1537261122_2018_09_18_9.2.5是此次备份的编号。该编号我们会在后续恢复gitlab数据使用到。**\n\n## 1.2 定时备份gitlab\n如果要使ｇitlab自动进行备份的话，我们可以通过crontab命令来实现自动备份。强烈建议使用系统crontab命令，而不是用户crontab。\n\n以实现每天凌晨4点进行一次自动备份为例，系统的crontab配置如下:\n\n```shell\nvim /etc/crontab\n```\n\n`0 4 * * * root /opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1`\n\n然后重启crontab服务，如下：\n\n```shell\nsystemctl restart crond\n```\n\n## 1.3 保留部分备份文件\n随着时间的推移gitlab备份文件越来越多，服务器的磁盘空间也不够大。\n\n此时我们就要删除部分旧的备份文件，gitlab也提供了删除旧的备份文件功能。该功能在gitlab的配置文件中，进行配置即可。\n\n在此以保留7天之前的备份文件为例，如下：\n\n```shell\nvim /etc/gitlab/gitlab.rb\n```\n\n`gitlab_rails[‘backup_keep_time’] = 604800`\n\n其中backup_keep_time是以秒为单位进行计算的，然后执行命令`gitlab-ctl reconfigure`即可。\n\n# 二、gitlab仓库恢复\n要验证gitlab备份的有效性，我们可以把该备份文件复制到已经安装好gitlab服务器的/var/opt/gitlab/backups/目录下。然后进行数据恢复，最后访问并查看其数据完整性即可。\n\n通过gitlab备份文件可以恢复gitlab所有的信息，包括仓库、数据库、用户、用户组、用户密钥、权限等信息。\n\n**ps：新服务器上的gitlab的版本号必须与创建备份时的gitlab版本号相同。**\n\ngitlab数据恢复比较简单，具体步骤如下：\n\n## 2.1 停止相关数据连接服务\n在gitlab服务器上停止相关数据连接服务，命令如下：\n\n```shell\ngitlab-ctl stop unicorn\ngitlab-ctl stop sidekiq\n```\n\n## 2.2 恢复gitlab仓库\n现在我们要从1537261122_2018_09_18_9.2.5这个备份编号中，恢复数据，命令如下：\n\n```shell\ngitlab-rake gitlab:backup:restore BACKUP=1537261122_2018_09_18_9.2.5\n```\n\n如果出现多个done的信息，说明整个gitlab数据就已经正常恢复完毕。\n\n## 2.3 启动gitlab服务\n恢复完毕以后，我们现在来启动gitlab，使用以下命令：\n\n```shell\ngitlab-ctl start\n```\n\n**强烈建议：重启该新服务器。**\n\n# 三、References:\n1. [gitlab的备份与恢复](https://www.ilanni.com/?p=13890)\n","slug":"GitLab备份与恢复","published":1,"updated":"2018-12-12T06:47:00.029Z","comments":1,"layout":"post","link":"","_id":"cjwztf1uv0000vifc5gurur0s","content":"<h1>一、 备份gitlab</h1>\n<p>gitlab的备份比较简单，我们直接使用gitlab本身提供的命令进行备份即可。</p>\n<h2 id=\"1-1-通过gitlab-rake命令备份gitlab\">1.1 通过gitlab-rake命令备份gitlab</h2>\n<p>gitlab提供的备份命令为gitlab-rake，备份命令使用如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure>\n<p>该命令会备份gitlab仓库、数据库、用户、用户组、用户密钥、权限等信息。</p>\n<p>备份完成后备份文件会出现在<code>/var/opt/gitlab/backups/</code><br>\n<img src=\"/images/2018-11-19/1.png\" alt=\"\"></p>\n<p>当然备份的位置可以更换,使用如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2018-11-19/2.png\" alt=\"\"></p>\n<p>修改上图<code>backup_path</code>的值即可，之后使用<code>gitlab-ctl reconfigure</code>使得配置生效</p>\n<p><strong>ps：备份文件的名称中1537261122_2018_09_18_9.2.5是此次备份的编号。该编号我们会在后续恢复gitlab数据使用到。</strong></p>\n<h2 id=\"1-2-定时备份gitlab\">1.2 定时备份gitlab</h2>\n<p>如果要使ｇitlab自动进行备份的话，我们可以通过crontab命令来实现自动备份。强烈建议使用系统crontab命令，而不是用户crontab。</p>\n<p>以实现每天凌晨4点进行一次自动备份为例，系统的crontab配置如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/crontab</span><br></pre></td></tr></table></figure>\n<p><code>0 4 * * * root /opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1</code></p>\n<p>然后重启crontab服务，如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart crond</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-3-保留部分备份文件\">1.3 保留部分备份文件</h2>\n<p>随着时间的推移gitlab备份文件越来越多，服务器的磁盘空间也不够大。</p>\n<p>此时我们就要删除部分旧的备份文件，gitlab也提供了删除旧的备份文件功能。该功能在gitlab的配置文件中，进行配置即可。</p>\n<p>在此以保留7天之前的备份文件为例，如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>\n<p><code>gitlab_rails[‘backup_keep_time’] = 604800</code></p>\n<p>其中backup_keep_time是以秒为单位进行计算的，然后执行命令<code>gitlab-ctl reconfigure</code>即可。</p>\n<h1>二、gitlab仓库恢复</h1>\n<p>要验证gitlab备份的有效性，我们可以把该备份文件复制到已经安装好gitlab服务器的/var/opt/gitlab/backups/目录下。然后进行数据恢复，最后访问并查看其数据完整性即可。</p>\n<p>通过gitlab备份文件可以恢复gitlab所有的信息，包括仓库、数据库、用户、用户组、用户密钥、权限等信息。</p>\n<p><strong>ps：新服务器上的gitlab的版本号必须与创建备份时的gitlab版本号相同。</strong></p>\n<p>gitlab数据恢复比较简单，具体步骤如下：</p>\n<h2 id=\"2-1-停止相关数据连接服务\">2.1 停止相关数据连接服务</h2>\n<p>在gitlab服务器上停止相关数据连接服务，命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-ctl stop unicorn</span><br><span class=\"line\">gitlab-ctl stop sidekiq</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-2-恢复gitlab仓库\">2.2 恢复gitlab仓库</h2>\n<p>现在我们要从1537261122_2018_09_18_9.2.5这个备份编号中，恢复数据，命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-rake gitlab:backup:restore BACKUP=1537261122_2018_09_18_9.2.5</span><br></pre></td></tr></table></figure>\n<p>如果出现多个done的信息，说明整个gitlab数据就已经正常恢复完毕。</p>\n<h2 id=\"2-3-启动gitlab服务\">2.3 启动gitlab服务</h2>\n<p>恢复完毕以后，我们现在来启动gitlab，使用以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-ctl start</span><br></pre></td></tr></table></figure>\n<p><strong>强烈建议：重启该新服务器。</strong></p>\n<h1>三、References:</h1>\n<ol>\n<li><a href=\"https://www.ilanni.com/?p=13890\" target=\"_blank\" rel=\"noopener\">gitlab的备份与恢复</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1>一、 备份gitlab</h1>\n<p>gitlab的备份比较简单，我们直接使用gitlab本身提供的命令进行备份即可。</p>\n<h2 id=\"1-1-通过gitlab-rake命令备份gitlab\">1.1 通过gitlab-rake命令备份gitlab</h2>\n<p>gitlab提供的备份命令为gitlab-rake，备份命令使用如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure>\n<p>该命令会备份gitlab仓库、数据库、用户、用户组、用户密钥、权限等信息。</p>\n<p>备份完成后备份文件会出现在<code>/var/opt/gitlab/backups/</code><br>\n<img src=\"/images/2018-11-19/1.png\" alt=\"\"></p>\n<p>当然备份的位置可以更换,使用如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2018-11-19/2.png\" alt=\"\"></p>\n<p>修改上图<code>backup_path</code>的值即可，之后使用<code>gitlab-ctl reconfigure</code>使得配置生效</p>\n<p><strong>ps：备份文件的名称中1537261122_2018_09_18_9.2.5是此次备份的编号。该编号我们会在后续恢复gitlab数据使用到。</strong></p>\n<h2 id=\"1-2-定时备份gitlab\">1.2 定时备份gitlab</h2>\n<p>如果要使ｇitlab自动进行备份的话，我们可以通过crontab命令来实现自动备份。强烈建议使用系统crontab命令，而不是用户crontab。</p>\n<p>以实现每天凌晨4点进行一次自动备份为例，系统的crontab配置如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/crontab</span><br></pre></td></tr></table></figure>\n<p><code>0 4 * * * root /opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1</code></p>\n<p>然后重启crontab服务，如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart crond</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-3-保留部分备份文件\">1.3 保留部分备份文件</h2>\n<p>随着时间的推移gitlab备份文件越来越多，服务器的磁盘空间也不够大。</p>\n<p>此时我们就要删除部分旧的备份文件，gitlab也提供了删除旧的备份文件功能。该功能在gitlab的配置文件中，进行配置即可。</p>\n<p>在此以保留7天之前的备份文件为例，如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>\n<p><code>gitlab_rails[‘backup_keep_time’] = 604800</code></p>\n<p>其中backup_keep_time是以秒为单位进行计算的，然后执行命令<code>gitlab-ctl reconfigure</code>即可。</p>\n<h1>二、gitlab仓库恢复</h1>\n<p>要验证gitlab备份的有效性，我们可以把该备份文件复制到已经安装好gitlab服务器的/var/opt/gitlab/backups/目录下。然后进行数据恢复，最后访问并查看其数据完整性即可。</p>\n<p>通过gitlab备份文件可以恢复gitlab所有的信息，包括仓库、数据库、用户、用户组、用户密钥、权限等信息。</p>\n<p><strong>ps：新服务器上的gitlab的版本号必须与创建备份时的gitlab版本号相同。</strong></p>\n<p>gitlab数据恢复比较简单，具体步骤如下：</p>\n<h2 id=\"2-1-停止相关数据连接服务\">2.1 停止相关数据连接服务</h2>\n<p>在gitlab服务器上停止相关数据连接服务，命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-ctl stop unicorn</span><br><span class=\"line\">gitlab-ctl stop sidekiq</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-2-恢复gitlab仓库\">2.2 恢复gitlab仓库</h2>\n<p>现在我们要从1537261122_2018_09_18_9.2.5这个备份编号中，恢复数据，命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-rake gitlab:backup:restore BACKUP=1537261122_2018_09_18_9.2.5</span><br></pre></td></tr></table></figure>\n<p>如果出现多个done的信息，说明整个gitlab数据就已经正常恢复完毕。</p>\n<h2 id=\"2-3-启动gitlab服务\">2.3 启动gitlab服务</h2>\n<p>恢复完毕以后，我们现在来启动gitlab，使用以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-ctl start</span><br></pre></td></tr></table></figure>\n<p><strong>强烈建议：重启该新服务器。</strong></p>\n<h1>三、References:</h1>\n<ol>\n<li><a href=\"https://www.ilanni.com/?p=13890\" target=\"_blank\" rel=\"noopener\">gitlab的备份与恢复</a></li>\n</ol>\n"},{"title":"GitLab升级","subtitle":"gitlab-update","original":true,"date":"2018-11-19T08:18:49.000Z","description":"GitLab升级","photos":[],"_content":"# 更新 GitLab\n> 我们用的是 GitLab Omnibus 7.10.5 版本，查到[Doc](http://docs.gitlab.com/omnibus/update/README.html)（6.x.x 等低版本区别对待，详见文档）。\n按照文档：\n```\n# To update to a newer GitLab version, all you have to do is:\n# Debian/Ubuntu\nsudo apt-get update\nsudo apt-get install gitlab-ce\n# Centos/RHEL\nsudo yum install gitlab-ce\n```\n\n看起来太简单了！事实上，也就是这么简单。\n\n但是，问题来了，`sudo apt-get install gilab-ce` 默认所用的源是 *packages-gitlab-com.s3.amazonaws.com*，然后你懂的，被墙了！\n\n解决办法有两个：\n1. 给 apt 加代理；\n2. 换源。\n\n## 1). 给 apt 加代理\n考虑到换源可能产生其他的依赖问题，先尝试 加代理。结果是加了代理还是不行！原因可能是代理连接速度问题，总是超时。\n\n\n这里参考的是 [打造Linux 终端翻墙环境](http://www.a-ho.com/2016/01/16/%E6%89%93%E9%80%A0Linux-%E7%BB%88%E7%AB%AF%E7%BF%BB%E5%A2%99%E7%8E%AF%E5%A2%83/)  使用 `shadowsocks + privoxy` 。\n\n## 2). 换源解决！\n\nDocs 里已经有声明其实：\n\n![](/images/2018-11-19/3.png)\n\n- 首先，添加信任 GitLab 里的 GPG 公钥：\n\n```\ncurl https://packages.gitlab.com/gpg.key 2> /dev/null | sudo apt-key add - &>/dev/null\n```\n\n- 然后把 `/etc/apt/sources.list.d/gitlab_gitlab-ce.list` 文件中默认的源换成 *deb https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu trusty main*\n\n![](/images/2018-11-19/4.png)\n\n- 最后：\n\n```\nsudo update\nsudo apt-get install gitlab-ce\n```\n\n>>> 安装完成！\n\n# 对于更新版本跨度较大的情况\n\n## 1). 关闭部分gitlab服务\n升级之前，我们首先要关闭gitlab部分服务，如下：\n\n```\ngitlab-ctl stop unicorn\ngitlab-ctl stop sidekiq\ngitlab-ctl stop nginx\n```\n\n## 2). 选择要升级的版本\n[版本查看地址](https://packages.gitlab.com/gitlab/gitlab-ce?filter=debs)\n\n然后执行命令：\n\n```\napt-get install gitlab-ce=11.0.3-ce.0\n```\n\n其中`11.0.3`替换为你要升级的版本号。\n\n**ps:版本跨度过大，请务必一个小版本一个小版本的更新**\n\n另外，附上一次成功的更新过程对应的版本号：\n\n`9.2.5-->9.5.6-->10.0.6-->10.8.5-->11.0.3 `\n\n## 3). 重启gitlab\n```\ngitlab-ctl reconfigure\ngitlab-ctl restart\n```\n\n# References:\n1. http://www.a-ho.com/2016/01/16/%E6%89%93%E9%80%A0Linux-%E7%BB%88%E7%AB%AF%E7%BF%BB%E5%A2%99%E7%8E%AF%E5%A2%83/\n2. https://about.gitlab.com/downloads/#ubuntu1404\n3. https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/\n4. http://docs.gitlab.com/omnibus/update/README.html\n5. https://about.gitlab.com/upgrade-to-package-repository/\n6. https://packages.gitlab.com/gitlab/gitlab-ce/packages/ubuntu/trusty/gitlab-ce_8.9.5-ce.0_amd64.deb\n7. https://www.ilanni.com/?p=13917\n8. https://www.58jb.com/html/189.html","source":"_posts/GitLab升级.md","raw":"---\ntitle: GitLab升级\nsubtitle: gitlab-update\noriginal: true\ndate: 2018-11-19 16:18:49\ndescription: GitLab升级\ntags: GitLab\ncategories: GitLab\nphotos:\n---\n# 更新 GitLab\n> 我们用的是 GitLab Omnibus 7.10.5 版本，查到[Doc](http://docs.gitlab.com/omnibus/update/README.html)（6.x.x 等低版本区别对待，详见文档）。\n按照文档：\n```\n# To update to a newer GitLab version, all you have to do is:\n# Debian/Ubuntu\nsudo apt-get update\nsudo apt-get install gitlab-ce\n# Centos/RHEL\nsudo yum install gitlab-ce\n```\n\n看起来太简单了！事实上，也就是这么简单。\n\n但是，问题来了，`sudo apt-get install gilab-ce` 默认所用的源是 *packages-gitlab-com.s3.amazonaws.com*，然后你懂的，被墙了！\n\n解决办法有两个：\n1. 给 apt 加代理；\n2. 换源。\n\n## 1). 给 apt 加代理\n考虑到换源可能产生其他的依赖问题，先尝试 加代理。结果是加了代理还是不行！原因可能是代理连接速度问题，总是超时。\n\n\n这里参考的是 [打造Linux 终端翻墙环境](http://www.a-ho.com/2016/01/16/%E6%89%93%E9%80%A0Linux-%E7%BB%88%E7%AB%AF%E7%BF%BB%E5%A2%99%E7%8E%AF%E5%A2%83/)  使用 `shadowsocks + privoxy` 。\n\n## 2). 换源解决！\n\nDocs 里已经有声明其实：\n\n![](/images/2018-11-19/3.png)\n\n- 首先，添加信任 GitLab 里的 GPG 公钥：\n\n```\ncurl https://packages.gitlab.com/gpg.key 2> /dev/null | sudo apt-key add - &>/dev/null\n```\n\n- 然后把 `/etc/apt/sources.list.d/gitlab_gitlab-ce.list` 文件中默认的源换成 *deb https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu trusty main*\n\n![](/images/2018-11-19/4.png)\n\n- 最后：\n\n```\nsudo update\nsudo apt-get install gitlab-ce\n```\n\n>>> 安装完成！\n\n# 对于更新版本跨度较大的情况\n\n## 1). 关闭部分gitlab服务\n升级之前，我们首先要关闭gitlab部分服务，如下：\n\n```\ngitlab-ctl stop unicorn\ngitlab-ctl stop sidekiq\ngitlab-ctl stop nginx\n```\n\n## 2). 选择要升级的版本\n[版本查看地址](https://packages.gitlab.com/gitlab/gitlab-ce?filter=debs)\n\n然后执行命令：\n\n```\napt-get install gitlab-ce=11.0.3-ce.0\n```\n\n其中`11.0.3`替换为你要升级的版本号。\n\n**ps:版本跨度过大，请务必一个小版本一个小版本的更新**\n\n另外，附上一次成功的更新过程对应的版本号：\n\n`9.2.5-->9.5.6-->10.0.6-->10.8.5-->11.0.3 `\n\n## 3). 重启gitlab\n```\ngitlab-ctl reconfigure\ngitlab-ctl restart\n```\n\n# References:\n1. http://www.a-ho.com/2016/01/16/%E6%89%93%E9%80%A0Linux-%E7%BB%88%E7%AB%AF%E7%BF%BB%E5%A2%99%E7%8E%AF%E5%A2%83/\n2. https://about.gitlab.com/downloads/#ubuntu1404\n3. https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/\n4. http://docs.gitlab.com/omnibus/update/README.html\n5. https://about.gitlab.com/upgrade-to-package-repository/\n6. https://packages.gitlab.com/gitlab/gitlab-ce/packages/ubuntu/trusty/gitlab-ce_8.9.5-ce.0_amd64.deb\n7. https://www.ilanni.com/?p=13917\n8. https://www.58jb.com/html/189.html","slug":"GitLab升级","published":1,"updated":"2018-12-12T06:46:59.849Z","comments":1,"layout":"post","link":"","_id":"cjwztf1v00002vifcyge04i7n","content":"<h1>更新 GitLab</h1>\n<blockquote>\n<p>我们用的是 GitLab Omnibus 7.10.5 版本，查到<a href=\"http://docs.gitlab.com/omnibus/update/README.html\" target=\"_blank\" rel=\"noopener\">Doc</a>（6.x.x 等低版本区别对待，详见文档）。<br>\n按照文档：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># To update to a newer GitLab version, all you have to do is:</span><br><span class=\"line\"># Debian/Ubuntu</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install gitlab-ce</span><br><span class=\"line\"># Centos/RHEL</span><br><span class=\"line\">sudo yum install gitlab-ce</span><br></pre></td></tr></table></figure>\n<p>看起来太简单了！事实上，也就是这么简单。</p>\n<p>但是，问题来了，<code>sudo apt-get install gilab-ce</code> 默认所用的源是 <em><a href=\"http://packages-gitlab-com.s3.amazonaws.com\" target=\"_blank\" rel=\"noopener\">packages-gitlab-com.s3.amazonaws.com</a></em>，然后你懂的，被墙了！</p>\n<p>解决办法有两个：</p>\n<ol>\n<li>给 apt 加代理；</li>\n<li>换源。</li>\n</ol>\n<h2 id=\"1-给-apt-加代理\">1). 给 apt 加代理</h2>\n<p>考虑到换源可能产生其他的依赖问题，先尝试 加代理。结果是加了代理还是不行！原因可能是代理连接速度问题，总是超时。</p>\n<p>这里参考的是 <a href=\"http://www.a-ho.com/2016/01/16/%E6%89%93%E9%80%A0Linux-%E7%BB%88%E7%AB%AF%E7%BF%BB%E5%A2%99%E7%8E%AF%E5%A2%83/\" target=\"_blank\" rel=\"noopener\">打造Linux 终端翻墙环境</a>  使用 <code>shadowsocks + privoxy</code> 。</p>\n<h2 id=\"2-换源解决\">2). 换源解决！</h2>\n<p>Docs 里已经有声明其实：</p>\n<p><img src=\"/images/2018-11-19/3.png\" alt=\"\"></p>\n<ul>\n<li>首先，添加信任 GitLab 里的 GPG 公钥：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://packages.gitlab.com/gpg.key 2&gt; /dev/null | sudo apt-key add - &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure>\n<ul>\n<li>然后把 <code>/etc/apt/sources.list.d/gitlab_gitlab-ce.list</code> 文件中默认的源换成 <em>deb <a href=\"https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu</a> trusty main</em></li>\n</ul>\n<p><img src=\"/images/2018-11-19/4.png\" alt=\"\"></p>\n<ul>\n<li>最后：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update</span><br><span class=\"line\">sudo apt-get install gitlab-ce</span><br></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>安装完成！</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h1>对于更新版本跨度较大的情况</h1>\n<h2 id=\"1-关闭部分gitlab服务\">1). 关闭部分gitlab服务</h2>\n<p>升级之前，我们首先要关闭gitlab部分服务，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-ctl stop unicorn</span><br><span class=\"line\">gitlab-ctl stop sidekiq</span><br><span class=\"line\">gitlab-ctl stop nginx</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-选择要升级的版本\">2). 选择要升级的版本</h2>\n<p><a href=\"https://packages.gitlab.com/gitlab/gitlab-ce?filter=debs\" target=\"_blank\" rel=\"noopener\">版本查看地址</a></p>\n<p>然后执行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install gitlab-ce=11.0.3-ce.0</span><br></pre></td></tr></table></figure>\n<p>其中<code>11.0.3</code>替换为你要升级的版本号。</p>\n<p><strong>ps:版本跨度过大，请务必一个小版本一个小版本的更新</strong></p>\n<p>另外，附上一次成功的更新过程对应的版本号：</p>\n<p><code>9.2.5--&gt;9.5.6--&gt;10.0.6--&gt;10.8.5--&gt;11.0.3</code></p>\n<h2 id=\"3-重启gitlab\">3). 重启gitlab</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-ctl reconfigure</span><br><span class=\"line\">gitlab-ctl restart</span><br></pre></td></tr></table></figure>\n<h1>References:</h1>\n<ol>\n<li><a href=\"http://www.a-ho.com/2016/01/16/%E6%89%93%E9%80%A0Linux-%E7%BB%88%E7%AB%AF%E7%BF%BB%E5%A2%99%E7%8E%AF%E5%A2%83/\" target=\"_blank\" rel=\"noopener\">http://www.a-ho.com/2016/01/16/打造Linux-终端翻墙环境/</a></li>\n<li><a href=\"https://about.gitlab.com/downloads/#ubuntu1404\" target=\"_blank\" rel=\"noopener\">https://about.gitlab.com/downloads/#ubuntu1404</a></li>\n<li><a href=\"https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/\" target=\"_blank\" rel=\"noopener\">https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/</a></li>\n<li><a href=\"http://docs.gitlab.com/omnibus/update/README.html\" target=\"_blank\" rel=\"noopener\">http://docs.gitlab.com/omnibus/update/README.html</a></li>\n<li><a href=\"https://about.gitlab.com/upgrade-to-package-repository/\" target=\"_blank\" rel=\"noopener\">https://about.gitlab.com/upgrade-to-package-repository/</a></li>\n<li><a href=\"https://packages.gitlab.com/gitlab/gitlab-ce/packages/ubuntu/trusty/gitlab-ce_8.9.5-ce.0_amd64.deb\" target=\"_blank\" rel=\"noopener\">https://packages.gitlab.com/gitlab/gitlab-ce/packages/ubuntu/trusty/gitlab-ce_8.9.5-ce.0_amd64.deb</a></li>\n<li><a href=\"https://www.ilanni.com/?p=13917\" target=\"_blank\" rel=\"noopener\">https://www.ilanni.com/?p=13917</a></li>\n<li><a href=\"https://www.58jb.com/html/189.html\" target=\"_blank\" rel=\"noopener\">https://www.58jb.com/html/189.html</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1>更新 GitLab</h1>\n<blockquote>\n<p>我们用的是 GitLab Omnibus 7.10.5 版本，查到<a href=\"http://docs.gitlab.com/omnibus/update/README.html\" target=\"_blank\" rel=\"noopener\">Doc</a>（6.x.x 等低版本区别对待，详见文档）。<br>\n按照文档：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># To update to a newer GitLab version, all you have to do is:</span><br><span class=\"line\"># Debian/Ubuntu</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install gitlab-ce</span><br><span class=\"line\"># Centos/RHEL</span><br><span class=\"line\">sudo yum install gitlab-ce</span><br></pre></td></tr></table></figure>\n<p>看起来太简单了！事实上，也就是这么简单。</p>\n<p>但是，问题来了，<code>sudo apt-get install gilab-ce</code> 默认所用的源是 <em><a href=\"http://packages-gitlab-com.s3.amazonaws.com\" target=\"_blank\" rel=\"noopener\">packages-gitlab-com.s3.amazonaws.com</a></em>，然后你懂的，被墙了！</p>\n<p>解决办法有两个：</p>\n<ol>\n<li>给 apt 加代理；</li>\n<li>换源。</li>\n</ol>\n<h2 id=\"1-给-apt-加代理\">1). 给 apt 加代理</h2>\n<p>考虑到换源可能产生其他的依赖问题，先尝试 加代理。结果是加了代理还是不行！原因可能是代理连接速度问题，总是超时。</p>\n<p>这里参考的是 <a href=\"http://www.a-ho.com/2016/01/16/%E6%89%93%E9%80%A0Linux-%E7%BB%88%E7%AB%AF%E7%BF%BB%E5%A2%99%E7%8E%AF%E5%A2%83/\" target=\"_blank\" rel=\"noopener\">打造Linux 终端翻墙环境</a>  使用 <code>shadowsocks + privoxy</code> 。</p>\n<h2 id=\"2-换源解决\">2). 换源解决！</h2>\n<p>Docs 里已经有声明其实：</p>\n<p><img src=\"/images/2018-11-19/3.png\" alt=\"\"></p>\n<ul>\n<li>首先，添加信任 GitLab 里的 GPG 公钥：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://packages.gitlab.com/gpg.key 2&gt; /dev/null | sudo apt-key add - &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure>\n<ul>\n<li>然后把 <code>/etc/apt/sources.list.d/gitlab_gitlab-ce.list</code> 文件中默认的源换成 <em>deb <a href=\"https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu</a> trusty main</em></li>\n</ul>\n<p><img src=\"/images/2018-11-19/4.png\" alt=\"\"></p>\n<ul>\n<li>最后：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update</span><br><span class=\"line\">sudo apt-get install gitlab-ce</span><br></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>安装完成！</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h1>对于更新版本跨度较大的情况</h1>\n<h2 id=\"1-关闭部分gitlab服务\">1). 关闭部分gitlab服务</h2>\n<p>升级之前，我们首先要关闭gitlab部分服务，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-ctl stop unicorn</span><br><span class=\"line\">gitlab-ctl stop sidekiq</span><br><span class=\"line\">gitlab-ctl stop nginx</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-选择要升级的版本\">2). 选择要升级的版本</h2>\n<p><a href=\"https://packages.gitlab.com/gitlab/gitlab-ce?filter=debs\" target=\"_blank\" rel=\"noopener\">版本查看地址</a></p>\n<p>然后执行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install gitlab-ce=11.0.3-ce.0</span><br></pre></td></tr></table></figure>\n<p>其中<code>11.0.3</code>替换为你要升级的版本号。</p>\n<p><strong>ps:版本跨度过大，请务必一个小版本一个小版本的更新</strong></p>\n<p>另外，附上一次成功的更新过程对应的版本号：</p>\n<p><code>9.2.5--&gt;9.5.6--&gt;10.0.6--&gt;10.8.5--&gt;11.0.3</code></p>\n<h2 id=\"3-重启gitlab\">3). 重启gitlab</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-ctl reconfigure</span><br><span class=\"line\">gitlab-ctl restart</span><br></pre></td></tr></table></figure>\n<h1>References:</h1>\n<ol>\n<li><a href=\"http://www.a-ho.com/2016/01/16/%E6%89%93%E9%80%A0Linux-%E7%BB%88%E7%AB%AF%E7%BF%BB%E5%A2%99%E7%8E%AF%E5%A2%83/\" target=\"_blank\" rel=\"noopener\">http://www.a-ho.com/2016/01/16/打造Linux-终端翻墙环境/</a></li>\n<li><a href=\"https://about.gitlab.com/downloads/#ubuntu1404\" target=\"_blank\" rel=\"noopener\">https://about.gitlab.com/downloads/#ubuntu1404</a></li>\n<li><a href=\"https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/\" target=\"_blank\" rel=\"noopener\">https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/</a></li>\n<li><a href=\"http://docs.gitlab.com/omnibus/update/README.html\" target=\"_blank\" rel=\"noopener\">http://docs.gitlab.com/omnibus/update/README.html</a></li>\n<li><a href=\"https://about.gitlab.com/upgrade-to-package-repository/\" target=\"_blank\" rel=\"noopener\">https://about.gitlab.com/upgrade-to-package-repository/</a></li>\n<li><a href=\"https://packages.gitlab.com/gitlab/gitlab-ce/packages/ubuntu/trusty/gitlab-ce_8.9.5-ce.0_amd64.deb\" target=\"_blank\" rel=\"noopener\">https://packages.gitlab.com/gitlab/gitlab-ce/packages/ubuntu/trusty/gitlab-ce_8.9.5-ce.0_amd64.deb</a></li>\n<li><a href=\"https://www.ilanni.com/?p=13917\" target=\"_blank\" rel=\"noopener\">https://www.ilanni.com/?p=13917</a></li>\n<li><a href=\"https://www.58jb.com/html/189.html\" target=\"_blank\" rel=\"noopener\">https://www.58jb.com/html/189.html</a></li>\n</ol>\n"},{"title":"Hexo初识","subtitle":"hexo-start","description":"简单介绍hexo的用法.","date":"2018-09-28T12:58:27.000Z","original":false,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/Hexo初识.md","raw":"---\ntitle: Hexo初识\nsubtitle: hexo-start\ndescription: 简单介绍hexo的用法. \ndate: 2018-09-28 20:58:27\ntags: Hexo\ncategories: Hexo\noriginal: false\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"Hexo初识","published":1,"updated":"2018-12-12T06:46:59.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwztf1v50006vifc4yb0z75l","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"quick-start\">Quick Start</h2>\n<h3 id=\"create-a-new-post\">Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"run-server\">Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"generate-static-files\">Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\">Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"quick-start\">Quick Start</h2>\n<h3 id=\"create-a-new-post\">Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"run-server\">Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"generate-static-files\">Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\">Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"Linux在局域网如何通过hostname获取其ip","subtitle":"linux-hostname_to_ip","date":"2018-11-16T09:02:52.000Z","description":"Linux在局域网如何通过hostname获取其ip","photos":[],"original":true,"_content":"### 只需要hostname固定，就可以在局域网通过ping hostname.local来获取其ip\n![](/images/2018-11-16/1046366-20181009112517884-381181059.png)","source":"_posts/Linux在局域网如何通过hostname获取其ip.md","raw":"---\ntitle: Linux在局域网如何通过hostname获取其ip\nsubtitle: linux-hostname_to_ip\ndate: 2018-11-16 17:02:52\ndescription: Linux在局域网如何通过hostname获取其ip\ntags: Linux\ncategories: Linux\nphotos:\noriginal: true\n---\n### 只需要hostname固定，就可以在局域网通过ping hostname.local来获取其ip\n![](/images/2018-11-16/1046366-20181009112517884-381181059.png)","slug":"Linux在局域网如何通过hostname获取其ip","published":1,"updated":"2018-12-12T06:49:10.963Z","comments":1,"layout":"post","link":"","_id":"cjwztf1v60008vifclhlrhvym","content":"<h3 id=\"只需要hostname固定-就可以在局域网通过ping-hostname-local来获取其ip\">只需要hostname固定，就可以在局域网通过ping hostname.local来获取其ip</h3>\n<p><img src=\"/images/2018-11-16/1046366-20181009112517884-381181059.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"只需要hostname固定-就可以在局域网通过ping-hostname-local来获取其ip\">只需要hostname固定，就可以在局域网通过ping hostname.local来获取其ip</h3>\n<p><img src=\"/images/2018-11-16/1046366-20181009112517884-381181059.png\" alt=\"\"></p>\n"},{"title":"Hexo同步","subtitle":"hexo-sync","date":"2018-11-15T07:27:52.000Z","description":"其他电脑同步博客的方法!","original":true,"_content":"\n## 环境搭建\n\n### 安装Node.js\n\n用来生成静态页面, 到[Node.js官网](https://nodejs.org/en/)，下载最新版本, 根据提示一路安装即可\n\n### 安装Git\n\n```\nsudo apt-get install git\n```\n\n### 安装Hexo\n\n当Node.js和Git都安装好后就可以正式安装Hexo了，终端执行如下命令：\n\n```\nsudo npm install -g hexo\n```\n\n### 克隆hexo分支\n\n```\ngit clone -b hexo https://github.com/Breakering/breakering.github.io.git\n```\n\n### 进入breakering.github.io.git\n\n创建博客\n\n```\nhexo n '博客名'\n```\n\n发表博客\n\n```\nhexo d -g\n```\n\n### 主题配置更新相关\n\n需要先清空缓存\n\n```text\nhexo clean\n```\n\n然后进行部署操作\n\n```text\nhexo d -g\n```\n\n### 一些问题\n\n1. 报错一: 若执行命令hexo deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git：\n\n```\nnpm install hexo-deployer-git --save\n```\n\n2. 报错二: 若执行命令hexo d报以下错误:\n\n```\nERROR Plugin load failed: hexo-server \n//或者类似的错误 \nERROR Plugin load failed: hexo-renderer-sass\n```\n\n则执行响应的命令:\n \n```\nsudo npm install hexo-server\n//或者\nsudo npm install hexo-renderer-sass\n```\n","source":"_posts/Hexo同步.md","raw":"---\ntitle: Hexo同步\nsubtitle: hexo-sync\ndate: 2018-11-15 15:27:52\ndescription: 其他电脑同步博客的方法!\ntags: Hexo\ncategories: Hexo\noriginal: true\n---\n\n## 环境搭建\n\n### 安装Node.js\n\n用来生成静态页面, 到[Node.js官网](https://nodejs.org/en/)，下载最新版本, 根据提示一路安装即可\n\n### 安装Git\n\n```\nsudo apt-get install git\n```\n\n### 安装Hexo\n\n当Node.js和Git都安装好后就可以正式安装Hexo了，终端执行如下命令：\n\n```\nsudo npm install -g hexo\n```\n\n### 克隆hexo分支\n\n```\ngit clone -b hexo https://github.com/Breakering/breakering.github.io.git\n```\n\n### 进入breakering.github.io.git\n\n创建博客\n\n```\nhexo n '博客名'\n```\n\n发表博客\n\n```\nhexo d -g\n```\n\n### 主题配置更新相关\n\n需要先清空缓存\n\n```text\nhexo clean\n```\n\n然后进行部署操作\n\n```text\nhexo d -g\n```\n\n### 一些问题\n\n1. 报错一: 若执行命令hexo deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git：\n\n```\nnpm install hexo-deployer-git --save\n```\n\n2. 报错二: 若执行命令hexo d报以下错误:\n\n```\nERROR Plugin load failed: hexo-server \n//或者类似的错误 \nERROR Plugin load failed: hexo-renderer-sass\n```\n\n则执行响应的命令:\n \n```\nsudo npm install hexo-server\n//或者\nsudo npm install hexo-renderer-sass\n```\n","slug":"Hexo同步","published":1,"updated":"2018-12-12T06:49:11.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwztf1v9000avifcsnwtto30","content":"<h2 id=\"环境搭建\">环境搭建</h2>\n<h3 id=\"安装node-js\">安装Node.js</h3>\n<p>用来生成静态页面, 到<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js官网</a>，下载最新版本, 根据提示一路安装即可</p>\n<h3 id=\"安装git\">安装Git</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装hexo\">安装Hexo</h3>\n<p>当Node.js和Git都安装好后就可以正式安装Hexo了，终端执行如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g hexo</span><br></pre></td></tr></table></figure>\n<h3 id=\"克隆hexo分支\">克隆hexo分支</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b hexo https://github.com/Breakering/breakering.github.io.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"进入breakering-github-io-git\">进入breakering.github.io.git</h3>\n<p>创建博客</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n &apos;博客名&apos;</span><br></pre></td></tr></table></figure>\n<p>发表博客</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n<h3 id=\"主题配置更新相关\">主题配置更新相关</h3>\n<p>需要先清空缓存</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n<p>然后进行部署操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n<h3 id=\"一些问题\">一些问题</h3>\n<ol>\n<li>报错一: 若执行命令hexo deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>报错二: 若执行命令hexo d报以下错误:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR Plugin load failed: hexo-server </span><br><span class=\"line\">//或者类似的错误 </span><br><span class=\"line\">ERROR Plugin load failed: hexo-renderer-sass</span><br></pre></td></tr></table></figure>\n<p>则执行响应的命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install hexo-server</span><br><span class=\"line\">//或者</span><br><span class=\"line\">sudo npm install hexo-renderer-sass</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境搭建\">环境搭建</h2>\n<h3 id=\"安装node-js\">安装Node.js</h3>\n<p>用来生成静态页面, 到<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js官网</a>，下载最新版本, 根据提示一路安装即可</p>\n<h3 id=\"安装git\">安装Git</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装hexo\">安装Hexo</h3>\n<p>当Node.js和Git都安装好后就可以正式安装Hexo了，终端执行如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g hexo</span><br></pre></td></tr></table></figure>\n<h3 id=\"克隆hexo分支\">克隆hexo分支</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b hexo https://github.com/Breakering/breakering.github.io.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"进入breakering-github-io-git\">进入breakering.github.io.git</h3>\n<p>创建博客</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n &apos;博客名&apos;</span><br></pre></td></tr></table></figure>\n<p>发表博客</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n<h3 id=\"主题配置更新相关\">主题配置更新相关</h3>\n<p>需要先清空缓存</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n<p>然后进行部署操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n<h3 id=\"一些问题\">一些问题</h3>\n<ol>\n<li>报错一: 若执行命令hexo deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>报错二: 若执行命令hexo d报以下错误:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR Plugin load failed: hexo-server </span><br><span class=\"line\">//或者类似的错误 </span><br><span class=\"line\">ERROR Plugin load failed: hexo-renderer-sass</span><br></pre></td></tr></table></figure>\n<p>则执行响应的命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install hexo-server</span><br><span class=\"line\">//或者</span><br><span class=\"line\">sudo npm install hexo-renderer-sass</span><br></pre></td></tr></table></figure>\n"},{"title":"Linux安装supervisor","original":true,"date":"2019-01-27T07:07:49.000Z","subtitle":"install-supervisor","description":"Linux下安装supervisor","photos":[],"_content":"\n# 介绍\n\n[Supervisor](https://github.com/Supervisor/supervisor) 是一个用 Python 写的进程管理工具，可以很方便的对进程进行启动、停止、重启等操作。\n\n# 安装\n\n## For Ubuntu\n\n-   安装命令\n\n```shell\n$ sudo apt-get install supervisor\n```\n\n-   配置\n\n安装成功后，会在`/etc/supervisor`目录下，生成`supervisord.conf`配置文件。\n\n进程配置会读取`/etc/supervisor/conf.d`目录下的`*.conf`配置文件，我们在此目录下创建一个`product_celeryd.conf`进程配置文件：\n\n```reStructuredText\n[program:product_celeryd]\ndirectory      = /webapps/product/\ncommand        = /webapps/product/env/bin/celery -A licaishi worker -Q product\nuser           = root\nstdout_logfile = /webapps/product/logs/product_celeryd.log\nstderr_logfile = /webapps/product/logs/product_celeryd.log\nautostart      = true\nautorestart    = true\nstartsecs      = 10\nstopwaitsecs   = 600\n```\n\n-   启动\n\n接着就可以启动 Supervisord 了：\n\n```shell\n$ supervisord\n```\n\n`supervisorctl` 常用命令：\n\n| 命令                               | 说明                                                         |\n| ---------------------------------- | ------------------------------------------------------------ |\n| supervisorctl stop program_name    | 停止某个进程                                                 |\n| supervisorctl start program_name   | 启动某个进程                                                 |\n| supervisorctl restart program_name | 重启某个进程                                                 |\n| supervisorctl stop all             | 停止全部进程                                                 |\n| supervisorctl reload               | 载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程 |\n| supervisorctl update               | 根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启 |\n\n## For Centos\n\n-   **安装**\n\n```shell\n# yum install python-setuptools\n# easy_install supervisor\n```\n\n-   **创建配置文件(supervisord.conf）**\n\n使用root身份创建一个全局配置文件\n\n```shell\n# echo_supervisord_conf > /etc/supervisord.conf\n# supervisord -c /etc/supervisord.conf\n```\n\n-   **修改配置文件(supervisord.conf）**\n\n如果修改了 /etc/supervisord.conf ,需要执行` # supervisorctl reload `来重新加载配置文件，否则不会生效\n\n```shell\n# supervisord 是启动supervisor \n# supervisorctl 是控制supervisord\n```\n\n打开supervisord.conf 的 [include] 引入 files的配置.\n\n```reStructuredText\n[include]\nfiles = /etc/supervisor/conf.d/*.conf\n```\n\n```reStructuredText\n[include]\nfiles = /etc/supervisor/conf.d/*.conf\n```\n\n需要创建`/etc/supervisor/conf.d/`\n\n-   **重启**\n\n```shell\n# supervisorctl reload\n```\n\n\n\n","source":"_posts/Linux安装supervisor.md","raw":"---\ntitle: Linux安装supervisor\noriginal: true\ndate: 2019-01-27 15:07:49\nsubtitle: install-supervisor\ndescription: Linux下安装supervisor\ntags: supervisor\ncategories: supervisor\nphotos:\n---\n\n# 介绍\n\n[Supervisor](https://github.com/Supervisor/supervisor) 是一个用 Python 写的进程管理工具，可以很方便的对进程进行启动、停止、重启等操作。\n\n# 安装\n\n## For Ubuntu\n\n-   安装命令\n\n```shell\n$ sudo apt-get install supervisor\n```\n\n-   配置\n\n安装成功后，会在`/etc/supervisor`目录下，生成`supervisord.conf`配置文件。\n\n进程配置会读取`/etc/supervisor/conf.d`目录下的`*.conf`配置文件，我们在此目录下创建一个`product_celeryd.conf`进程配置文件：\n\n```reStructuredText\n[program:product_celeryd]\ndirectory      = /webapps/product/\ncommand        = /webapps/product/env/bin/celery -A licaishi worker -Q product\nuser           = root\nstdout_logfile = /webapps/product/logs/product_celeryd.log\nstderr_logfile = /webapps/product/logs/product_celeryd.log\nautostart      = true\nautorestart    = true\nstartsecs      = 10\nstopwaitsecs   = 600\n```\n\n-   启动\n\n接着就可以启动 Supervisord 了：\n\n```shell\n$ supervisord\n```\n\n`supervisorctl` 常用命令：\n\n| 命令                               | 说明                                                         |\n| ---------------------------------- | ------------------------------------------------------------ |\n| supervisorctl stop program_name    | 停止某个进程                                                 |\n| supervisorctl start program_name   | 启动某个进程                                                 |\n| supervisorctl restart program_name | 重启某个进程                                                 |\n| supervisorctl stop all             | 停止全部进程                                                 |\n| supervisorctl reload               | 载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程 |\n| supervisorctl update               | 根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启 |\n\n## For Centos\n\n-   **安装**\n\n```shell\n# yum install python-setuptools\n# easy_install supervisor\n```\n\n-   **创建配置文件(supervisord.conf）**\n\n使用root身份创建一个全局配置文件\n\n```shell\n# echo_supervisord_conf > /etc/supervisord.conf\n# supervisord -c /etc/supervisord.conf\n```\n\n-   **修改配置文件(supervisord.conf）**\n\n如果修改了 /etc/supervisord.conf ,需要执行` # supervisorctl reload `来重新加载配置文件，否则不会生效\n\n```shell\n# supervisord 是启动supervisor \n# supervisorctl 是控制supervisord\n```\n\n打开supervisord.conf 的 [include] 引入 files的配置.\n\n```reStructuredText\n[include]\nfiles = /etc/supervisor/conf.d/*.conf\n```\n\n```reStructuredText\n[include]\nfiles = /etc/supervisor/conf.d/*.conf\n```\n\n需要创建`/etc/supervisor/conf.d/`\n\n-   **重启**\n\n```shell\n# supervisorctl reload\n```\n\n\n\n","slug":"Linux安装supervisor","published":1,"updated":"2019-01-27T07:29:58.846Z","comments":1,"layout":"post","link":"","_id":"cjwztf1vd000evifcihq20gfs","content":"<h1>介绍</h1>\n<p><a href=\"https://github.com/Supervisor/supervisor\" target=\"_blank\" rel=\"noopener\">Supervisor</a> 是一个用 Python 写的进程管理工具，可以很方便的对进程进行启动、停止、重启等操作。</p>\n<h1>安装</h1>\n<h2 id=\"for-ubuntu\">For Ubuntu</h2>\n<ul>\n<li>安装命令</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install supervisor</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置</li>\n</ul>\n<p>安装成功后，会在<code>/etc/supervisor</code>目录下，生成<code>supervisord.conf</code>配置文件。</p>\n<p>进程配置会读取<code>/etc/supervisor/conf.d</code>目录下的<code>*.conf</code>配置文件，我们在此目录下创建一个<code>product_celeryd.conf</code>进程配置文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:product_celeryd]</span><br><span class=\"line\">directory      = /webapps/product/</span><br><span class=\"line\">command        = /webapps/product/env/bin/celery -A licaishi worker -Q product</span><br><span class=\"line\">user           = root</span><br><span class=\"line\">stdout_logfile = /webapps/product/logs/product_celeryd.log</span><br><span class=\"line\">stderr_logfile = /webapps/product/logs/product_celeryd.log</span><br><span class=\"line\">autostart      = true</span><br><span class=\"line\">autorestart    = true</span><br><span class=\"line\">startsecs      = 10</span><br><span class=\"line\">stopwaitsecs   = 600</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动</li>\n</ul>\n<p>接着就可以启动 Supervisord 了：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisord</span></span><br></pre></td></tr></table></figure>\n<p><code>supervisorctl</code> 常用命令：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>supervisorctl stop program_name</td>\n<td>停止某个进程</td>\n</tr>\n<tr>\n<td>supervisorctl start program_name</td>\n<td>启动某个进程</td>\n</tr>\n<tr>\n<td>supervisorctl restart program_name</td>\n<td>重启某个进程</td>\n</tr>\n<tr>\n<td>supervisorctl stop all</td>\n<td>停止全部进程</td>\n</tr>\n<tr>\n<td>supervisorctl reload</td>\n<td>载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程</td>\n</tr>\n<tr>\n<td>supervisorctl update</td>\n<td>根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"for-centos\">For Centos</h2>\n<ul>\n<li><strong>安装</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum install python-setuptools</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> easy_install supervisor</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>创建配置文件(supervisord.conf）</strong></li>\n</ul>\n<p>使用root身份创建一个全局配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> echo_supervisord_conf &gt; /etc/supervisord.conf</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> supervisord -c /etc/supervisord.conf</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>修改配置文件(supervisord.conf）</strong></li>\n</ul>\n<p>如果修改了 /etc/supervisord.conf ,需要执行<code># supervisorctl reload</code>来重新加载配置文件，否则不会生效</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> supervisord 是启动supervisor </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> supervisorctl 是控制supervisord</span></span><br></pre></td></tr></table></figure>\n<p>打开supervisord.conf 的 [include] 引入 files的配置.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[include]</span><br><span class=\"line\">files = /etc/supervisor/conf.d/*.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[include]</span><br><span class=\"line\">files = /etc/supervisor/conf.d/*.conf</span><br></pre></td></tr></table></figure>\n<p>需要创建<code>/etc/supervisor/conf.d/</code></p>\n<ul>\n<li><strong>重启</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> supervisorctl reload</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1>介绍</h1>\n<p><a href=\"https://github.com/Supervisor/supervisor\" target=\"_blank\" rel=\"noopener\">Supervisor</a> 是一个用 Python 写的进程管理工具，可以很方便的对进程进行启动、停止、重启等操作。</p>\n<h1>安装</h1>\n<h2 id=\"for-ubuntu\">For Ubuntu</h2>\n<ul>\n<li>安装命令</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install supervisor</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置</li>\n</ul>\n<p>安装成功后，会在<code>/etc/supervisor</code>目录下，生成<code>supervisord.conf</code>配置文件。</p>\n<p>进程配置会读取<code>/etc/supervisor/conf.d</code>目录下的<code>*.conf</code>配置文件，我们在此目录下创建一个<code>product_celeryd.conf</code>进程配置文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:product_celeryd]</span><br><span class=\"line\">directory      = /webapps/product/</span><br><span class=\"line\">command        = /webapps/product/env/bin/celery -A licaishi worker -Q product</span><br><span class=\"line\">user           = root</span><br><span class=\"line\">stdout_logfile = /webapps/product/logs/product_celeryd.log</span><br><span class=\"line\">stderr_logfile = /webapps/product/logs/product_celeryd.log</span><br><span class=\"line\">autostart      = true</span><br><span class=\"line\">autorestart    = true</span><br><span class=\"line\">startsecs      = 10</span><br><span class=\"line\">stopwaitsecs   = 600</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动</li>\n</ul>\n<p>接着就可以启动 Supervisord 了：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> supervisord</span></span><br></pre></td></tr></table></figure>\n<p><code>supervisorctl</code> 常用命令：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>supervisorctl stop program_name</td>\n<td>停止某个进程</td>\n</tr>\n<tr>\n<td>supervisorctl start program_name</td>\n<td>启动某个进程</td>\n</tr>\n<tr>\n<td>supervisorctl restart program_name</td>\n<td>重启某个进程</td>\n</tr>\n<tr>\n<td>supervisorctl stop all</td>\n<td>停止全部进程</td>\n</tr>\n<tr>\n<td>supervisorctl reload</td>\n<td>载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程</td>\n</tr>\n<tr>\n<td>supervisorctl update</td>\n<td>根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"for-centos\">For Centos</h2>\n<ul>\n<li><strong>安装</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yum install python-setuptools</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> easy_install supervisor</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>创建配置文件(supervisord.conf）</strong></li>\n</ul>\n<p>使用root身份创建一个全局配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> echo_supervisord_conf &gt; /etc/supervisord.conf</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> supervisord -c /etc/supervisord.conf</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>修改配置文件(supervisord.conf）</strong></li>\n</ul>\n<p>如果修改了 /etc/supervisord.conf ,需要执行<code># supervisorctl reload</code>来重新加载配置文件，否则不会生效</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> supervisord 是启动supervisor </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> supervisorctl 是控制supervisord</span></span><br></pre></td></tr></table></figure>\n<p>打开supervisord.conf 的 [include] 引入 files的配置.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[include]</span><br><span class=\"line\">files = /etc/supervisor/conf.d/*.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[include]</span><br><span class=\"line\">files = /etc/supervisor/conf.d/*.conf</span><br></pre></td></tr></table></figure>\n<p>需要创建<code>/etc/supervisor/conf.d/</code></p>\n<ul>\n<li><strong>重启</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> supervisorctl reload</span></span><br></pre></td></tr></table></figure>\n"},{"title":"django-celery实现定时任务","subtitle":"django-celery","date":"2018-11-16T09:11:53.000Z","description":"使用django-celery实现定时任务，可以不用重启celery beat进程","photos":[],"original":true,"_content":"## 介绍\n我们知道celery可以直接用在django项目中，但是配置稍微繁琐，还有添加定时任务需要重启celery beat进程，实在蛋疼，好在找到了`django-celery`这个模块，话不多说，让我们用起来吧。\n\n## 安装和配置\n\n安装还是很简单的，直接pip即可\n\n```text\npip install django-clery\n```\n\n> 此时会将一些依赖库一并安装，比如celery等\n\n接下来是django项目中的配置，在settings中配置如下:\n\n```text\n# INSTALLED_APPS中加入djcelery\nINSTALLED_APPS = [\n    ....\n    'djcelery'\n]\n\n# 配置djcelery相关参数，ResultStore默认存储在数据库可不必重写 ，\ndjcelery.setup_loader()\nBROKER_URL = 'redis://127.0.0.1:6379/8'  # 配置你的redis地址和库\n# 使用和Django一样的时区\nCELERY_TIMEZONE = TIME_ZONE\n\n# 以上为基本配置，以下为周期性任务定义\nCELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'\n```\n\n同步数据库\n\n```text\npython manage.py migrate\n```\n\n## 创建task\n\n在你的app下面创建一个`tasks.py`文件，文件名必须一致，`django-celery`默认情况下会自动从各个app中寻找该模块。\n\n```python\nfrom celery import task\n\n@task()\ndef send_msg(msg):\n    print(msg)\n```\n\n> 注意：task装饰器的`name`参数最好和函数名一致或者干脆不指定;最好不指定，这样下方分发任务时好统一处理。\n\n## 创建定时任务\n\n接下来我们就可以在Django admin中创建定时任务了\n\n![](/images/2018-11-16/QQ20170613-215907.jpg)\n![](/images/2018-11-16/QQ20170613-220348.jpg)\n\n## 启动beat和worker\n\n```text\npython manage.py celery worker -l info\n```\n\n```text\npython manage.py celery beat\n```\n\n之后就可以观察日志了，另外可以使用`supervisor`来管理这两个进程。\n\n## 利用queue分发任务\n\n在settings中增加如下配置:\n\n```reStructuredText\n# 定义任务对应的queue\nclass TasksRouter(object):\n    @classmethod\n    def route_for_task(cls, task, args=None, kwargs=None):\n        task_routes = {\n            'algorithm.product.tasks.*': {'queue': 'product'},\n            'algorithm.material.tasks.*': {'queue': 'material'},\n        }\n        for route_key in task_routes:\n            if re.search(route_key, task):\n                return task_routes[route_key]\n\n\nCELERY_ROUTES = (TasksRouter(), )\n```\n\n配置完成之后，启动beat和worker\n\n```\npython manage.py celery beat\n```\n\nbeat会实时检测任务的变化，在django admin界面对任务进行操作，均会刷新该进程，使得分派任务变得非常简单。\n\n```reStructuredText\npython manage.py celery worker -Q product\n```\n\n上述命令启动的worker只会监测并执行`product`这个queue中的任务，即只执行`algorithm.product.tasks`下面的任务。同理`python manage.py celery worker -Q material`只执行`algorithm.material.tasks`下面的任务。\n\n另外queue可以添加多个,例如`python manage.py celery worker -Q product,material`。\n\n若要不区分queue执行所有任务，只需`python manage.py celery worker`即可,但不推荐,开启任务分发之后，最好分开执行，日志方面也更好排查。","source":"_posts/django-celery实现定时任务.md","raw":"---\ntitle: django-celery实现定时任务\nsubtitle: django-celery\ndate: 2018-11-16 17:11:53\ndescription: 使用django-celery实现定时任务，可以不用重启celery beat进程\ntags: Django\ncategories: Django\nphotos:\noriginal: true\n---\n## 介绍\n我们知道celery可以直接用在django项目中，但是配置稍微繁琐，还有添加定时任务需要重启celery beat进程，实在蛋疼，好在找到了`django-celery`这个模块，话不多说，让我们用起来吧。\n\n## 安装和配置\n\n安装还是很简单的，直接pip即可\n\n```text\npip install django-clery\n```\n\n> 此时会将一些依赖库一并安装，比如celery等\n\n接下来是django项目中的配置，在settings中配置如下:\n\n```text\n# INSTALLED_APPS中加入djcelery\nINSTALLED_APPS = [\n    ....\n    'djcelery'\n]\n\n# 配置djcelery相关参数，ResultStore默认存储在数据库可不必重写 ，\ndjcelery.setup_loader()\nBROKER_URL = 'redis://127.0.0.1:6379/8'  # 配置你的redis地址和库\n# 使用和Django一样的时区\nCELERY_TIMEZONE = TIME_ZONE\n\n# 以上为基本配置，以下为周期性任务定义\nCELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'\n```\n\n同步数据库\n\n```text\npython manage.py migrate\n```\n\n## 创建task\n\n在你的app下面创建一个`tasks.py`文件，文件名必须一致，`django-celery`默认情况下会自动从各个app中寻找该模块。\n\n```python\nfrom celery import task\n\n@task()\ndef send_msg(msg):\n    print(msg)\n```\n\n> 注意：task装饰器的`name`参数最好和函数名一致或者干脆不指定;最好不指定，这样下方分发任务时好统一处理。\n\n## 创建定时任务\n\n接下来我们就可以在Django admin中创建定时任务了\n\n![](/images/2018-11-16/QQ20170613-215907.jpg)\n![](/images/2018-11-16/QQ20170613-220348.jpg)\n\n## 启动beat和worker\n\n```text\npython manage.py celery worker -l info\n```\n\n```text\npython manage.py celery beat\n```\n\n之后就可以观察日志了，另外可以使用`supervisor`来管理这两个进程。\n\n## 利用queue分发任务\n\n在settings中增加如下配置:\n\n```reStructuredText\n# 定义任务对应的queue\nclass TasksRouter(object):\n    @classmethod\n    def route_for_task(cls, task, args=None, kwargs=None):\n        task_routes = {\n            'algorithm.product.tasks.*': {'queue': 'product'},\n            'algorithm.material.tasks.*': {'queue': 'material'},\n        }\n        for route_key in task_routes:\n            if re.search(route_key, task):\n                return task_routes[route_key]\n\n\nCELERY_ROUTES = (TasksRouter(), )\n```\n\n配置完成之后，启动beat和worker\n\n```\npython manage.py celery beat\n```\n\nbeat会实时检测任务的变化，在django admin界面对任务进行操作，均会刷新该进程，使得分派任务变得非常简单。\n\n```reStructuredText\npython manage.py celery worker -Q product\n```\n\n上述命令启动的worker只会监测并执行`product`这个queue中的任务，即只执行`algorithm.product.tasks`下面的任务。同理`python manage.py celery worker -Q material`只执行`algorithm.material.tasks`下面的任务。\n\n另外queue可以添加多个,例如`python manage.py celery worker -Q product,material`。\n\n若要不区分queue执行所有任务，只需`python manage.py celery worker`即可,但不推荐,开启任务分发之后，最好分开执行，日志方面也更好排查。","slug":"django-celery实现定时任务","published":1,"updated":"2018-12-12T06:46:59.925Z","comments":1,"layout":"post","link":"","_id":"cjwztf1vf000fvifc0xdmb6by","content":"<h2 id=\"介绍\">介绍</h2>\n<p>我们知道celery可以直接用在django项目中，但是配置稍微繁琐，还有添加定时任务需要重启celery beat进程，实在蛋疼，好在找到了<code>django-celery</code>这个模块，话不多说，让我们用起来吧。</p>\n<h2 id=\"安装和配置\">安装和配置</h2>\n<p>安装还是很简单的，直接pip即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install django-clery</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>此时会将一些依赖库一并安装，比如celery等</p>\n</blockquote>\n<p>接下来是django项目中的配置，在settings中配置如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># INSTALLED_APPS中加入djcelery</span><br><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    &apos;djcelery&apos;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置djcelery相关参数，ResultStore默认存储在数据库可不必重写 ，</span><br><span class=\"line\">djcelery.setup_loader()</span><br><span class=\"line\">BROKER_URL = &apos;redis://127.0.0.1:6379/8&apos;  # 配置你的redis地址和库</span><br><span class=\"line\"># 使用和Django一样的时区</span><br><span class=\"line\">CELERY_TIMEZONE = TIME_ZONE</span><br><span class=\"line\"></span><br><span class=\"line\"># 以上为基本配置，以下为周期性任务定义</span><br><span class=\"line\">CELERYBEAT_SCHEDULER = &apos;djcelery.schedulers.DatabaseScheduler&apos;</span><br></pre></td></tr></table></figure>\n<p>同步数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py migrate</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建task\">创建task</h2>\n<p>在你的app下面创建一个<code>tasks.py</code>文件，文件名必须一致，<code>django-celery</code>默认情况下会自动从各个app中寻找该模块。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> celery <span class=\"keyword\">import</span> task</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@task()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_msg</span><span class=\"params\">(msg)</span>:</span></span><br><span class=\"line\">    print(msg)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：task装饰器的<code>name</code>参数最好和函数名一致或者干脆不指定;最好不指定，这样下方分发任务时好统一处理。</p>\n</blockquote>\n<h2 id=\"创建定时任务\">创建定时任务</h2>\n<p>接下来我们就可以在Django admin中创建定时任务了</p>\n<p><img src=\"/images/2018-11-16/QQ20170613-215907.jpg\" alt=\"\"><br>\n<img src=\"/images/2018-11-16/QQ20170613-220348.jpg\" alt=\"\"></p>\n<h2 id=\"启动beat和worker\">启动beat和worker</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py celery worker -l info</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py celery beat</span><br></pre></td></tr></table></figure>\n<p>之后就可以观察日志了，另外可以使用<code>supervisor</code>来管理这两个进程。</p>\n<h2 id=\"利用queue分发任务\">利用queue分发任务</h2>\n<p>在settings中增加如下配置:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 定义任务对应的queue</span><br><span class=\"line\">class TasksRouter(object):</span><br><span class=\"line\">    @classmethod</span><br><span class=\"line\">    def route_for_task(cls, task, args=None, kwargs=None):</span><br><span class=\"line\">        task_routes = &#123;</span><br><span class=\"line\">            &apos;algorithm.product.tasks.*&apos;: &#123;&apos;queue&apos;: &apos;product&apos;&#125;,</span><br><span class=\"line\">            &apos;algorithm.material.tasks.*&apos;: &#123;&apos;queue&apos;: &apos;material&apos;&#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for route_key in task_routes:</span><br><span class=\"line\">            if re.search(route_key, task):</span><br><span class=\"line\">                return task_routes[route_key]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">CELERY_ROUTES = (TasksRouter(), )</span><br></pre></td></tr></table></figure>\n<p>配置完成之后，启动beat和worker</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py celery beat</span><br></pre></td></tr></table></figure>\n<p>beat会实时检测任务的变化，在django admin界面对任务进行操作，均会刷新该进程，使得分派任务变得非常简单。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py celery worker -Q product</span><br></pre></td></tr></table></figure>\n<p>上述命令启动的worker只会监测并执行<code>product</code>这个queue中的任务，即只执行<code>algorithm.product.tasks</code>下面的任务。同理<code>python manage.py celery worker -Q material</code>只执行<code>algorithm.material.tasks</code>下面的任务。</p>\n<p>另外queue可以添加多个,例如<code>python manage.py celery worker -Q product,material</code>。</p>\n<p>若要不区分queue执行所有任务，只需<code>python manage.py celery worker</code>即可,但不推荐,开启任务分发之后，最好分开执行，日志方面也更好排查。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"介绍\">介绍</h2>\n<p>我们知道celery可以直接用在django项目中，但是配置稍微繁琐，还有添加定时任务需要重启celery beat进程，实在蛋疼，好在找到了<code>django-celery</code>这个模块，话不多说，让我们用起来吧。</p>\n<h2 id=\"安装和配置\">安装和配置</h2>\n<p>安装还是很简单的，直接pip即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install django-clery</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>此时会将一些依赖库一并安装，比如celery等</p>\n</blockquote>\n<p>接下来是django项目中的配置，在settings中配置如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># INSTALLED_APPS中加入djcelery</span><br><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    &apos;djcelery&apos;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置djcelery相关参数，ResultStore默认存储在数据库可不必重写 ，</span><br><span class=\"line\">djcelery.setup_loader()</span><br><span class=\"line\">BROKER_URL = &apos;redis://127.0.0.1:6379/8&apos;  # 配置你的redis地址和库</span><br><span class=\"line\"># 使用和Django一样的时区</span><br><span class=\"line\">CELERY_TIMEZONE = TIME_ZONE</span><br><span class=\"line\"></span><br><span class=\"line\"># 以上为基本配置，以下为周期性任务定义</span><br><span class=\"line\">CELERYBEAT_SCHEDULER = &apos;djcelery.schedulers.DatabaseScheduler&apos;</span><br></pre></td></tr></table></figure>\n<p>同步数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py migrate</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建task\">创建task</h2>\n<p>在你的app下面创建一个<code>tasks.py</code>文件，文件名必须一致，<code>django-celery</code>默认情况下会自动从各个app中寻找该模块。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> celery <span class=\"keyword\">import</span> task</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@task()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_msg</span><span class=\"params\">(msg)</span>:</span></span><br><span class=\"line\">    print(msg)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：task装饰器的<code>name</code>参数最好和函数名一致或者干脆不指定;最好不指定，这样下方分发任务时好统一处理。</p>\n</blockquote>\n<h2 id=\"创建定时任务\">创建定时任务</h2>\n<p>接下来我们就可以在Django admin中创建定时任务了</p>\n<p><img src=\"/images/2018-11-16/QQ20170613-215907.jpg\" alt=\"\"><br>\n<img src=\"/images/2018-11-16/QQ20170613-220348.jpg\" alt=\"\"></p>\n<h2 id=\"启动beat和worker\">启动beat和worker</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py celery worker -l info</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py celery beat</span><br></pre></td></tr></table></figure>\n<p>之后就可以观察日志了，另外可以使用<code>supervisor</code>来管理这两个进程。</p>\n<h2 id=\"利用queue分发任务\">利用queue分发任务</h2>\n<p>在settings中增加如下配置:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 定义任务对应的queue</span><br><span class=\"line\">class TasksRouter(object):</span><br><span class=\"line\">    @classmethod</span><br><span class=\"line\">    def route_for_task(cls, task, args=None, kwargs=None):</span><br><span class=\"line\">        task_routes = &#123;</span><br><span class=\"line\">            &apos;algorithm.product.tasks.*&apos;: &#123;&apos;queue&apos;: &apos;product&apos;&#125;,</span><br><span class=\"line\">            &apos;algorithm.material.tasks.*&apos;: &#123;&apos;queue&apos;: &apos;material&apos;&#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for route_key in task_routes:</span><br><span class=\"line\">            if re.search(route_key, task):</span><br><span class=\"line\">                return task_routes[route_key]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">CELERY_ROUTES = (TasksRouter(), )</span><br></pre></td></tr></table></figure>\n<p>配置完成之后，启动beat和worker</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py celery beat</span><br></pre></td></tr></table></figure>\n<p>beat会实时检测任务的变化，在django admin界面对任务进行操作，均会刷新该进程，使得分派任务变得非常简单。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py celery worker -Q product</span><br></pre></td></tr></table></figure>\n<p>上述命令启动的worker只会监测并执行<code>product</code>这个queue中的任务，即只执行<code>algorithm.product.tasks</code>下面的任务。同理<code>python manage.py celery worker -Q material</code>只执行<code>algorithm.material.tasks</code>下面的任务。</p>\n<p>另外queue可以添加多个,例如<code>python manage.py celery worker -Q product,material</code>。</p>\n<p>若要不区分queue执行所有任务，只需<code>python manage.py celery worker</code>即可,但不推荐,开启任务分发之后，最好分开执行，日志方面也更好排查。</p>\n"},{"title":"PostgreSQL允许被远程访问","subtitle":"postgresql-remote","date":"2018-11-19T06:00:41.000Z","description":"PostgreSQL允许被远程访问","photos":[],"original":false,"_content":"## 1.修改postgresql.conf\n\n`postgresql.conf`存放位置在`/etc/postgresql/9.x/main`下，这里的`x`取决于你安装PostgreSQL的版本号，编辑或添加下面一行，使PostgreSQL可以接受来自任意IP的连接请求。\n\n```text\nlisten_addresses = '*'\n```\n\n## 2.修改pg_hba.conf\n\n`修改pg_hba.conf`位置与`postgresql.conf`相同，虽然上面配置允许任意地址连接PostgreSQL，但是这在pg中还不够，我们还需在`pg_hba.conf`中配置服务端允许的认证方式。任意编辑器打开该文件，编辑或添加下面一行。\n\n```text\n# TYPE  DATABASE  USER  CIDR-ADDRESS  METHOD\nhost  all  all 0.0.0.0/0 md5\n```\n\n默认pg只允许本机通过密码认证登录，修改为上面内容后即可以对任意IP访问进行密码验证。对照上面的注释可以很容易搞明白每列的含义，具体的支持项可以查阅文末参考引用。\n\n完成上两项配置后执行`sudo service postgresql restart`重启PostgreSQL服务后，允许外网访问的配置就算生效了。\n","source":"_posts/PostgreSQL允许被远程访问.md","raw":"---\ntitle: PostgreSQL允许被远程访问\nsubtitle: postgresql-remote\ndate: 2018-11-19 14:00:41\ndescription: PostgreSQL允许被远程访问\ntags: PostgreSQL\ncategories: PostgreSQL\nphotos:\noriginal: false\n---\n## 1.修改postgresql.conf\n\n`postgresql.conf`存放位置在`/etc/postgresql/9.x/main`下，这里的`x`取决于你安装PostgreSQL的版本号，编辑或添加下面一行，使PostgreSQL可以接受来自任意IP的连接请求。\n\n```text\nlisten_addresses = '*'\n```\n\n## 2.修改pg_hba.conf\n\n`修改pg_hba.conf`位置与`postgresql.conf`相同，虽然上面配置允许任意地址连接PostgreSQL，但是这在pg中还不够，我们还需在`pg_hba.conf`中配置服务端允许的认证方式。任意编辑器打开该文件，编辑或添加下面一行。\n\n```text\n# TYPE  DATABASE  USER  CIDR-ADDRESS  METHOD\nhost  all  all 0.0.0.0/0 md5\n```\n\n默认pg只允许本机通过密码认证登录，修改为上面内容后即可以对任意IP访问进行密码验证。对照上面的注释可以很容易搞明白每列的含义，具体的支持项可以查阅文末参考引用。\n\n完成上两项配置后执行`sudo service postgresql restart`重启PostgreSQL服务后，允许外网访问的配置就算生效了。\n","slug":"PostgreSQL允许被远程访问","published":1,"updated":"2018-12-12T06:49:11.243Z","comments":1,"layout":"post","link":"","_id":"cjwztf1vh000kvifcwq9uqgn8","content":"<h2 id=\"1-修改postgresql-conf\">1.修改postgresql.conf</h2>\n<p><code>postgresql.conf</code>存放位置在<code>/etc/postgresql/9.x/main</code>下，这里的<code>x</code>取决于你安装PostgreSQL的版本号，编辑或添加下面一行，使PostgreSQL可以接受来自任意IP的连接请求。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen_addresses = &apos;*&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-修改pg-hba-conf\">2.修改pg_hba.conf</h2>\n<p><code>修改pg_hba.conf</code>位置与<code>postgresql.conf</code>相同，虽然上面配置允许任意地址连接PostgreSQL，但是这在pg中还不够，我们还需在<code>pg_hba.conf</code>中配置服务端允许的认证方式。任意编辑器打开该文件，编辑或添加下面一行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># TYPE  DATABASE  USER  CIDR-ADDRESS  METHOD</span><br><span class=\"line\">host  all  all 0.0.0.0/0 md5</span><br></pre></td></tr></table></figure>\n<p>默认pg只允许本机通过密码认证登录，修改为上面内容后即可以对任意IP访问进行密码验证。对照上面的注释可以很容易搞明白每列的含义，具体的支持项可以查阅文末参考引用。</p>\n<p>完成上两项配置后执行<code>sudo service postgresql restart</code>重启PostgreSQL服务后，允许外网访问的配置就算生效了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-修改postgresql-conf\">1.修改postgresql.conf</h2>\n<p><code>postgresql.conf</code>存放位置在<code>/etc/postgresql/9.x/main</code>下，这里的<code>x</code>取决于你安装PostgreSQL的版本号，编辑或添加下面一行，使PostgreSQL可以接受来自任意IP的连接请求。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen_addresses = &apos;*&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-修改pg-hba-conf\">2.修改pg_hba.conf</h2>\n<p><code>修改pg_hba.conf</code>位置与<code>postgresql.conf</code>相同，虽然上面配置允许任意地址连接PostgreSQL，但是这在pg中还不够，我们还需在<code>pg_hba.conf</code>中配置服务端允许的认证方式。任意编辑器打开该文件，编辑或添加下面一行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># TYPE  DATABASE  USER  CIDR-ADDRESS  METHOD</span><br><span class=\"line\">host  all  all 0.0.0.0/0 md5</span><br></pre></td></tr></table></figure>\n<p>默认pg只允许本机通过密码认证登录，修改为上面内容后即可以对任意IP访问进行密码验证。对照上面的注释可以很容易搞明白每列的含义，具体的支持项可以查阅文末参考引用。</p>\n<p>完成上两项配置后执行<code>sudo service postgresql restart</code>重启PostgreSQL服务后，允许外网访问的配置就算生效了。</p>\n"},{"title":"ubuntu 中 Typora 安装","subtitle":"ubuntu-typora","original":false,"date":"2018-11-26T01:53:19.000Z","description":"ubuntu 中 Typora 安装","photos":[],"_content":"\n```reStructuredText\n# optional, but recommended\n\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE\n\n# add Typora's repository\n\nsudo add-apt-repository 'deb http://typora.io linux/'\n\nsudo apt-get update\n\n# install typora\n\nsudo apt-get install typora\n```\n\n>   另外推荐安装下Vue的theme，地址:https://theme.typora.io/theme/Vue/\n\n","source":"_posts/ubuntu-中-Typora-安装.md","raw":"---\ntitle: ubuntu 中 Typora 安装\nsubtitle: ubuntu-typora\noriginal: false\ndate: 2018-11-26 09:53:19\ndescription: ubuntu 中 Typora 安装\ntags: \n- Ubuntu\n- 工具\ncategories:\n- Ubuntu\n- 工具\nphotos:\n---\n\n```reStructuredText\n# optional, but recommended\n\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE\n\n# add Typora's repository\n\nsudo add-apt-repository 'deb http://typora.io linux/'\n\nsudo apt-get update\n\n# install typora\n\nsudo apt-get install typora\n```\n\n>   另外推荐安装下Vue的theme，地址:https://theme.typora.io/theme/Vue/\n\n","slug":"ubuntu-中-Typora-安装","published":1,"updated":"2018-12-12T06:49:11.075Z","comments":1,"layout":"post","link":"","_id":"cjwztf1vi000lvifckqkfbk6y","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># optional, but recommended</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span><br><span class=\"line\"></span><br><span class=\"line\"># add Typora&apos;s repository</span><br><span class=\"line\"></span><br><span class=\"line\">sudo add-apt-repository &apos;deb http://typora.io linux/&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"># install typora</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install typora</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>另外推荐安装下Vue的theme，地址:<a href=\"https://theme.typora.io/theme/Vue/\" target=\"_blank\" rel=\"noopener\">https://theme.typora.io/theme/Vue/</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># optional, but recommended</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span><br><span class=\"line\"></span><br><span class=\"line\"># add Typora&apos;s repository</span><br><span class=\"line\"></span><br><span class=\"line\">sudo add-apt-repository &apos;deb http://typora.io linux/&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"># install typora</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install typora</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>另外推荐安装下Vue的theme，地址:<a href=\"https://theme.typora.io/theme/Vue/\" target=\"_blank\" rel=\"noopener\">https://theme.typora.io/theme/Vue/</a></p>\n</blockquote>\n"},{"title":"ubuntu18.04设置开机启动脚本","original":false,"comments":1,"date":"2019-02-28T05:20:45.000Z","subtitle":"ubuntu-boot-script","description":"ubuntu18.04设置开机启动脚本","photos":[],"_content":"\n## 一、建立rc-local.service文件\n\n```\nsudo vi /etc/systemd/system/rc-local.service\n```\n\n## 二、将下列内容复制进rc-local.service文件\n\n```\n[Unit]\nDescription=/etc/rc.local Compatibility\nConditionPathExists=/etc/rc.local\n \n[Service]\nType=forking\nExecStart=/etc/rc.local start\nTimeoutSec=0\nStandardOutput=tty\nRemainAfterExit=yes\nSysVStartPriority=99\n \n[Install]\nWantedBy=multi-user.target\n```\n\n## 三、创建文件rc.local\n\n```\nsudo vi /etc/rc.local\n```\n\n## 四、将下列内容复制进rc.local文件\n\n```\n#!/bin/sh -e\n#\n# rc.local\n#\n# This script is executed at the end of each multiuser runlevel.\n# Make sure that the script will \"exit 0\" on success or any other\n# value on error.\n#\n# In order to enable or disable this script just change the execution\n# bits.\n#\n# By default this script does nothing.\necho \"看到这行字，说明添加自启动脚本成功。\" > /usr/local/test.log\nexit 0\n```\n\n## 五、给rc.local加上权限,启用服务\n\n```\nsudo chmod +x /etc/rc.local\nsudo systemctl enable rc-local\n```\n\n## 六、启动服务并检查状态\n\n```\nsudo systemctl start rc-local.service\nsudo systemctl status rc-local.service\n```\n\n## 七、重启并检查test.log文件\n\n```\ncat /usr/local/test.log\n```\n\n\n\n>   PS:ubuntu16.04直接编辑/etc/rc.local文件即可","source":"_posts/ubuntu18-04设置开机启动脚本.md","raw":"---\ntitle: ubuntu18.04设置开机启动脚本\noriginal: false\ncomments: true\ndate: 2019-02-28 13:20:45\nsubtitle: ubuntu-boot-script\ndescription: ubuntu18.04设置开机启动脚本\ntags: Ubuntu\ncategories: Ubuntu\nphotos:\n---\n\n## 一、建立rc-local.service文件\n\n```\nsudo vi /etc/systemd/system/rc-local.service\n```\n\n## 二、将下列内容复制进rc-local.service文件\n\n```\n[Unit]\nDescription=/etc/rc.local Compatibility\nConditionPathExists=/etc/rc.local\n \n[Service]\nType=forking\nExecStart=/etc/rc.local start\nTimeoutSec=0\nStandardOutput=tty\nRemainAfterExit=yes\nSysVStartPriority=99\n \n[Install]\nWantedBy=multi-user.target\n```\n\n## 三、创建文件rc.local\n\n```\nsudo vi /etc/rc.local\n```\n\n## 四、将下列内容复制进rc.local文件\n\n```\n#!/bin/sh -e\n#\n# rc.local\n#\n# This script is executed at the end of each multiuser runlevel.\n# Make sure that the script will \"exit 0\" on success or any other\n# value on error.\n#\n# In order to enable or disable this script just change the execution\n# bits.\n#\n# By default this script does nothing.\necho \"看到这行字，说明添加自启动脚本成功。\" > /usr/local/test.log\nexit 0\n```\n\n## 五、给rc.local加上权限,启用服务\n\n```\nsudo chmod +x /etc/rc.local\nsudo systemctl enable rc-local\n```\n\n## 六、启动服务并检查状态\n\n```\nsudo systemctl start rc-local.service\nsudo systemctl status rc-local.service\n```\n\n## 七、重启并检查test.log文件\n\n```\ncat /usr/local/test.log\n```\n\n\n\n>   PS:ubuntu16.04直接编辑/etc/rc.local文件即可","slug":"ubuntu18-04设置开机启动脚本","published":1,"updated":"2019-02-28T05:22:46.172Z","layout":"post","link":"","_id":"cjwztf1vj000pvifchv7cqz16","content":"<h2 id=\"一-建立rc-local-service文件\">一、建立rc-local.service文件</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/systemd/system/rc-local.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-将下列内容复制进rc-local-service文件\">二、将下列内容复制进rc-local.service文件</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=/etc/rc.local Compatibility</span><br><span class=\"line\">ConditionPathExists=/etc/rc.local</span><br><span class=\"line\"> </span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">ExecStart=/etc/rc.local start</span><br><span class=\"line\">TimeoutSec=0</span><br><span class=\"line\">StandardOutput=tty</span><br><span class=\"line\">RemainAfterExit=yes</span><br><span class=\"line\">SysVStartPriority=99</span><br><span class=\"line\"> </span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<h2 id=\"三-创建文件rc-local\">三、创建文件rc.local</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/rc.local</span><br></pre></td></tr></table></figure>\n<h2 id=\"四-将下列内容复制进rc-local文件\">四、将下列内容复制进rc.local文件</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh -e</span><br><span class=\"line\">#</span><br><span class=\"line\"># rc.local</span><br><span class=\"line\">#</span><br><span class=\"line\"># This script is executed at the end of each multiuser runlevel.</span><br><span class=\"line\"># Make sure that the script will &quot;exit 0&quot; on success or any other</span><br><span class=\"line\"># value on error.</span><br><span class=\"line\">#</span><br><span class=\"line\"># In order to enable or disable this script just change the execution</span><br><span class=\"line\"># bits.</span><br><span class=\"line\">#</span><br><span class=\"line\"># By default this script does nothing.</span><br><span class=\"line\">echo &quot;看到这行字，说明添加自启动脚本成功。&quot; &gt; /usr/local/test.log</span><br><span class=\"line\">exit 0</span><br></pre></td></tr></table></figure>\n<h2 id=\"五-给rc-local加上权限-启用服务\">五、给rc.local加上权限,启用服务</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod +x /etc/rc.local</span><br><span class=\"line\">sudo systemctl enable rc-local</span><br></pre></td></tr></table></figure>\n<h2 id=\"六-启动服务并检查状态\">六、启动服务并检查状态</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start rc-local.service</span><br><span class=\"line\">sudo systemctl status rc-local.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"七-重启并检查test-log文件\">七、重启并检查test.log文件</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /usr/local/test.log</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>PS:ubuntu16.04直接编辑/etc/rc.local文件即可</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-建立rc-local-service文件\">一、建立rc-local.service文件</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/systemd/system/rc-local.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-将下列内容复制进rc-local-service文件\">二、将下列内容复制进rc-local.service文件</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=/etc/rc.local Compatibility</span><br><span class=\"line\">ConditionPathExists=/etc/rc.local</span><br><span class=\"line\"> </span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">ExecStart=/etc/rc.local start</span><br><span class=\"line\">TimeoutSec=0</span><br><span class=\"line\">StandardOutput=tty</span><br><span class=\"line\">RemainAfterExit=yes</span><br><span class=\"line\">SysVStartPriority=99</span><br><span class=\"line\"> </span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<h2 id=\"三-创建文件rc-local\">三、创建文件rc.local</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/rc.local</span><br></pre></td></tr></table></figure>\n<h2 id=\"四-将下列内容复制进rc-local文件\">四、将下列内容复制进rc.local文件</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh -e</span><br><span class=\"line\">#</span><br><span class=\"line\"># rc.local</span><br><span class=\"line\">#</span><br><span class=\"line\"># This script is executed at the end of each multiuser runlevel.</span><br><span class=\"line\"># Make sure that the script will &quot;exit 0&quot; on success or any other</span><br><span class=\"line\"># value on error.</span><br><span class=\"line\">#</span><br><span class=\"line\"># In order to enable or disable this script just change the execution</span><br><span class=\"line\"># bits.</span><br><span class=\"line\">#</span><br><span class=\"line\"># By default this script does nothing.</span><br><span class=\"line\">echo &quot;看到这行字，说明添加自启动脚本成功。&quot; &gt; /usr/local/test.log</span><br><span class=\"line\">exit 0</span><br></pre></td></tr></table></figure>\n<h2 id=\"五-给rc-local加上权限-启用服务\">五、给rc.local加上权限,启用服务</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod +x /etc/rc.local</span><br><span class=\"line\">sudo systemctl enable rc-local</span><br></pre></td></tr></table></figure>\n<h2 id=\"六-启动服务并检查状态\">六、启动服务并检查状态</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start rc-local.service</span><br><span class=\"line\">sudo systemctl status rc-local.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"七-重启并检查test-log文件\">七、重启并检查test.log文件</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /usr/local/test.log</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>PS:ubuntu16.04直接编辑/etc/rc.local文件即可</p>\n</blockquote>\n"},{"title":"vue中axios全局设置csrftoken以及Authorization","subtitle":"vue-axios-set","original":true,"date":"2018-11-29T10:48:17.000Z","description":"vue中axios全局设置csrftoken以及Authorization","photos":[],"_content":"\n## 说在前面\n\n我们都知道，用django做后端服务时，对于post请求提交表单时总是需要csrftoken的验证，那么我们如何在vue中使用axios发起请求时全局在headers里面设置csrftoken呢？以及全局设置Authorization?\n\n## 设置\n\n其实非常简单，在main.js中设置下即可，示例代码如下:\n\n```js\nimport Vue from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\nimport './plugins/axios.js'\nimport './plugins/cookies.js'\n\nVue.config.productionTip = false;\n\nnew Vue({\n    router,\n    store,\n    render: h => h(App),\n\t//进入页面时\n    created() {\n        // 拦截axios请求\n        this.axios.interceptors.request.use(\n            config => {\n                // 设置登录验证token\n                const token = this.$store.state.userInfo.Authorization;\n                if (token) {\n                    config.headers.Authorization = token;\n                }\n\n                // 设置csrftoken\n                const csrftoken = this.$cookies.get('csrftoken');\n                if (csrftoken) {\n                    config.headers['X-CSRFTOKEN'] = csrftoken;\n                }\n                return config\n            },\n            error => {\n                return Promise.reject(error)\n            });\n    }\n}).$mount('#app');\n```\n\n另外贴下我的store.js:\n\n```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n    state: {\n        userInfo: {\n            username: \"\",  // 用户名\n            Authorization: \"\",  // 用户登录的验证Token\n        },\n    },\n    mutations: {\n        // 更新用户信息\n        updateUserInfo(state, userInfo) {\n            state.userInfo.Authorization = userInfo.Authorization;\n            state.userInfo.username = userInfo.username;\n        }\n    },\n    actions: {\n        updateUserInfo({commit}, userInfo) {\n            commit('updateUserInfo', userInfo)\n        }\n    },\n})\n```\n\n\n\n## 考虑封装axios\n\n### 封装进api\n\n-   创建api文件夹,其中创建一个`api.js`\n-   编辑plugins下的`axios.js`\n\n```js\nimport Vue from 'vue'\nimport axios from 'axios'\nimport VueAxios from 'vue-axios'\nimport store from '../store'\n\nVue.use(VueAxios, axios);\n\n// base url\n// Vue.axios.defaults.baseURL = 'http://127.0.0.1:9001';\n\n// 请求超时时间\nVue.axios.defaults.timeout = 10000;\n\n// 请求拦截器\nVue.axios.interceptors.request.use(\n    config => {\n        // 设置登录验证token\n        const token = store.state.userInfo.Authorization;\n        if (token) {\n            config.headers.Authorization = token;\n        }\n        // 设置csrftoken\n        const csrftoken = Vue.cookies.get('csrftoken');\n        if (csrftoken) {\n            config.headers['X-CSRFTOKEN'] = csrftoken;\n        }\n        console.log(token, csrftoken);\n        return config\n    },\n    error => {\n        return Promise.reject(error)\n    });\n\n\n// 响应拦截器\nVue.axios.interceptors.response.use(\n    // 请求成功\n    res => Promise.resolve(res),\n    // 请求失败\n    error => {\n        // 请求已发出，但是不在2xx的范围\n        console.log(error);  // 这儿可以用UI插件做个弹窗提醒\n        return Promise.reject(error);\n    });\n```\n\n-   编辑`api.js`\n\n```js\nimport Vue from 'vue'\n\n// 登录接口\nexport const login = data => Vue.axios.post(\n    '/api/xxxx/login/', data\n);\n\n// 获取新闻列表接口\nexport const getNews = params => Vue.axios.get(\n    '/api/xxxx/newsflashmaterial/?ordering=-create_time', params\n);\n```\n\n-   我的`main.js`\n\n```js\nimport Vue from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\nimport './plugins/element.js'\nimport './plugins/cookies.js'\nimport './plugins/axios.js'\n\n\n.....\n```\n\n-   使用\n\n```js\n<script>\n    import {login} from \"../api/api\"\n\n    export default {\n        name: \"Login\",\n        data() {\n            return {\n                formLabelAlign: {\n                    username: '',\n                    password: ''\n                }\n            }\n        },\n        methods: {\n            submitForm() {\n                login(this.formLabelAlign).then((response) => {\n                    // 登录成功之后的操作\n                })\n            },\n        }\n    }\n</script>\n```\n\n## 完成","source":"_posts/vue中axios全局设置csrftoken以及Authorization.md","raw":"---\ntitle: vue中axios全局设置csrftoken以及Authorization\nsubtitle: vue-axios-set\noriginal: true\ndate: 2018-11-29 18:48:17\ndescription: vue中axios全局设置csrftoken以及Authorization\ntags: vue\ncategories: vue\nphotos:\n---\n\n## 说在前面\n\n我们都知道，用django做后端服务时，对于post请求提交表单时总是需要csrftoken的验证，那么我们如何在vue中使用axios发起请求时全局在headers里面设置csrftoken呢？以及全局设置Authorization?\n\n## 设置\n\n其实非常简单，在main.js中设置下即可，示例代码如下:\n\n```js\nimport Vue from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\nimport './plugins/axios.js'\nimport './plugins/cookies.js'\n\nVue.config.productionTip = false;\n\nnew Vue({\n    router,\n    store,\n    render: h => h(App),\n\t//进入页面时\n    created() {\n        // 拦截axios请求\n        this.axios.interceptors.request.use(\n            config => {\n                // 设置登录验证token\n                const token = this.$store.state.userInfo.Authorization;\n                if (token) {\n                    config.headers.Authorization = token;\n                }\n\n                // 设置csrftoken\n                const csrftoken = this.$cookies.get('csrftoken');\n                if (csrftoken) {\n                    config.headers['X-CSRFTOKEN'] = csrftoken;\n                }\n                return config\n            },\n            error => {\n                return Promise.reject(error)\n            });\n    }\n}).$mount('#app');\n```\n\n另外贴下我的store.js:\n\n```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n    state: {\n        userInfo: {\n            username: \"\",  // 用户名\n            Authorization: \"\",  // 用户登录的验证Token\n        },\n    },\n    mutations: {\n        // 更新用户信息\n        updateUserInfo(state, userInfo) {\n            state.userInfo.Authorization = userInfo.Authorization;\n            state.userInfo.username = userInfo.username;\n        }\n    },\n    actions: {\n        updateUserInfo({commit}, userInfo) {\n            commit('updateUserInfo', userInfo)\n        }\n    },\n})\n```\n\n\n\n## 考虑封装axios\n\n### 封装进api\n\n-   创建api文件夹,其中创建一个`api.js`\n-   编辑plugins下的`axios.js`\n\n```js\nimport Vue from 'vue'\nimport axios from 'axios'\nimport VueAxios from 'vue-axios'\nimport store from '../store'\n\nVue.use(VueAxios, axios);\n\n// base url\n// Vue.axios.defaults.baseURL = 'http://127.0.0.1:9001';\n\n// 请求超时时间\nVue.axios.defaults.timeout = 10000;\n\n// 请求拦截器\nVue.axios.interceptors.request.use(\n    config => {\n        // 设置登录验证token\n        const token = store.state.userInfo.Authorization;\n        if (token) {\n            config.headers.Authorization = token;\n        }\n        // 设置csrftoken\n        const csrftoken = Vue.cookies.get('csrftoken');\n        if (csrftoken) {\n            config.headers['X-CSRFTOKEN'] = csrftoken;\n        }\n        console.log(token, csrftoken);\n        return config\n    },\n    error => {\n        return Promise.reject(error)\n    });\n\n\n// 响应拦截器\nVue.axios.interceptors.response.use(\n    // 请求成功\n    res => Promise.resolve(res),\n    // 请求失败\n    error => {\n        // 请求已发出，但是不在2xx的范围\n        console.log(error);  // 这儿可以用UI插件做个弹窗提醒\n        return Promise.reject(error);\n    });\n```\n\n-   编辑`api.js`\n\n```js\nimport Vue from 'vue'\n\n// 登录接口\nexport const login = data => Vue.axios.post(\n    '/api/xxxx/login/', data\n);\n\n// 获取新闻列表接口\nexport const getNews = params => Vue.axios.get(\n    '/api/xxxx/newsflashmaterial/?ordering=-create_time', params\n);\n```\n\n-   我的`main.js`\n\n```js\nimport Vue from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\nimport './plugins/element.js'\nimport './plugins/cookies.js'\nimport './plugins/axios.js'\n\n\n.....\n```\n\n-   使用\n\n```js\n<script>\n    import {login} from \"../api/api\"\n\n    export default {\n        name: \"Login\",\n        data() {\n            return {\n                formLabelAlign: {\n                    username: '',\n                    password: ''\n                }\n            }\n        },\n        methods: {\n            submitForm() {\n                login(this.formLabelAlign).then((response) => {\n                    // 登录成功之后的操作\n                })\n            },\n        }\n    }\n</script>\n```\n\n## 完成","slug":"vue中axios全局设置csrftoken以及Authorization","published":1,"updated":"2018-12-12T06:49:11.111Z","comments":1,"layout":"post","link":"","_id":"cjwztf1vl000rvifcohp0kllu","content":"<h2 id=\"说在前面\">说在前面</h2>\n<p>我们都知道，用django做后端服务时，对于post请求提交表单时总是需要csrftoken的验证，那么我们如何在vue中使用axios发起请求时全局在headers里面设置csrftoken呢？以及全局设置Authorization?</p>\n<h2 id=\"设置\">设置</h2>\n<p>其实非常简单，在main.js中设置下即可，示例代码如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./plugins/axios.js'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./plugins/cookies.js'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    router,</span><br><span class=\"line\">    store,</span><br><span class=\"line\">    render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App),</span><br><span class=\"line\">\t<span class=\"comment\">//进入页面时</span></span><br><span class=\"line\">    created() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 拦截axios请求</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.axios.interceptors.request.use(</span><br><span class=\"line\">            config =&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 设置登录验证token</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> token = <span class=\"keyword\">this</span>.$store.state.userInfo.Authorization;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (token) &#123;</span><br><span class=\"line\">                    config.headers.Authorization = token;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 设置csrftoken</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> csrftoken = <span class=\"keyword\">this</span>.$cookies.get(<span class=\"string\">'csrftoken'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (csrftoken) &#123;</span><br><span class=\"line\">                    config.headers[<span class=\"string\">'X-CSRFTOKEN'</span>] = csrftoken;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> config</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            error =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error)</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>);</span><br></pre></td></tr></table></figure>\n<p>另外贴下我的store.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        userInfo: &#123;</span><br><span class=\"line\">            username: <span class=\"string\">\"\"</span>,  <span class=\"comment\">// 用户名</span></span><br><span class=\"line\">            Authorization: <span class=\"string\">\"\"</span>,  <span class=\"comment\">// 用户登录的验证Token</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mutations: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 更新用户信息</span></span><br><span class=\"line\">        updateUserInfo(state, userInfo) &#123;</span><br><span class=\"line\">            state.userInfo.Authorization = userInfo.Authorization;</span><br><span class=\"line\">            state.userInfo.username = userInfo.username;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    actions: &#123;</span><br><span class=\"line\">        updateUserInfo(&#123;commit&#125;, userInfo) &#123;</span><br><span class=\"line\">            commit(<span class=\"string\">'updateUserInfo'</span>, userInfo)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"考虑封装axios\">考虑封装axios</h2>\n<h3 id=\"封装进api\">封装进api</h3>\n<ul>\n<li>创建api文件夹,其中创建一个<code>api.js</code></li>\n<li>编辑plugins下的<code>axios.js</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueAxios <span class=\"keyword\">from</span> <span class=\"string\">'vue-axios'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'../store'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueAxios, axios);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// base url</span></span><br><span class=\"line\"><span class=\"comment\">// Vue.axios.defaults.baseURL = 'http://127.0.0.1:9001';</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求超时时间</span></span><br><span class=\"line\">Vue.axios.defaults.timeout = <span class=\"number\">10000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求拦截器</span></span><br><span class=\"line\">Vue.axios.interceptors.request.use(</span><br><span class=\"line\">    config =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置登录验证token</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> token = store.state.userInfo.Authorization;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (token) &#123;</span><br><span class=\"line\">            config.headers.Authorization = token;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 设置csrftoken</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> csrftoken = Vue.cookies.get(<span class=\"string\">'csrftoken'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (csrftoken) &#123;</span><br><span class=\"line\">            config.headers[<span class=\"string\">'X-CSRFTOKEN'</span>] = csrftoken;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(token, csrftoken);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> config</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    error =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 响应拦截器</span></span><br><span class=\"line\">Vue.axios.interceptors.response.use(</span><br><span class=\"line\">    <span class=\"comment\">// 请求成功</span></span><br><span class=\"line\">    res =&gt; <span class=\"built_in\">Promise</span>.resolve(res),</span><br><span class=\"line\">    <span class=\"comment\">// 请求失败</span></span><br><span class=\"line\">    error =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 请求已发出，但是不在2xx的范围</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);  <span class=\"comment\">// 这儿可以用UI插件做个弹窗提醒</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编辑<code>api.js</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 登录接口</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> login = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> Vue.axios.post(</span><br><span class=\"line\">    <span class=\"string\">'/api/xxxx/login/'</span>, data</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取新闻列表接口</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getNews = <span class=\"function\"><span class=\"params\">params</span> =&gt;</span> Vue.axios.get(</span><br><span class=\"line\">    <span class=\"string\">'/api/xxxx/newsflashmaterial/?ordering=-create_time'</span>, params</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>我的<code>main.js</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./plugins/element.js'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./plugins/cookies.js'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./plugins/axios.js'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> &#123;login&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"../api/api\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"Login\"</span>,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                formLabelAlign: &#123;</span><br><span class=\"line\">                    username: <span class=\"string\">''</span>,</span><br><span class=\"line\">                    password: <span class=\"string\">''</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            submitForm() &#123;</span><br><span class=\"line\">                login(<span class=\"keyword\">this</span>.formLabelAlign).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 登录成功之后的操作</span></span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"完成\">完成</h2>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"说在前面\">说在前面</h2>\n<p>我们都知道，用django做后端服务时，对于post请求提交表单时总是需要csrftoken的验证，那么我们如何在vue中使用axios发起请求时全局在headers里面设置csrftoken呢？以及全局设置Authorization?</p>\n<h2 id=\"设置\">设置</h2>\n<p>其实非常简单，在main.js中设置下即可，示例代码如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./plugins/axios.js'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./plugins/cookies.js'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    router,</span><br><span class=\"line\">    store,</span><br><span class=\"line\">    render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App),</span><br><span class=\"line\">\t<span class=\"comment\">//进入页面时</span></span><br><span class=\"line\">    created() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 拦截axios请求</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.axios.interceptors.request.use(</span><br><span class=\"line\">            config =&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 设置登录验证token</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> token = <span class=\"keyword\">this</span>.$store.state.userInfo.Authorization;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (token) &#123;</span><br><span class=\"line\">                    config.headers.Authorization = token;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 设置csrftoken</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> csrftoken = <span class=\"keyword\">this</span>.$cookies.get(<span class=\"string\">'csrftoken'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (csrftoken) &#123;</span><br><span class=\"line\">                    config.headers[<span class=\"string\">'X-CSRFTOKEN'</span>] = csrftoken;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> config</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            error =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error)</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>);</span><br></pre></td></tr></table></figure>\n<p>另外贴下我的store.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        userInfo: &#123;</span><br><span class=\"line\">            username: <span class=\"string\">\"\"</span>,  <span class=\"comment\">// 用户名</span></span><br><span class=\"line\">            Authorization: <span class=\"string\">\"\"</span>,  <span class=\"comment\">// 用户登录的验证Token</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mutations: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 更新用户信息</span></span><br><span class=\"line\">        updateUserInfo(state, userInfo) &#123;</span><br><span class=\"line\">            state.userInfo.Authorization = userInfo.Authorization;</span><br><span class=\"line\">            state.userInfo.username = userInfo.username;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    actions: &#123;</span><br><span class=\"line\">        updateUserInfo(&#123;commit&#125;, userInfo) &#123;</span><br><span class=\"line\">            commit(<span class=\"string\">'updateUserInfo'</span>, userInfo)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"考虑封装axios\">考虑封装axios</h2>\n<h3 id=\"封装进api\">封装进api</h3>\n<ul>\n<li>创建api文件夹,其中创建一个<code>api.js</code></li>\n<li>编辑plugins下的<code>axios.js</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueAxios <span class=\"keyword\">from</span> <span class=\"string\">'vue-axios'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'../store'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueAxios, axios);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// base url</span></span><br><span class=\"line\"><span class=\"comment\">// Vue.axios.defaults.baseURL = 'http://127.0.0.1:9001';</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求超时时间</span></span><br><span class=\"line\">Vue.axios.defaults.timeout = <span class=\"number\">10000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求拦截器</span></span><br><span class=\"line\">Vue.axios.interceptors.request.use(</span><br><span class=\"line\">    config =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置登录验证token</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> token = store.state.userInfo.Authorization;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (token) &#123;</span><br><span class=\"line\">            config.headers.Authorization = token;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 设置csrftoken</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> csrftoken = Vue.cookies.get(<span class=\"string\">'csrftoken'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (csrftoken) &#123;</span><br><span class=\"line\">            config.headers[<span class=\"string\">'X-CSRFTOKEN'</span>] = csrftoken;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(token, csrftoken);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> config</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    error =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 响应拦截器</span></span><br><span class=\"line\">Vue.axios.interceptors.response.use(</span><br><span class=\"line\">    <span class=\"comment\">// 请求成功</span></span><br><span class=\"line\">    res =&gt; <span class=\"built_in\">Promise</span>.resolve(res),</span><br><span class=\"line\">    <span class=\"comment\">// 请求失败</span></span><br><span class=\"line\">    error =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 请求已发出，但是不在2xx的范围</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);  <span class=\"comment\">// 这儿可以用UI插件做个弹窗提醒</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编辑<code>api.js</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 登录接口</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> login = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> Vue.axios.post(</span><br><span class=\"line\">    <span class=\"string\">'/api/xxxx/login/'</span>, data</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取新闻列表接口</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getNews = <span class=\"function\"><span class=\"params\">params</span> =&gt;</span> Vue.axios.get(</span><br><span class=\"line\">    <span class=\"string\">'/api/xxxx/newsflashmaterial/?ordering=-create_time'</span>, params</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>我的<code>main.js</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./plugins/element.js'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./plugins/cookies.js'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./plugins/axios.js'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> &#123;login&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"../api/api\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">        name: <span class=\"string\">\"Login\"</span>,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                formLabelAlign: &#123;</span><br><span class=\"line\">                    username: <span class=\"string\">''</span>,</span><br><span class=\"line\">                    password: <span class=\"string\">''</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">            submitForm() &#123;</span><br><span class=\"line\">                login(<span class=\"keyword\">this</span>.formLabelAlign).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 登录成功之后的操作</span></span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"完成\">完成</h2>\n"},{"title":"vue使用axios","subtitle":"vue-use-axios","original":false,"date":"2018-11-27T02:23:02.000Z","description":"vue使用axios发起http请求","photos":[],"_content":"\n## 安装\n\n```reStructuredText\nnpm install --save axios vue-axios\n```\n\n## 引入\n\n```vue\nimport Vue from 'vue'\nimport axios from 'axios'\nimport VueAxios from 'vue-axios'\n\naxios.defaults.baseURL='http://localhost:8000';  // 可以设置baseURL\nVue.use(VueAxios, axios)\n```\n\n## 使用\n\n```vue\ngetNewsList(){\n      this.axios.get('api/getNewsList').then((response)=>{\n        this.newsList=response.data.data;\n      }).catch((response)=>{\n        console.log(response);\n      })\n}\n```\n\n## 参考\n\n[vue全局使用axios的方法](https://segmentfault.com/a/1190000013128858)\n\n[vue-axios](https://www.npmjs.com/package/vue-axios)\n\n[vue添加axios，并且指定baseurl](https://blog.csdn.net/wild46cat/article/details/78006280)","source":"_posts/vue使用axios.md","raw":"---\ntitle: vue使用axios\nsubtitle: vue-use-axios\noriginal: false\ndate: 2018-11-27 10:23:02\ndescription: vue使用axios发起http请求\ntags: vue\ncategories: vue\nphotos:\n---\n\n## 安装\n\n```reStructuredText\nnpm install --save axios vue-axios\n```\n\n## 引入\n\n```vue\nimport Vue from 'vue'\nimport axios from 'axios'\nimport VueAxios from 'vue-axios'\n\naxios.defaults.baseURL='http://localhost:8000';  // 可以设置baseURL\nVue.use(VueAxios, axios)\n```\n\n## 使用\n\n```vue\ngetNewsList(){\n      this.axios.get('api/getNewsList').then((response)=>{\n        this.newsList=response.data.data;\n      }).catch((response)=>{\n        console.log(response);\n      })\n}\n```\n\n## 参考\n\n[vue全局使用axios的方法](https://segmentfault.com/a/1190000013128858)\n\n[vue-axios](https://www.npmjs.com/package/vue-axios)\n\n[vue添加axios，并且指定baseurl](https://blog.csdn.net/wild46cat/article/details/78006280)","slug":"vue使用axios","published":1,"updated":"2018-12-12T06:49:11.043Z","comments":1,"layout":"post","link":"","_id":"cjwztf1vm000vvifczd27nj66","content":"<h2 id=\"安装\">安装</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save axios vue-axios</span><br></pre></td></tr></table></figure>\n<h2 id=\"引入\">引入</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\">import axios from &apos;axios&apos;</span><br><span class=\"line\">import VueAxios from &apos;vue-axios&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">axios.defaults.baseURL=&apos;http://localhost:8000&apos;;  // 可以设置baseURL</span><br><span class=\"line\">Vue.use(VueAxios, axios)</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\">使用</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getNewsList()&#123;</span><br><span class=\"line\">      this.axios.get(&apos;api/getNewsList&apos;).then((response)=&gt;&#123;</span><br><span class=\"line\">        this.newsList=response.data.data;</span><br><span class=\"line\">      &#125;).catch((response)=&gt;&#123;</span><br><span class=\"line\">        console.log(response);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\">参考</h2>\n<p><a href=\"https://segmentfault.com/a/1190000013128858\" target=\"_blank\" rel=\"noopener\">vue全局使用axios的方法</a></p>\n<p><a href=\"https://www.npmjs.com/package/vue-axios\" target=\"_blank\" rel=\"noopener\">vue-axios</a></p>\n<p><a href=\"https://blog.csdn.net/wild46cat/article/details/78006280\" target=\"_blank\" rel=\"noopener\">vue添加axios，并且指定baseurl</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装\">安装</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save axios vue-axios</span><br></pre></td></tr></table></figure>\n<h2 id=\"引入\">引入</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\">import axios from &apos;axios&apos;</span><br><span class=\"line\">import VueAxios from &apos;vue-axios&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">axios.defaults.baseURL=&apos;http://localhost:8000&apos;;  // 可以设置baseURL</span><br><span class=\"line\">Vue.use(VueAxios, axios)</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\">使用</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getNewsList()&#123;</span><br><span class=\"line\">      this.axios.get(&apos;api/getNewsList&apos;).then((response)=&gt;&#123;</span><br><span class=\"line\">        this.newsList=response.data.data;</span><br><span class=\"line\">      &#125;).catch((response)=&gt;&#123;</span><br><span class=\"line\">        console.log(response);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\">参考</h2>\n<p><a href=\"https://segmentfault.com/a/1190000013128858\" target=\"_blank\" rel=\"noopener\">vue全局使用axios的方法</a></p>\n<p><a href=\"https://www.npmjs.com/package/vue-axios\" target=\"_blank\" rel=\"noopener\">vue-axios</a></p>\n<p><a href=\"https://blog.csdn.net/wild46cat/article/details/78006280\" target=\"_blank\" rel=\"noopener\">vue添加axios，并且指定baseurl</a></p>\n"},{"title":"vue跨域配置","subtitle":"vue-cross-domain","original":true,"date":"2018-11-30T07:16:11.000Z","description":"vue跨域配置","photos":[],"_content":"\n## 开发环境\n\n**如果你使用的是vue-cli3的话，则可按如下配置**\n\n-   在你的项目根目录创建`vue.config.js`文件\n-   在文件中写入如下配置信息:\n\n```js\n// 配置proxy\nmodule.exports = {\n    devServer: {\n        proxy: {\n            '/api': {\n                target: 'https://xxxx.xxxxxxxxxx.com',\n                ws: true,\n                changeOrigin: true\n            },\n        }\n    }\n};\n```\n\n>   参考[devserver-proxy](https://cli.vuejs.org/zh/config/#devserver-proxy)\n\n## 线上环境\n\n**线上通过nginx代理,实现跨域**\n\n```nginx\nserver {\n   listen 80;\n   server_name www.breakering.com;  # 你的域名\n   location / {\n        index index.html;\n        root /home/jacob/study/licaishi_pc/dist;  # vue buil之后dist文件夹位置\n        try_files $uri $uri/ /index.html =404;  # 可以让浏览器在子页面也能刷新，主要是vue-router的路径不是真实路径导致\n   }\n\n   # 用/api来访问其他网站的接口，实现跨域\n   location /api {\n        # 下面三个是跨域的一些设置\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Allow-Methods 'GET, POST, PUT, PATCH, DELETE, OPTIONS';\n        # Access-Control-Allow-Headers需要注意，会屏蔽一些headers，部署时需要注意\n        add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,X-CSRFTOKEN';\n        proxy_pass https://xxxx.xxxxxxxxxx.com/api;  # 其他网站的接口\n   }\n}\n```\n\n\n\n","source":"_posts/vue跨域配置.md","raw":"---\ntitle: vue跨域配置\nsubtitle: vue-cross-domain\noriginal: true\ndate: 2018-11-30 15:16:11\ndescription: vue跨域配置\ntags: vue\ncategories: vue\nphotos:\n---\n\n## 开发环境\n\n**如果你使用的是vue-cli3的话，则可按如下配置**\n\n-   在你的项目根目录创建`vue.config.js`文件\n-   在文件中写入如下配置信息:\n\n```js\n// 配置proxy\nmodule.exports = {\n    devServer: {\n        proxy: {\n            '/api': {\n                target: 'https://xxxx.xxxxxxxxxx.com',\n                ws: true,\n                changeOrigin: true\n            },\n        }\n    }\n};\n```\n\n>   参考[devserver-proxy](https://cli.vuejs.org/zh/config/#devserver-proxy)\n\n## 线上环境\n\n**线上通过nginx代理,实现跨域**\n\n```nginx\nserver {\n   listen 80;\n   server_name www.breakering.com;  # 你的域名\n   location / {\n        index index.html;\n        root /home/jacob/study/licaishi_pc/dist;  # vue buil之后dist文件夹位置\n        try_files $uri $uri/ /index.html =404;  # 可以让浏览器在子页面也能刷新，主要是vue-router的路径不是真实路径导致\n   }\n\n   # 用/api来访问其他网站的接口，实现跨域\n   location /api {\n        # 下面三个是跨域的一些设置\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Allow-Methods 'GET, POST, PUT, PATCH, DELETE, OPTIONS';\n        # Access-Control-Allow-Headers需要注意，会屏蔽一些headers，部署时需要注意\n        add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,X-CSRFTOKEN';\n        proxy_pass https://xxxx.xxxxxxxxxx.com/api;  # 其他网站的接口\n   }\n}\n```\n\n\n\n","slug":"vue跨域配置","published":1,"updated":"2018-12-13T03:30:40.410Z","comments":1,"layout":"post","link":"","_id":"cjwztf1vn000xvifchal7q921","content":"<h2 id=\"开发环境\">开发环境</h2>\n<p><strong>如果你使用的是vue-cli3的话，则可按如下配置</strong></p>\n<ul>\n<li>在你的项目根目录创建<code>vue.config.js</code>文件</li>\n<li>在文件中写入如下配置信息:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置proxy</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        proxy: &#123;</span><br><span class=\"line\">            <span class=\"string\">'/api'</span>: &#123;</span><br><span class=\"line\">                target: <span class=\"string\">'https://xxxx.xxxxxxxxxx.com'</span>,</span><br><span class=\"line\">                ws: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                changeOrigin: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考<a href=\"https://cli.vuejs.org/zh/config/#devserver-proxy\" target=\"_blank\" rel=\"noopener\">devserver-proxy</a></p>\n</blockquote>\n<h2 id=\"线上环境\">线上环境</h2>\n<p><strong>线上通过nginx代理,实现跨域</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">   <span class=\"attribute\">server_name</span> www.breakering.com;  <span class=\"comment\"># 你的域名</span></span><br><span class=\"line\">   <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.html;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /home/jacob/study/licaishi_pc/dist;  <span class=\"comment\"># vue buil之后dist文件夹位置</span></span><br><span class=\"line\">        <span class=\"attribute\">try_files</span> <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.html =<span class=\"number\">404</span>;  <span class=\"comment\"># 可以让浏览器在子页面也能刷新，主要是vue-router的路径不是真实路径导致</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\"># 用/api来访问其他网站的接口，实现跨域</span></span><br><span class=\"line\">   <span class=\"attribute\">location</span> /api &#123;</span><br><span class=\"line\">        <span class=\"comment\"># 下面三个是跨域的一些设置</span></span><br><span class=\"line\">        <span class=\"attribute\">add_header</span> Access-Control-Allow-Origin *;</span><br><span class=\"line\">        <span class=\"attribute\">add_header</span> Access-Control-Allow-Methods <span class=\"string\">'GET, POST, PUT, PATCH, DELETE, OPTIONS'</span>;</span><br><span class=\"line\">        <span class=\"comment\"># Access-Control-Allow-Headers需要注意，会屏蔽一些headers，部署时需要注意</span></span><br><span class=\"line\">        <span class=\"attribute\">add_header</span> Access-Control-Allow-Headers <span class=\"string\">'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,X-CSRFTOKEN'</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> https://xxxx.xxxxxxxxxx.com/api;  <span class=\"comment\"># 其他网站的接口</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"开发环境\">开发环境</h2>\n<p><strong>如果你使用的是vue-cli3的话，则可按如下配置</strong></p>\n<ul>\n<li>在你的项目根目录创建<code>vue.config.js</code>文件</li>\n<li>在文件中写入如下配置信息:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置proxy</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        proxy: &#123;</span><br><span class=\"line\">            <span class=\"string\">'/api'</span>: &#123;</span><br><span class=\"line\">                target: <span class=\"string\">'https://xxxx.xxxxxxxxxx.com'</span>,</span><br><span class=\"line\">                ws: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                changeOrigin: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考<a href=\"https://cli.vuejs.org/zh/config/#devserver-proxy\" target=\"_blank\" rel=\"noopener\">devserver-proxy</a></p>\n</blockquote>\n<h2 id=\"线上环境\">线上环境</h2>\n<p><strong>线上通过nginx代理,实现跨域</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">   <span class=\"attribute\">server_name</span> www.breakering.com;  <span class=\"comment\"># 你的域名</span></span><br><span class=\"line\">   <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.html;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /home/jacob/study/licaishi_pc/dist;  <span class=\"comment\"># vue buil之后dist文件夹位置</span></span><br><span class=\"line\">        <span class=\"attribute\">try_files</span> <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.html =<span class=\"number\">404</span>;  <span class=\"comment\"># 可以让浏览器在子页面也能刷新，主要是vue-router的路径不是真实路径导致</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\"># 用/api来访问其他网站的接口，实现跨域</span></span><br><span class=\"line\">   <span class=\"attribute\">location</span> /api &#123;</span><br><span class=\"line\">        <span class=\"comment\"># 下面三个是跨域的一些设置</span></span><br><span class=\"line\">        <span class=\"attribute\">add_header</span> Access-Control-Allow-Origin *;</span><br><span class=\"line\">        <span class=\"attribute\">add_header</span> Access-Control-Allow-Methods <span class=\"string\">'GET, POST, PUT, PATCH, DELETE, OPTIONS'</span>;</span><br><span class=\"line\">        <span class=\"comment\"># Access-Control-Allow-Headers需要注意，会屏蔽一些headers，部署时需要注意</span></span><br><span class=\"line\">        <span class=\"attribute\">add_header</span> Access-Control-Allow-Headers <span class=\"string\">'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,X-CSRFTOKEN'</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> https://xxxx.xxxxxxxxxx.com/api;  <span class=\"comment\"># 其他网站的接口</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Django常见错误解决办法","subtitle":"django-errors","date":"2018-11-19T06:10:51.000Z","description":"Django常见错误解决办法","photos":[],"original":true,"_content":"1. ProgrammingError: relation \"default_cache_table\" does not exist\n\n```text\n......\ndjango.db.utils.ProgrammingError: relation \"default_cache_table\" does not exist\nLINE 1: SELECT cache_key, value, expires FROM \"default_cache_table\" WHERE ca...\n```\n\n类似上述这种错误，可以用下面这句命令解决:\n\n```text\npython manage.py createcachetable\n```\n\n","source":"_posts/Django常见错误解决办法.md","raw":"---\ntitle: Django常见错误解决办法\nsubtitle: django-errors\ndate: 2018-11-19 14:10:51\ndescription: Django常见错误解决办法\ntags: Django\ncategories: Django\nphotos:\noriginal: true\n---\n1. ProgrammingError: relation \"default_cache_table\" does not exist\n\n```text\n......\ndjango.db.utils.ProgrammingError: relation \"default_cache_table\" does not exist\nLINE 1: SELECT cache_key, value, expires FROM \"default_cache_table\" WHERE ca...\n```\n\n类似上述这种错误，可以用下面这句命令解决:\n\n```text\npython manage.py createcachetable\n```\n\n","slug":"Django常见错误解决办法","published":1,"updated":"2018-12-12T10:42:07.247Z","comments":1,"layout":"post","link":"","_id":"cjwztf1vp0011vifcvj6p1c76","content":"<ol>\n<li>ProgrammingError: relation “default_cache_table” does not exist</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\">django.db.utils.ProgrammingError: relation &quot;default_cache_table&quot; does not exist</span><br><span class=\"line\">LINE 1: SELECT cache_key, value, expires FROM &quot;default_cache_table&quot; WHERE ca...</span><br></pre></td></tr></table></figure>\n<p>类似上述这种错误，可以用下面这句命令解决:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py createcachetable</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>ProgrammingError: relation “default_cache_table” does not exist</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\">django.db.utils.ProgrammingError: relation &quot;default_cache_table&quot; does not exist</span><br><span class=\"line\">LINE 1: SELECT cache_key, value, expires FROM &quot;default_cache_table&quot; WHERE ca...</span><br></pre></td></tr></table></figure>\n<p>类似上述这种错误，可以用下面这句命令解决:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py createcachetable</span><br></pre></td></tr></table></figure>\n"},{"title":"内网穿透frp","subtitle":"frp","description":"简单地说，内网穿透依赖于 NAT 原理，根据 NAT 设备不同大致可分为以下 4 大类(前3种NAT类型可统称为cone类型)","date":"2018-09-28T12:58:27.000Z","original":true,"_content":"# 一、内网穿透原理\n简单地说，内网穿透依赖于 NAT 原理，根据 NAT 设备不同大致可分为以下 4 大类(前3种NAT类型可统称为cone类型)：\n* 全克隆(Full Cone)：NAT 把所有来自相同内部 IP 地址和端口的请求映射到相同的外部 IP 地址和端口上，任何一个外部主机均可通过该映射反向发送 IP 包到该内部主机\n* 限制性克隆(Restricted Cone)：NAT 把所有来自相同内部 IP 地址和端口的请求映射到相同的外部 IP 地址和端口；但是，只有当内部主机先给 IP 地址为 X 的外部主机发送 IP 包时，该外部主机才能向该内部主机发送 IP 包\n* 端口限制性克隆(Port Restricted Cone)：端口限制性克隆与限制性克隆类似，只是多了端口号的限制，即只有内部主机先向 IP 地址为 X，端口号为 P 的外部主机发送1个 IP 包,该外部主机才能够把源端口号为 P 的 IP 包发送给该内部主机\n* 对称式NAT(Symmetric NAT)：这种类型的 NAT 与上述3种类型的不同，在于当同一内部主机使用相同的端口与不同地址的外部主机进行通信时， NAT 对该内部主机的映射会有所不同；对称式 NAT 不保证所有会话中的私有地址和公开 IP 之间绑定的一致性；相反，它为每个新的会话分配一个新的端口号；导致此种 NAT 根本没法穿透\n\n内网穿透的作用就是利用以上规则，创建一条从外部服务器到内部设备的 “隧道”，具体的 NAT 原理等可参考 内网打洞、网络地址转换NAT原理。\n\n# 二、环境准备\n实际上根据以上 NAT 规则，基本上大部分家用设备和运营商上级路由等都在前三种规则之中，所以只需要借助成熟的内网穿透工具即可，以下为本次穿透环境\n\n* 最新版本 frp\n* 一台公网 VPS 服务器\n* 内网一台服务器，最好 Linux 系统\n\n# 三、服务端搭建\n服务器作为公网访问唯一的固定地址，即作为 server 端；内网客户端作为 client 端，会主动向 server 端创建连接，此时再从 server 端反向发送数据即可实现内网穿透\n\n## 3.1). 下载并解压frp\n可以查看[releases](https://github.com/fatedier/frp/releases)获取最新的版本,选好版本之后使用以下命令:\n\n```\nwget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_amd64.tar.gz\ntar -zxvf frp_0.21.0_linux_amd64.tar.gz\ncd frp_0.21.0_linux_amd64\n```\n\n## 3.2). 编辑frps.ini\n```\n[common]                                                                                                                                                                                                \n# frp 监听地址\nbind_addr = 0.0.0.0\nbind_port = 7000\n\n# 如果需要代理 web(http) 服务，则开启此端口\nvhost_http_port = 8080\nvhost_https_port = 4443\n\n# frp 控制面板\ndashboard_port = 7500\ndashboard_user = user\ndashboard_pwd = pwd\n\n# 默认日志输出位置(这里输出到标准输出)\nlog_file = /tmp/frps.log\n# 日志级别，支持: debug, info, warn, error\nlog_level = info\nlog_max_days = 3\n\n# 是否开启特权模式(特权模式下，客户端更改配置无需更新服务端)\nprivilege_mode = true\n# 授权 token 建议随机生成\nprivilege_token = cc23*********************d072734\n# 特权模式下允许分配的端口(避免端口滥用)\nprivilege_allow_ports = 4000-50000\n\n# 后端连接池最大连接数量\nmax_pool_count = 100\n\n# 口令超时时间\nauthentication_timeout = 900\n\n# 子域名(特权模式下将 *.xxxx.com 解析到公网服务器)\nsubdomain_host = xxxx.com\n```\n\n**其他具体配置说明请参考[frp README](https://github.com/fatedier/frp/blob/master/README_zh.md) 文档**\n\n## 3.3). 启动frp server\n设置完成后执行 ./frps -c frps.ini 启动即可\n\n**ps:当然也可以使用supervisor来管理**\n\n# 四、客户端配置\n客户端作为发起链接的主动方，只需要正确配置服务器地址，以及要映射客户端的哪些服务端口等即可\n\n## 4.1). 下载并解压frp\n```\nwget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_amd64.tar.gz\ntar -zxvf frp_0.21.0_linux_amd64.tar.gz\ncd frp_0.21.0_linux_amd64\n```\n\n## 4.2). 编辑frpc.ini\n\n```\n[common]\nserver_addr = 127.0.0.1\nserver_port = 7000\n# console or real logFile path like ./frpc.log\nlog_file = /tmp/frpc.log\n\n# debug, info, warn, error\nlog_level = debug\n\nlog_max_days = 3\n\n# 特权模式，要和服务器端的配置一致\nprivilege_token = cc23*********************d072734\n\n\n[gitlab]\ntype = http\nlocal_port = 80\nsubdomain = gitlab  # 这样只要访问http://gitlab.xxxx.com:8080即可访问到该客户端的gitlab服务\nuse_gzip = true\n\n\n[gitlab_ssh]\ntype = tcp \nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 8081\n```\n**其他具体配置说明请参考[frp README](https://github.com/fatedier/frp/blob/master/README_zh.md) 文档**\n\n## 4.3). 启动frp client\n设置完成后执行 ./frpc -c frpc.ini 启动即可\n\n**ps:当然也可以使用supervisor来管理**\n\n# 五、测试\n服务端和客户端同时开启完成后，即可访问 http://127.0.0.1:7500 进入 frp 控制面板，如下\n![](/images/1046366-20180927105622574-1652030646.png)\n![](/images/1046366-20180927105631267-34167117.png)\n此时通过 ssh root@127.0.0.1 -p 8081 即可ssh到gitlab，通过访问http://gitlab.xxxx.com:8080 即可访问gitlab服务\n\n# 六、GitLab通过frp代理\n通过上述配置，确实可以通过 http://gitlab.xxxx.com:8080 访问gitlab服务,但是你会发现缺少静态文件,因为gitlab的静态文件是nginx代理的，走的tcp协议,需要一种解决方案。\n\n**经测试可以在gitlab服务器配置如下nginx解决**\n\n```nginx\nserver {\n    listen 80;\n\n    location / {\n        proxy_pass http://127.0.0.1:8080;\n    }\n\n    location /assets {\n        alias /opt/gitlab/embedded/service/gitlab-rails/public/assets;\n    }\n}\n```\n\n**公网服务器nginx如下设置**\n\n```nginx\nserver {\n    listen  80;\n    server_name  gitlab.xxxx.com;\n    location / {\n        proxy_pass http://gitlab.geekfinancer.com:8080;\n    }\n}\n```\n这样即可通过 http://gitlab.xxxx.com 正常访问内网的gitlab了\n\n但是这样还没结束，你会发现外网通过git clone http://gitlab.xxxx.com/zhuqian/licaishi.git ,根本没法正常克隆仓库，那有啥用啊，别急，咋们还可以用ssh方式啊。\n\n上面我们已经配置gitlab的22端口映射到服务器的8081端口了，所以可以这样克隆:\n\n```\ngit clone ssh://git@127.0.0.1:8081/zhuqian/licaishi.git\n# 或者\ngit clone ssh://git@gitlab.xxxx.com:8081/zhuqian/licaishi.git\n```\n\n对于pip install的话，可以这样：\n\n```\npip install git+ssh://git@127.0.0.1:8081/zhuqian/algorithm.git\n# 或者\npip install git+ssh://git@gitlab.xxxx.com:8081/zhuqian/algorithm.git\n```\n\n你以为就这样完了，还没有，我们想要直接能在gitlab项目首页直接能够显示git访问方法，效果如下:\n![](/images/1046366-20180927105727421-1721871308.png)\n\n要实现此效果，只需配置下`/etc/gitlab/gitlab.rb`即可：\n\n```\n...\nexternal_url 'http://gitlab.xxxx.com'\n...\n\ngitlab_rails['gitlab_shell_ssh_port'] = 8081\n...\n```\n>> 另外需要注意下`nginx['listen_addresses'] = ['192.168.10.60']`，需要对应到本地的ip地址\n\n配置完之后:\n\n```\ngitlab-ctl reconfigure\n```\n然后通过域名访问gitlab即可实现上述效果了，只不过http方式目前还无法解决。\n\n# 七、由mtu引起的无法访问的问题\n如果frp的admin界面一切正常，但是就是无法获取数据\n\n![](/images/1046366-20180927105741148-1074788234.png)\n\n那么极有可能是你本地的网络最大分片小于服务器的最大分片，导致数据无法发送出去,解决办法是减小服务器的mtu:\n\n```\nsudo ifconfig eth0 mtu 1000 up\n```\n\n其他修改mtu的方式请自行google。\n\n# 八、References:\n\n1. [利用 frp 进行内网穿透](https://mritd.me/2017/01/21/use-frp-for-internal-network-wear/)\n","source":"_posts/内网穿透frp.md","raw":"---\ntitle: 内网穿透frp\nsubtitle: frp\ndescription: 简单地说，内网穿透依赖于 NAT 原理，根据 NAT 设备不同大致可分为以下 4 大类(前3种NAT类型可统称为cone类型)\ndate: 2018-09-28 20:58:27\ntags: \ncategories: 内网穿透\noriginal: true\n---\n# 一、内网穿透原理\n简单地说，内网穿透依赖于 NAT 原理，根据 NAT 设备不同大致可分为以下 4 大类(前3种NAT类型可统称为cone类型)：\n* 全克隆(Full Cone)：NAT 把所有来自相同内部 IP 地址和端口的请求映射到相同的外部 IP 地址和端口上，任何一个外部主机均可通过该映射反向发送 IP 包到该内部主机\n* 限制性克隆(Restricted Cone)：NAT 把所有来自相同内部 IP 地址和端口的请求映射到相同的外部 IP 地址和端口；但是，只有当内部主机先给 IP 地址为 X 的外部主机发送 IP 包时，该外部主机才能向该内部主机发送 IP 包\n* 端口限制性克隆(Port Restricted Cone)：端口限制性克隆与限制性克隆类似，只是多了端口号的限制，即只有内部主机先向 IP 地址为 X，端口号为 P 的外部主机发送1个 IP 包,该外部主机才能够把源端口号为 P 的 IP 包发送给该内部主机\n* 对称式NAT(Symmetric NAT)：这种类型的 NAT 与上述3种类型的不同，在于当同一内部主机使用相同的端口与不同地址的外部主机进行通信时， NAT 对该内部主机的映射会有所不同；对称式 NAT 不保证所有会话中的私有地址和公开 IP 之间绑定的一致性；相反，它为每个新的会话分配一个新的端口号；导致此种 NAT 根本没法穿透\n\n内网穿透的作用就是利用以上规则，创建一条从外部服务器到内部设备的 “隧道”，具体的 NAT 原理等可参考 内网打洞、网络地址转换NAT原理。\n\n# 二、环境准备\n实际上根据以上 NAT 规则，基本上大部分家用设备和运营商上级路由等都在前三种规则之中，所以只需要借助成熟的内网穿透工具即可，以下为本次穿透环境\n\n* 最新版本 frp\n* 一台公网 VPS 服务器\n* 内网一台服务器，最好 Linux 系统\n\n# 三、服务端搭建\n服务器作为公网访问唯一的固定地址，即作为 server 端；内网客户端作为 client 端，会主动向 server 端创建连接，此时再从 server 端反向发送数据即可实现内网穿透\n\n## 3.1). 下载并解压frp\n可以查看[releases](https://github.com/fatedier/frp/releases)获取最新的版本,选好版本之后使用以下命令:\n\n```\nwget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_amd64.tar.gz\ntar -zxvf frp_0.21.0_linux_amd64.tar.gz\ncd frp_0.21.0_linux_amd64\n```\n\n## 3.2). 编辑frps.ini\n```\n[common]                                                                                                                                                                                                \n# frp 监听地址\nbind_addr = 0.0.0.0\nbind_port = 7000\n\n# 如果需要代理 web(http) 服务，则开启此端口\nvhost_http_port = 8080\nvhost_https_port = 4443\n\n# frp 控制面板\ndashboard_port = 7500\ndashboard_user = user\ndashboard_pwd = pwd\n\n# 默认日志输出位置(这里输出到标准输出)\nlog_file = /tmp/frps.log\n# 日志级别，支持: debug, info, warn, error\nlog_level = info\nlog_max_days = 3\n\n# 是否开启特权模式(特权模式下，客户端更改配置无需更新服务端)\nprivilege_mode = true\n# 授权 token 建议随机生成\nprivilege_token = cc23*********************d072734\n# 特权模式下允许分配的端口(避免端口滥用)\nprivilege_allow_ports = 4000-50000\n\n# 后端连接池最大连接数量\nmax_pool_count = 100\n\n# 口令超时时间\nauthentication_timeout = 900\n\n# 子域名(特权模式下将 *.xxxx.com 解析到公网服务器)\nsubdomain_host = xxxx.com\n```\n\n**其他具体配置说明请参考[frp README](https://github.com/fatedier/frp/blob/master/README_zh.md) 文档**\n\n## 3.3). 启动frp server\n设置完成后执行 ./frps -c frps.ini 启动即可\n\n**ps:当然也可以使用supervisor来管理**\n\n# 四、客户端配置\n客户端作为发起链接的主动方，只需要正确配置服务器地址，以及要映射客户端的哪些服务端口等即可\n\n## 4.1). 下载并解压frp\n```\nwget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_amd64.tar.gz\ntar -zxvf frp_0.21.0_linux_amd64.tar.gz\ncd frp_0.21.0_linux_amd64\n```\n\n## 4.2). 编辑frpc.ini\n\n```\n[common]\nserver_addr = 127.0.0.1\nserver_port = 7000\n# console or real logFile path like ./frpc.log\nlog_file = /tmp/frpc.log\n\n# debug, info, warn, error\nlog_level = debug\n\nlog_max_days = 3\n\n# 特权模式，要和服务器端的配置一致\nprivilege_token = cc23*********************d072734\n\n\n[gitlab]\ntype = http\nlocal_port = 80\nsubdomain = gitlab  # 这样只要访问http://gitlab.xxxx.com:8080即可访问到该客户端的gitlab服务\nuse_gzip = true\n\n\n[gitlab_ssh]\ntype = tcp \nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 8081\n```\n**其他具体配置说明请参考[frp README](https://github.com/fatedier/frp/blob/master/README_zh.md) 文档**\n\n## 4.3). 启动frp client\n设置完成后执行 ./frpc -c frpc.ini 启动即可\n\n**ps:当然也可以使用supervisor来管理**\n\n# 五、测试\n服务端和客户端同时开启完成后，即可访问 http://127.0.0.1:7500 进入 frp 控制面板，如下\n![](/images/1046366-20180927105622574-1652030646.png)\n![](/images/1046366-20180927105631267-34167117.png)\n此时通过 ssh root@127.0.0.1 -p 8081 即可ssh到gitlab，通过访问http://gitlab.xxxx.com:8080 即可访问gitlab服务\n\n# 六、GitLab通过frp代理\n通过上述配置，确实可以通过 http://gitlab.xxxx.com:8080 访问gitlab服务,但是你会发现缺少静态文件,因为gitlab的静态文件是nginx代理的，走的tcp协议,需要一种解决方案。\n\n**经测试可以在gitlab服务器配置如下nginx解决**\n\n```nginx\nserver {\n    listen 80;\n\n    location / {\n        proxy_pass http://127.0.0.1:8080;\n    }\n\n    location /assets {\n        alias /opt/gitlab/embedded/service/gitlab-rails/public/assets;\n    }\n}\n```\n\n**公网服务器nginx如下设置**\n\n```nginx\nserver {\n    listen  80;\n    server_name  gitlab.xxxx.com;\n    location / {\n        proxy_pass http://gitlab.geekfinancer.com:8080;\n    }\n}\n```\n这样即可通过 http://gitlab.xxxx.com 正常访问内网的gitlab了\n\n但是这样还没结束，你会发现外网通过git clone http://gitlab.xxxx.com/zhuqian/licaishi.git ,根本没法正常克隆仓库，那有啥用啊，别急，咋们还可以用ssh方式啊。\n\n上面我们已经配置gitlab的22端口映射到服务器的8081端口了，所以可以这样克隆:\n\n```\ngit clone ssh://git@127.0.0.1:8081/zhuqian/licaishi.git\n# 或者\ngit clone ssh://git@gitlab.xxxx.com:8081/zhuqian/licaishi.git\n```\n\n对于pip install的话，可以这样：\n\n```\npip install git+ssh://git@127.0.0.1:8081/zhuqian/algorithm.git\n# 或者\npip install git+ssh://git@gitlab.xxxx.com:8081/zhuqian/algorithm.git\n```\n\n你以为就这样完了，还没有，我们想要直接能在gitlab项目首页直接能够显示git访问方法，效果如下:\n![](/images/1046366-20180927105727421-1721871308.png)\n\n要实现此效果，只需配置下`/etc/gitlab/gitlab.rb`即可：\n\n```\n...\nexternal_url 'http://gitlab.xxxx.com'\n...\n\ngitlab_rails['gitlab_shell_ssh_port'] = 8081\n...\n```\n>> 另外需要注意下`nginx['listen_addresses'] = ['192.168.10.60']`，需要对应到本地的ip地址\n\n配置完之后:\n\n```\ngitlab-ctl reconfigure\n```\n然后通过域名访问gitlab即可实现上述效果了，只不过http方式目前还无法解决。\n\n# 七、由mtu引起的无法访问的问题\n如果frp的admin界面一切正常，但是就是无法获取数据\n\n![](/images/1046366-20180927105741148-1074788234.png)\n\n那么极有可能是你本地的网络最大分片小于服务器的最大分片，导致数据无法发送出去,解决办法是减小服务器的mtu:\n\n```\nsudo ifconfig eth0 mtu 1000 up\n```\n\n其他修改mtu的方式请自行google。\n\n# 八、References:\n\n1. [利用 frp 进行内网穿透](https://mritd.me/2017/01/21/use-frp-for-internal-network-wear/)\n","slug":"内网穿透frp","published":1,"updated":"2019-06-14T07:05:01.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwztf1vp0013vifcqs3pff8s","content":"<h1>一、内网穿透原理</h1>\n<p>简单地说，内网穿透依赖于 NAT 原理，根据 NAT 设备不同大致可分为以下 4 大类(前3种NAT类型可统称为cone类型)：</p>\n<ul>\n<li>全克隆(Full Cone)：NAT 把所有来自相同内部 IP 地址和端口的请求映射到相同的外部 IP 地址和端口上，任何一个外部主机均可通过该映射反向发送 IP 包到该内部主机</li>\n<li>限制性克隆(Restricted Cone)：NAT 把所有来自相同内部 IP 地址和端口的请求映射到相同的外部 IP 地址和端口；但是，只有当内部主机先给 IP 地址为 X 的外部主机发送 IP 包时，该外部主机才能向该内部主机发送 IP 包</li>\n<li>端口限制性克隆(Port Restricted Cone)：端口限制性克隆与限制性克隆类似，只是多了端口号的限制，即只有内部主机先向 IP 地址为 X，端口号为 P 的外部主机发送1个 IP 包,该外部主机才能够把源端口号为 P 的 IP 包发送给该内部主机</li>\n<li>对称式NAT(Symmetric NAT)：这种类型的 NAT 与上述3种类型的不同，在于当同一内部主机使用相同的端口与不同地址的外部主机进行通信时， NAT 对该内部主机的映射会有所不同；对称式 NAT 不保证所有会话中的私有地址和公开 IP 之间绑定的一致性；相反，它为每个新的会话分配一个新的端口号；导致此种 NAT 根本没法穿透</li>\n</ul>\n<p>内网穿透的作用就是利用以上规则，创建一条从外部服务器到内部设备的 “隧道”，具体的 NAT 原理等可参考 内网打洞、网络地址转换NAT原理。</p>\n<h1>二、环境准备</h1>\n<p>实际上根据以上 NAT 规则，基本上大部分家用设备和运营商上级路由等都在前三种规则之中，所以只需要借助成熟的内网穿透工具即可，以下为本次穿透环境</p>\n<ul>\n<li>最新版本 frp</li>\n<li>一台公网 VPS 服务器</li>\n<li>内网一台服务器，最好 Linux 系统</li>\n</ul>\n<h1>三、服务端搭建</h1>\n<p>服务器作为公网访问唯一的固定地址，即作为 server 端；内网客户端作为 client 端，会主动向 server 端创建连接，此时再从 server 端反向发送数据即可实现内网穿透</p>\n<h2 id=\"3-1-下载并解压frp\">3.1). 下载并解压frp</h2>\n<p>可以查看<a href=\"https://github.com/fatedier/frp/releases\" target=\"_blank\" rel=\"noopener\">releases</a>获取最新的版本,选好版本之后使用以下命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_amd64.tar.gz</span><br><span class=\"line\">tar -zxvf frp_0.21.0_linux_amd64.tar.gz</span><br><span class=\"line\">cd frp_0.21.0_linux_amd64</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-编辑frps-ini\">3.2). 编辑frps.ini</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]                                                                                                                                                                                                </span><br><span class=\"line\"># frp 监听地址</span><br><span class=\"line\">bind_addr = 0.0.0.0</span><br><span class=\"line\">bind_port = 7000</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果需要代理 web(http) 服务，则开启此端口</span><br><span class=\"line\">vhost_http_port = 8080</span><br><span class=\"line\">vhost_https_port = 4443</span><br><span class=\"line\"></span><br><span class=\"line\"># frp 控制面板</span><br><span class=\"line\">dashboard_port = 7500</span><br><span class=\"line\">dashboard_user = user</span><br><span class=\"line\">dashboard_pwd = pwd</span><br><span class=\"line\"></span><br><span class=\"line\"># 默认日志输出位置(这里输出到标准输出)</span><br><span class=\"line\">log_file = /tmp/frps.log</span><br><span class=\"line\"># 日志级别，支持: debug, info, warn, error</span><br><span class=\"line\">log_level = info</span><br><span class=\"line\">log_max_days = 3</span><br><span class=\"line\"></span><br><span class=\"line\"># 是否开启特权模式(特权模式下，客户端更改配置无需更新服务端)</span><br><span class=\"line\">privilege_mode = true</span><br><span class=\"line\"># 授权 token 建议随机生成</span><br><span class=\"line\">privilege_token = cc23*********************d072734</span><br><span class=\"line\"># 特权模式下允许分配的端口(避免端口滥用)</span><br><span class=\"line\">privilege_allow_ports = 4000-50000</span><br><span class=\"line\"></span><br><span class=\"line\"># 后端连接池最大连接数量</span><br><span class=\"line\">max_pool_count = 100</span><br><span class=\"line\"></span><br><span class=\"line\"># 口令超时时间</span><br><span class=\"line\">authentication_timeout = 900</span><br><span class=\"line\"></span><br><span class=\"line\"># 子域名(特权模式下将 *.xxxx.com 解析到公网服务器)</span><br><span class=\"line\">subdomain_host = xxxx.com</span><br></pre></td></tr></table></figure>\n<p><strong>其他具体配置说明请参考<a href=\"https://github.com/fatedier/frp/blob/master/README_zh.md\" target=\"_blank\" rel=\"noopener\">frp README</a> 文档</strong></p>\n<h2 id=\"3-3-启动frp-server\">3.3). 启动frp server</h2>\n<p>设置完成后执行 ./frps -c frps.ini 启动即可</p>\n<p><strong>ps:当然也可以使用supervisor来管理</strong></p>\n<h1>四、客户端配置</h1>\n<p>客户端作为发起链接的主动方，只需要正确配置服务器地址，以及要映射客户端的哪些服务端口等即可</p>\n<h2 id=\"4-1-下载并解压frp\">4.1). 下载并解压frp</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_amd64.tar.gz</span><br><span class=\"line\">tar -zxvf frp_0.21.0_linux_amd64.tar.gz</span><br><span class=\"line\">cd frp_0.21.0_linux_amd64</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-编辑frpc-ini\">4.2). 编辑frpc.ini</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\">server_addr = 127.0.0.1</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\"># console or real logFile path like ./frpc.log</span><br><span class=\"line\">log_file = /tmp/frpc.log</span><br><span class=\"line\"></span><br><span class=\"line\"># debug, info, warn, error</span><br><span class=\"line\">log_level = debug</span><br><span class=\"line\"></span><br><span class=\"line\">log_max_days = 3</span><br><span class=\"line\"></span><br><span class=\"line\"># 特权模式，要和服务器端的配置一致</span><br><span class=\"line\">privilege_token = cc23*********************d072734</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[gitlab]</span><br><span class=\"line\">type = http</span><br><span class=\"line\">local_port = 80</span><br><span class=\"line\">subdomain = gitlab  # 这样只要访问http://gitlab.xxxx.com:8080即可访问到该客户端的gitlab服务</span><br><span class=\"line\">use_gzip = true</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[gitlab_ssh]</span><br><span class=\"line\">type = tcp </span><br><span class=\"line\">local_ip = 127.0.0.1</span><br><span class=\"line\">local_port = 22</span><br><span class=\"line\">remote_port = 8081</span><br></pre></td></tr></table></figure>\n<p><strong>其他具体配置说明请参考<a href=\"https://github.com/fatedier/frp/blob/master/README_zh.md\" target=\"_blank\" rel=\"noopener\">frp README</a> 文档</strong></p>\n<h2 id=\"4-3-启动frp-client\">4.3). 启动frp client</h2>\n<p>设置完成后执行 ./frpc -c frpc.ini 启动即可</p>\n<p><strong>ps:当然也可以使用supervisor来管理</strong></p>\n<h1>五、测试</h1>\n<p>服务端和客户端同时开启完成后，即可访问 <a href=\"http://127.0.0.1:7500\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:7500</a> 进入 frp 控制面板，如下<br>\n<img src=\"/images/1046366-20180927105622574-1652030646.png\" alt=\"\"><br>\n<img src=\"/images/1046366-20180927105631267-34167117.png\" alt=\"\"><br>\n此时通过 ssh <a href=\"mailto:root@127.0.0.1\" target=\"_blank\" rel=\"noopener\">root@127.0.0.1</a> -p 8081 即可ssh到gitlab，通过访问http://gitlab.xxxx.com:8080 即可访问gitlab服务</p>\n<h1>六、GitLab通过frp代理</h1>\n<p>通过上述配置，确实可以通过 <a href=\"http://gitlab.xxxx.com:8080\" target=\"_blank\" rel=\"noopener\">http://gitlab.xxxx.com:8080</a> 访问gitlab服务,但是你会发现缺少静态文件,因为gitlab的静态文件是nginx代理的，走的tcp协议,需要一种解决方案。</p>\n<p><strong>经测试可以在gitlab服务器配置如下nginx解决</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> /assets &#123;</span><br><span class=\"line\">        <span class=\"attribute\">alias</span> /opt/gitlab/embedded/service/gitlab-rails/public/assets;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>公网服务器nginx如下设置</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>  <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  gitlab.xxxx.com;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://gitlab.geekfinancer.com:8080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样即可通过 <a href=\"http://gitlab.xxxx.com\" target=\"_blank\" rel=\"noopener\">http://gitlab.xxxx.com</a> 正常访问内网的gitlab了</p>\n<p>但是这样还没结束，你会发现外网通过git clone <a href=\"http://gitlab.xxxx.com/zhuqian/licaishi.git\" target=\"_blank\" rel=\"noopener\">http://gitlab.xxxx.com/zhuqian/licaishi.git</a> ,根本没法正常克隆仓库，那有啥用啊，别急，咋们还可以用ssh方式啊。</p>\n<p>上面我们已经配置gitlab的22端口映射到服务器的8081端口了，所以可以这样克隆:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone ssh://git@127.0.0.1:8081/zhuqian/licaishi.git</span><br><span class=\"line\"># 或者</span><br><span class=\"line\">git clone ssh://git@gitlab.xxxx.com:8081/zhuqian/licaishi.git</span><br></pre></td></tr></table></figure>\n<p>对于pip install的话，可以这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install git+ssh://git@127.0.0.1:8081/zhuqian/algorithm.git</span><br><span class=\"line\"># 或者</span><br><span class=\"line\">pip install git+ssh://git@gitlab.xxxx.com:8081/zhuqian/algorithm.git</span><br></pre></td></tr></table></figure>\n<p>你以为就这样完了，还没有，我们想要直接能在gitlab项目首页直接能够显示git访问方法，效果如下:<br>\n<img src=\"/images/1046366-20180927105727421-1721871308.png\" alt=\"\"></p>\n<p>要实现此效果，只需配置下<code>/etc/gitlab/gitlab.rb</code>即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">external_url &apos;http://gitlab.xxxx.com&apos;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">gitlab_rails[&apos;gitlab_shell_ssh_port&apos;] = 8081</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<p>另外需要注意下<code>nginx['listen_addresses'] = ['192.168.10.60']</code>，需要对应到本地的ip地址</p>\n</blockquote>\n</blockquote>\n<p>配置完之后:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n<p>然后通过域名访问gitlab即可实现上述效果了，只不过http方式目前还无法解决。</p>\n<h1>七、由mtu引起的无法访问的问题</h1>\n<p>如果frp的admin界面一切正常，但是就是无法获取数据</p>\n<p><img src=\"/images/1046366-20180927105741148-1074788234.png\" alt=\"\"></p>\n<p>那么极有可能是你本地的网络最大分片小于服务器的最大分片，导致数据无法发送出去,解决办法是减小服务器的mtu:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ifconfig eth0 mtu 1000 up</span><br></pre></td></tr></table></figure>\n<p>其他修改mtu的方式请自行google。</p>\n<h1>八、References:</h1>\n<ol>\n<li><a href=\"https://mritd.me/2017/01/21/use-frp-for-internal-network-wear/\" target=\"_blank\" rel=\"noopener\">利用 frp 进行内网穿透</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1>一、内网穿透原理</h1>\n<p>简单地说，内网穿透依赖于 NAT 原理，根据 NAT 设备不同大致可分为以下 4 大类(前3种NAT类型可统称为cone类型)：</p>\n<ul>\n<li>全克隆(Full Cone)：NAT 把所有来自相同内部 IP 地址和端口的请求映射到相同的外部 IP 地址和端口上，任何一个外部主机均可通过该映射反向发送 IP 包到该内部主机</li>\n<li>限制性克隆(Restricted Cone)：NAT 把所有来自相同内部 IP 地址和端口的请求映射到相同的外部 IP 地址和端口；但是，只有当内部主机先给 IP 地址为 X 的外部主机发送 IP 包时，该外部主机才能向该内部主机发送 IP 包</li>\n<li>端口限制性克隆(Port Restricted Cone)：端口限制性克隆与限制性克隆类似，只是多了端口号的限制，即只有内部主机先向 IP 地址为 X，端口号为 P 的外部主机发送1个 IP 包,该外部主机才能够把源端口号为 P 的 IP 包发送给该内部主机</li>\n<li>对称式NAT(Symmetric NAT)：这种类型的 NAT 与上述3种类型的不同，在于当同一内部主机使用相同的端口与不同地址的外部主机进行通信时， NAT 对该内部主机的映射会有所不同；对称式 NAT 不保证所有会话中的私有地址和公开 IP 之间绑定的一致性；相反，它为每个新的会话分配一个新的端口号；导致此种 NAT 根本没法穿透</li>\n</ul>\n<p>内网穿透的作用就是利用以上规则，创建一条从外部服务器到内部设备的 “隧道”，具体的 NAT 原理等可参考 内网打洞、网络地址转换NAT原理。</p>\n<h1>二、环境准备</h1>\n<p>实际上根据以上 NAT 规则，基本上大部分家用设备和运营商上级路由等都在前三种规则之中，所以只需要借助成熟的内网穿透工具即可，以下为本次穿透环境</p>\n<ul>\n<li>最新版本 frp</li>\n<li>一台公网 VPS 服务器</li>\n<li>内网一台服务器，最好 Linux 系统</li>\n</ul>\n<h1>三、服务端搭建</h1>\n<p>服务器作为公网访问唯一的固定地址，即作为 server 端；内网客户端作为 client 端，会主动向 server 端创建连接，此时再从 server 端反向发送数据即可实现内网穿透</p>\n<h2 id=\"3-1-下载并解压frp\">3.1). 下载并解压frp</h2>\n<p>可以查看<a href=\"https://github.com/fatedier/frp/releases\" target=\"_blank\" rel=\"noopener\">releases</a>获取最新的版本,选好版本之后使用以下命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_amd64.tar.gz</span><br><span class=\"line\">tar -zxvf frp_0.21.0_linux_amd64.tar.gz</span><br><span class=\"line\">cd frp_0.21.0_linux_amd64</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-编辑frps-ini\">3.2). 编辑frps.ini</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]                                                                                                                                                                                                </span><br><span class=\"line\"># frp 监听地址</span><br><span class=\"line\">bind_addr = 0.0.0.0</span><br><span class=\"line\">bind_port = 7000</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果需要代理 web(http) 服务，则开启此端口</span><br><span class=\"line\">vhost_http_port = 8080</span><br><span class=\"line\">vhost_https_port = 4443</span><br><span class=\"line\"></span><br><span class=\"line\"># frp 控制面板</span><br><span class=\"line\">dashboard_port = 7500</span><br><span class=\"line\">dashboard_user = user</span><br><span class=\"line\">dashboard_pwd = pwd</span><br><span class=\"line\"></span><br><span class=\"line\"># 默认日志输出位置(这里输出到标准输出)</span><br><span class=\"line\">log_file = /tmp/frps.log</span><br><span class=\"line\"># 日志级别，支持: debug, info, warn, error</span><br><span class=\"line\">log_level = info</span><br><span class=\"line\">log_max_days = 3</span><br><span class=\"line\"></span><br><span class=\"line\"># 是否开启特权模式(特权模式下，客户端更改配置无需更新服务端)</span><br><span class=\"line\">privilege_mode = true</span><br><span class=\"line\"># 授权 token 建议随机生成</span><br><span class=\"line\">privilege_token = cc23*********************d072734</span><br><span class=\"line\"># 特权模式下允许分配的端口(避免端口滥用)</span><br><span class=\"line\">privilege_allow_ports = 4000-50000</span><br><span class=\"line\"></span><br><span class=\"line\"># 后端连接池最大连接数量</span><br><span class=\"line\">max_pool_count = 100</span><br><span class=\"line\"></span><br><span class=\"line\"># 口令超时时间</span><br><span class=\"line\">authentication_timeout = 900</span><br><span class=\"line\"></span><br><span class=\"line\"># 子域名(特权模式下将 *.xxxx.com 解析到公网服务器)</span><br><span class=\"line\">subdomain_host = xxxx.com</span><br></pre></td></tr></table></figure>\n<p><strong>其他具体配置说明请参考<a href=\"https://github.com/fatedier/frp/blob/master/README_zh.md\" target=\"_blank\" rel=\"noopener\">frp README</a> 文档</strong></p>\n<h2 id=\"3-3-启动frp-server\">3.3). 启动frp server</h2>\n<p>设置完成后执行 ./frps -c frps.ini 启动即可</p>\n<p><strong>ps:当然也可以使用supervisor来管理</strong></p>\n<h1>四、客户端配置</h1>\n<p>客户端作为发起链接的主动方，只需要正确配置服务器地址，以及要映射客户端的哪些服务端口等即可</p>\n<h2 id=\"4-1-下载并解压frp\">4.1). 下载并解压frp</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_amd64.tar.gz</span><br><span class=\"line\">tar -zxvf frp_0.21.0_linux_amd64.tar.gz</span><br><span class=\"line\">cd frp_0.21.0_linux_amd64</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-编辑frpc-ini\">4.2). 编辑frpc.ini</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\">server_addr = 127.0.0.1</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\"># console or real logFile path like ./frpc.log</span><br><span class=\"line\">log_file = /tmp/frpc.log</span><br><span class=\"line\"></span><br><span class=\"line\"># debug, info, warn, error</span><br><span class=\"line\">log_level = debug</span><br><span class=\"line\"></span><br><span class=\"line\">log_max_days = 3</span><br><span class=\"line\"></span><br><span class=\"line\"># 特权模式，要和服务器端的配置一致</span><br><span class=\"line\">privilege_token = cc23*********************d072734</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[gitlab]</span><br><span class=\"line\">type = http</span><br><span class=\"line\">local_port = 80</span><br><span class=\"line\">subdomain = gitlab  # 这样只要访问http://gitlab.xxxx.com:8080即可访问到该客户端的gitlab服务</span><br><span class=\"line\">use_gzip = true</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[gitlab_ssh]</span><br><span class=\"line\">type = tcp </span><br><span class=\"line\">local_ip = 127.0.0.1</span><br><span class=\"line\">local_port = 22</span><br><span class=\"line\">remote_port = 8081</span><br></pre></td></tr></table></figure>\n<p><strong>其他具体配置说明请参考<a href=\"https://github.com/fatedier/frp/blob/master/README_zh.md\" target=\"_blank\" rel=\"noopener\">frp README</a> 文档</strong></p>\n<h2 id=\"4-3-启动frp-client\">4.3). 启动frp client</h2>\n<p>设置完成后执行 ./frpc -c frpc.ini 启动即可</p>\n<p><strong>ps:当然也可以使用supervisor来管理</strong></p>\n<h1>五、测试</h1>\n<p>服务端和客户端同时开启完成后，即可访问 <a href=\"http://127.0.0.1:7500\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:7500</a> 进入 frp 控制面板，如下<br>\n<img src=\"/images/1046366-20180927105622574-1652030646.png\" alt=\"\"><br>\n<img src=\"/images/1046366-20180927105631267-34167117.png\" alt=\"\"><br>\n此时通过 ssh <a href=\"mailto:root@127.0.0.1\" target=\"_blank\" rel=\"noopener\">root@127.0.0.1</a> -p 8081 即可ssh到gitlab，通过访问http://gitlab.xxxx.com:8080 即可访问gitlab服务</p>\n<h1>六、GitLab通过frp代理</h1>\n<p>通过上述配置，确实可以通过 <a href=\"http://gitlab.xxxx.com:8080\" target=\"_blank\" rel=\"noopener\">http://gitlab.xxxx.com:8080</a> 访问gitlab服务,但是你会发现缺少静态文件,因为gitlab的静态文件是nginx代理的，走的tcp协议,需要一种解决方案。</p>\n<p><strong>经测试可以在gitlab服务器配置如下nginx解决</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> /assets &#123;</span><br><span class=\"line\">        <span class=\"attribute\">alias</span> /opt/gitlab/embedded/service/gitlab-rails/public/assets;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>公网服务器nginx如下设置</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>  <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  gitlab.xxxx.com;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://gitlab.geekfinancer.com:8080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样即可通过 <a href=\"http://gitlab.xxxx.com\" target=\"_blank\" rel=\"noopener\">http://gitlab.xxxx.com</a> 正常访问内网的gitlab了</p>\n<p>但是这样还没结束，你会发现外网通过git clone <a href=\"http://gitlab.xxxx.com/zhuqian/licaishi.git\" target=\"_blank\" rel=\"noopener\">http://gitlab.xxxx.com/zhuqian/licaishi.git</a> ,根本没法正常克隆仓库，那有啥用啊，别急，咋们还可以用ssh方式啊。</p>\n<p>上面我们已经配置gitlab的22端口映射到服务器的8081端口了，所以可以这样克隆:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone ssh://git@127.0.0.1:8081/zhuqian/licaishi.git</span><br><span class=\"line\"># 或者</span><br><span class=\"line\">git clone ssh://git@gitlab.xxxx.com:8081/zhuqian/licaishi.git</span><br></pre></td></tr></table></figure>\n<p>对于pip install的话，可以这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install git+ssh://git@127.0.0.1:8081/zhuqian/algorithm.git</span><br><span class=\"line\"># 或者</span><br><span class=\"line\">pip install git+ssh://git@gitlab.xxxx.com:8081/zhuqian/algorithm.git</span><br></pre></td></tr></table></figure>\n<p>你以为就这样完了，还没有，我们想要直接能在gitlab项目首页直接能够显示git访问方法，效果如下:<br>\n<img src=\"/images/1046366-20180927105727421-1721871308.png\" alt=\"\"></p>\n<p>要实现此效果，只需配置下<code>/etc/gitlab/gitlab.rb</code>即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">external_url &apos;http://gitlab.xxxx.com&apos;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">gitlab_rails[&apos;gitlab_shell_ssh_port&apos;] = 8081</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<p>另外需要注意下<code>nginx['listen_addresses'] = ['192.168.10.60']</code>，需要对应到本地的ip地址</p>\n</blockquote>\n</blockquote>\n<p>配置完之后:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n<p>然后通过域名访问gitlab即可实现上述效果了，只不过http方式目前还无法解决。</p>\n<h1>七、由mtu引起的无法访问的问题</h1>\n<p>如果frp的admin界面一切正常，但是就是无法获取数据</p>\n<p><img src=\"/images/1046366-20180927105741148-1074788234.png\" alt=\"\"></p>\n<p>那么极有可能是你本地的网络最大分片小于服务器的最大分片，导致数据无法发送出去,解决办法是减小服务器的mtu:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ifconfig eth0 mtu 1000 up</span><br></pre></td></tr></table></figure>\n<p>其他修改mtu的方式请自行google。</p>\n<h1>八、References:</h1>\n<ol>\n<li><a href=\"https://mritd.me/2017/01/21/use-frp-for-internal-network-wear/\" target=\"_blank\" rel=\"noopener\">利用 frp 进行内网穿透</a></li>\n</ol>\n"},{"title":"在Django中实现queryset级别缓存","subtitle":"django-queryset-cache","date":"2018-11-16T03:50:19.000Z","description":"django中实现queryset级别缓存","original":true,"_content":"## 介绍\n\n实现queryset级别的缓存，不是view层面的，相当于缓存sql查询结果。\n\n## 使用\n\n### 首先在你的django项目中安装依赖的模块\n\n```text\npip install django-cache-machine\n```\n\n### 创建queryset_cache.py文件,文件内容如下\n\n```python\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n# __author__ = \"Breakering\"\n# Date: 18-8-29\n\"\"\"\n依赖django-cache-machine，并在此基础上实现了轻松切换使用queryset级别缓存以及count等缓存\n\"\"\"\nimport contextlib\n\nfrom caching import config\nfrom caching.base import CachingQuerySet, cached_with\nfrom django.db.models.sql import query\n\n\ndef queryset_cache_decorator(always_cached=True):\n    \"\"\"queryset级别缓存的装饰器，可以使得queryset直接从缓存中获取数据\"\"\"\n    def wrapper(func):\n        def inner(self, *args, **kwargs):\n            queryset = func(self, *args, **kwargs)\n            if always_cached:  # 此装饰器默认从cache中获取数据\n                queryset = queryset.from_cache()\n            else:\n                with contextlib.suppress(Exception):\n                    queryset_cache_time = self.request.query_params.get('queryset_cache_time', '')\n                    if queryset_cache_time and queryset_cache_time.isdigit():\n                        queryset = queryset.from_cache(int(queryset_cache_time))\n            return queryset\n        return inner\n    return wrapper\n\n\ndef queryset_cache_count_decorator(always_cached=True):\n    \"\"\"queryset count缓存的装饰器，可以使得queryset直接从缓存中获取count的值\"\"\"\n    def wrapper(func):\n        def inner(self, *args, **kwargs):\n            queryset = func(self, *args, **kwargs)\n            if always_cached:  # 此装饰器默认从cache中获取数据\n                queryset = queryset.cache_count()\n            else:\n                with contextlib.suppress(Exception):\n                    queryset_cache_time = self.request.query_params.get('queryset_cache_time', '')\n                    if queryset_cache_time and queryset_cache_time.isdigit():\n                        queryset = queryset.cache_count(int(queryset_cache_time))\n            return queryset\n        return inner\n    return wrapper\n\n\nclass CachedQuerySet(CachingQuerySet):\n    \"\"\"\n    Return queryset from cache if query_key in cache\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        super(CachedQuerySet, self).__init__(*args, **kwargs)\n        self.timeout = config.NO_CACHE  # 默认直接从数据库取数据\n        self.cache_count_timeout = config.NO_CACHE  # 自定义queryset count的缓存时间\n\n    def _clone(self, *args, **kw):\n        qs = super(CachedQuerySet, self)._clone(*args, **kw)\n        qs.cache_count_timeout = self.cache_count_timeout\n        return qs\n\n    def from_cache(self, timeout=60*60):\n        \"\"\"在queryset中调用此函数则是从缓存中获取,且调用之后返回的仍是queryset\"\"\"\n        self.timeout = timeout\n        return self._clone()\n\n    def cache_count(self, cache_count_timeout=60*60):\n        \"\"\"实现queryset count的缓存,且调用之后返回的仍是queryset\"\"\"\n        self.cache_count_timeout = cache_count_timeout\n        return self._clone()\n\n    # todo values目前的实现方式有BUG，现已取消\n    # def values(self, *fields, **expressions):\n    #     \"\"\"rewrite queryset's values\"\"\"\n    #     if self.timeout == config.NO_CACHE:  # 默认情况下values直接从数据库获取数据\n    #         return super(CachedQuerySet, self).values(*fields, **expressions)\n    #\n    #     clone = self._clone()\n    #     clone.query.set_values(fields)\n    #     key = make_key('values:{key}'.format(key=clone.query_key()))\n    #     val = cache.get(key)\n    #     if val is None:\n    #         val = super(CachedQuerySet, self).values(*fields, **expressions)\n    #         cache.set(key, val, self.timeout)\n    #     return val\n\n    def count(self):\n        \"\"\"自定义queryset的count\"\"\"\n        super_count = super(CachingQuerySet, self).count\n        try:\n            query_string = 'count:%s' % self.query_key()\n        except query.EmptyResultSet:\n            return 0\n        if self.cache_count_timeout:\n            return cached_with(self, super_count, query_string, self.cache_count_timeout)\n        elif self.timeout == config.NO_CACHE or config.TIMEOUT == config.NO_CACHE:\n            return super_count()\n        else:\n            return cached_with(self, super_count, query_string, config.TIMEOUT)\n\n```\n\n### 改造您的model\n\n```python\nfrom django.db import models\nfrom queryset_cache import CachedQuerySet\nfrom caching.base import CachingMixin\n\nclass ModelClassManger(models.Manager):\n\n    def get_queryset(self):\n        return CachedQuerySet(self.model)\n    \nclass ModelClass(CachingMixin, models.Model):\n    objects = ModelClassManger()\n```\n\n### view层只需在get_queryset上加上装饰器即可\n\n```python\n@queryset_cache_count_decorator()\n@queryset_cache_decorator()\ndef get_queryset(self):\n    pass\n```\n\n如果添加了always_cached=False\n\n```python\n@queryset_cache_count_decorator(always_cached=False)\n@queryset_cache_decorator(always_cached=False)\ndef get_queryset(self):\n    pass\n```\n\n则需要在query参数中加上queryset_cache_time=180,参数后面的数字即为缓存的时间。\n","source":"_posts/在Django中实现queryset级别缓存.md","raw":"---\ntitle: 在Django中实现queryset级别缓存\nsubtitle: django-queryset-cache\ndate: 2018-11-16 11:50:19\ndescription: django中实现queryset级别缓存\ntags: Django\ncategories: Django\noriginal: true\n---\n## 介绍\n\n实现queryset级别的缓存，不是view层面的，相当于缓存sql查询结果。\n\n## 使用\n\n### 首先在你的django项目中安装依赖的模块\n\n```text\npip install django-cache-machine\n```\n\n### 创建queryset_cache.py文件,文件内容如下\n\n```python\n#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n# __author__ = \"Breakering\"\n# Date: 18-8-29\n\"\"\"\n依赖django-cache-machine，并在此基础上实现了轻松切换使用queryset级别缓存以及count等缓存\n\"\"\"\nimport contextlib\n\nfrom caching import config\nfrom caching.base import CachingQuerySet, cached_with\nfrom django.db.models.sql import query\n\n\ndef queryset_cache_decorator(always_cached=True):\n    \"\"\"queryset级别缓存的装饰器，可以使得queryset直接从缓存中获取数据\"\"\"\n    def wrapper(func):\n        def inner(self, *args, **kwargs):\n            queryset = func(self, *args, **kwargs)\n            if always_cached:  # 此装饰器默认从cache中获取数据\n                queryset = queryset.from_cache()\n            else:\n                with contextlib.suppress(Exception):\n                    queryset_cache_time = self.request.query_params.get('queryset_cache_time', '')\n                    if queryset_cache_time and queryset_cache_time.isdigit():\n                        queryset = queryset.from_cache(int(queryset_cache_time))\n            return queryset\n        return inner\n    return wrapper\n\n\ndef queryset_cache_count_decorator(always_cached=True):\n    \"\"\"queryset count缓存的装饰器，可以使得queryset直接从缓存中获取count的值\"\"\"\n    def wrapper(func):\n        def inner(self, *args, **kwargs):\n            queryset = func(self, *args, **kwargs)\n            if always_cached:  # 此装饰器默认从cache中获取数据\n                queryset = queryset.cache_count()\n            else:\n                with contextlib.suppress(Exception):\n                    queryset_cache_time = self.request.query_params.get('queryset_cache_time', '')\n                    if queryset_cache_time and queryset_cache_time.isdigit():\n                        queryset = queryset.cache_count(int(queryset_cache_time))\n            return queryset\n        return inner\n    return wrapper\n\n\nclass CachedQuerySet(CachingQuerySet):\n    \"\"\"\n    Return queryset from cache if query_key in cache\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        super(CachedQuerySet, self).__init__(*args, **kwargs)\n        self.timeout = config.NO_CACHE  # 默认直接从数据库取数据\n        self.cache_count_timeout = config.NO_CACHE  # 自定义queryset count的缓存时间\n\n    def _clone(self, *args, **kw):\n        qs = super(CachedQuerySet, self)._clone(*args, **kw)\n        qs.cache_count_timeout = self.cache_count_timeout\n        return qs\n\n    def from_cache(self, timeout=60*60):\n        \"\"\"在queryset中调用此函数则是从缓存中获取,且调用之后返回的仍是queryset\"\"\"\n        self.timeout = timeout\n        return self._clone()\n\n    def cache_count(self, cache_count_timeout=60*60):\n        \"\"\"实现queryset count的缓存,且调用之后返回的仍是queryset\"\"\"\n        self.cache_count_timeout = cache_count_timeout\n        return self._clone()\n\n    # todo values目前的实现方式有BUG，现已取消\n    # def values(self, *fields, **expressions):\n    #     \"\"\"rewrite queryset's values\"\"\"\n    #     if self.timeout == config.NO_CACHE:  # 默认情况下values直接从数据库获取数据\n    #         return super(CachedQuerySet, self).values(*fields, **expressions)\n    #\n    #     clone = self._clone()\n    #     clone.query.set_values(fields)\n    #     key = make_key('values:{key}'.format(key=clone.query_key()))\n    #     val = cache.get(key)\n    #     if val is None:\n    #         val = super(CachedQuerySet, self).values(*fields, **expressions)\n    #         cache.set(key, val, self.timeout)\n    #     return val\n\n    def count(self):\n        \"\"\"自定义queryset的count\"\"\"\n        super_count = super(CachingQuerySet, self).count\n        try:\n            query_string = 'count:%s' % self.query_key()\n        except query.EmptyResultSet:\n            return 0\n        if self.cache_count_timeout:\n            return cached_with(self, super_count, query_string, self.cache_count_timeout)\n        elif self.timeout == config.NO_CACHE or config.TIMEOUT == config.NO_CACHE:\n            return super_count()\n        else:\n            return cached_with(self, super_count, query_string, config.TIMEOUT)\n\n```\n\n### 改造您的model\n\n```python\nfrom django.db import models\nfrom queryset_cache import CachedQuerySet\nfrom caching.base import CachingMixin\n\nclass ModelClassManger(models.Manager):\n\n    def get_queryset(self):\n        return CachedQuerySet(self.model)\n    \nclass ModelClass(CachingMixin, models.Model):\n    objects = ModelClassManger()\n```\n\n### view层只需在get_queryset上加上装饰器即可\n\n```python\n@queryset_cache_count_decorator()\n@queryset_cache_decorator()\ndef get_queryset(self):\n    pass\n```\n\n如果添加了always_cached=False\n\n```python\n@queryset_cache_count_decorator(always_cached=False)\n@queryset_cache_decorator(always_cached=False)\ndef get_queryset(self):\n    pass\n```\n\n则需要在query参数中加上queryset_cache_time=180,参数后面的数字即为缓存的时间。\n","slug":"在Django中实现queryset级别缓存","published":1,"updated":"2018-12-12T06:50:10.860Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwztf1vr0017vifcawpx0uub","content":"<h2 id=\"介绍\">介绍</h2>\n<p>实现queryset级别的缓存，不是view层面的，相当于缓存sql查询结果。</p>\n<h2 id=\"使用\">使用</h2>\n<h3 id=\"首先在你的django项目中安装依赖的模块\">首先在你的django项目中安装依赖的模块</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install django-cache-machine</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建queryset-cache-py文件-文件内容如下\">创建queryset_cache.py文件,文件内容如下</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! /usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># __author__ = \"Breakering\"</span></span><br><span class=\"line\"><span class=\"comment\"># Date: 18-8-29</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">依赖django-cache-machine，并在此基础上实现了轻松切换使用queryset级别缓存以及count等缓存</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> contextlib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> caching <span class=\"keyword\">import</span> config</span><br><span class=\"line\"><span class=\"keyword\">from</span> caching.base <span class=\"keyword\">import</span> CachingQuerySet, cached_with</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.db.models.sql <span class=\"keyword\">import</span> query</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">queryset_cache_decorator</span><span class=\"params\">(always_cached=True)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"queryset级别缓存的装饰器，可以使得queryset直接从缓存中获取数据\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\">            queryset = func(self, *args, **kwargs)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> always_cached:  <span class=\"comment\"># 此装饰器默认从cache中获取数据</span></span><br><span class=\"line\">                queryset = queryset.from_cache()</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">with</span> contextlib.suppress(Exception):</span><br><span class=\"line\">                    queryset_cache_time = self.request.query_params.get(<span class=\"string\">'queryset_cache_time'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> queryset_cache_time <span class=\"keyword\">and</span> queryset_cache_time.isdigit():</span><br><span class=\"line\">                        queryset = queryset.from_cache(int(queryset_cache_time))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> queryset</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inner</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">queryset_cache_count_decorator</span><span class=\"params\">(always_cached=True)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"queryset count缓存的装饰器，可以使得queryset直接从缓存中获取count的值\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\">            queryset = func(self, *args, **kwargs)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> always_cached:  <span class=\"comment\"># 此装饰器默认从cache中获取数据</span></span><br><span class=\"line\">                queryset = queryset.cache_count()</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">with</span> contextlib.suppress(Exception):</span><br><span class=\"line\">                    queryset_cache_time = self.request.query_params.get(<span class=\"string\">'queryset_cache_time'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> queryset_cache_time <span class=\"keyword\">and</span> queryset_cache_time.isdigit():</span><br><span class=\"line\">                        queryset = queryset.cache_count(int(queryset_cache_time))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> queryset</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inner</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CachedQuerySet</span><span class=\"params\">(CachingQuerySet)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    Return queryset from cache if query_key in cache</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        super(CachedQuerySet, self).__init__(*args, **kwargs)</span><br><span class=\"line\">        self.timeout = config.NO_CACHE  <span class=\"comment\"># 默认直接从数据库取数据</span></span><br><span class=\"line\">        self.cache_count_timeout = config.NO_CACHE  <span class=\"comment\"># 自定义queryset count的缓存时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_clone</span><span class=\"params\">(self, *args, **kw)</span>:</span></span><br><span class=\"line\">        qs = super(CachedQuerySet, self)._clone(*args, **kw)</span><br><span class=\"line\">        qs.cache_count_timeout = self.cache_count_timeout</span><br><span class=\"line\">        <span class=\"keyword\">return</span> qs</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">from_cache</span><span class=\"params\">(self, timeout=<span class=\"number\">60</span>*<span class=\"number\">60</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"在queryset中调用此函数则是从缓存中获取,且调用之后返回的仍是queryset\"\"\"</span></span><br><span class=\"line\">        self.timeout = timeout</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._clone()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cache_count</span><span class=\"params\">(self, cache_count_timeout=<span class=\"number\">60</span>*<span class=\"number\">60</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"实现queryset count的缓存,且调用之后返回的仍是queryset\"\"\"</span></span><br><span class=\"line\">        self.cache_count_timeout = cache_count_timeout</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._clone()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># todo values目前的实现方式有BUG，现已取消</span></span><br><span class=\"line\">    <span class=\"comment\"># def values(self, *fields, **expressions):</span></span><br><span class=\"line\">    <span class=\"comment\">#     \"\"\"rewrite queryset's values\"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\">#     if self.timeout == config.NO_CACHE:  # 默认情况下values直接从数据库获取数据</span></span><br><span class=\"line\">    <span class=\"comment\">#         return super(CachedQuerySet, self).values(*fields, **expressions)</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#     clone = self._clone()</span></span><br><span class=\"line\">    <span class=\"comment\">#     clone.query.set_values(fields)</span></span><br><span class=\"line\">    <span class=\"comment\">#     key = make_key('values:&#123;key&#125;'.format(key=clone.query_key()))</span></span><br><span class=\"line\">    <span class=\"comment\">#     val = cache.get(key)</span></span><br><span class=\"line\">    <span class=\"comment\">#     if val is None:</span></span><br><span class=\"line\">    <span class=\"comment\">#         val = super(CachedQuerySet, self).values(*fields, **expressions)</span></span><br><span class=\"line\">    <span class=\"comment\">#         cache.set(key, val, self.timeout)</span></span><br><span class=\"line\">    <span class=\"comment\">#     return val</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"自定义queryset的count\"\"\"</span></span><br><span class=\"line\">        super_count = super(CachingQuerySet, self).count</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            query_string = <span class=\"string\">'count:%s'</span> % self.query_key()</span><br><span class=\"line\">        <span class=\"keyword\">except</span> query.EmptyResultSet:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.cache_count_timeout:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cached_with(self, super_count, query_string, self.cache_count_timeout)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self.timeout == config.NO_CACHE <span class=\"keyword\">or</span> config.TIMEOUT == config.NO_CACHE:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> super_count()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cached_with(self, super_count, query_string, config.TIMEOUT)</span><br></pre></td></tr></table></figure>\n<h3 id=\"改造您的model\">改造您的model</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"><span class=\"keyword\">from</span> queryset_cache <span class=\"keyword\">import</span> CachedQuerySet</span><br><span class=\"line\"><span class=\"keyword\">from</span> caching.base <span class=\"keyword\">import</span> CachingMixin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ModelClassManger</span><span class=\"params\">(models.Manager)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_queryset</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> CachedQuerySet(self.model)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ModelClass</span><span class=\"params\">(CachingMixin, models.Model)</span>:</span></span><br><span class=\"line\">    objects = ModelClassManger()</span><br></pre></td></tr></table></figure>\n<h3 id=\"view层只需在get-queryset上加上装饰器即可\">view层只需在get_queryset上加上装饰器即可</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@queryset_cache_count_decorator()</span></span><br><span class=\"line\"><span class=\"meta\">@queryset_cache_decorator()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_queryset</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>如果添加了always_cached=False</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@queryset_cache_count_decorator(always_cached=False)</span></span><br><span class=\"line\"><span class=\"meta\">@queryset_cache_decorator(always_cached=False)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_queryset</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>则需要在query参数中加上queryset_cache_time=180,参数后面的数字即为缓存的时间。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"介绍\">介绍</h2>\n<p>实现queryset级别的缓存，不是view层面的，相当于缓存sql查询结果。</p>\n<h2 id=\"使用\">使用</h2>\n<h3 id=\"首先在你的django项目中安装依赖的模块\">首先在你的django项目中安装依赖的模块</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install django-cache-machine</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建queryset-cache-py文件-文件内容如下\">创建queryset_cache.py文件,文件内容如下</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! /usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># __author__ = \"Breakering\"</span></span><br><span class=\"line\"><span class=\"comment\"># Date: 18-8-29</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">依赖django-cache-machine，并在此基础上实现了轻松切换使用queryset级别缓存以及count等缓存</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> contextlib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> caching <span class=\"keyword\">import</span> config</span><br><span class=\"line\"><span class=\"keyword\">from</span> caching.base <span class=\"keyword\">import</span> CachingQuerySet, cached_with</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.db.models.sql <span class=\"keyword\">import</span> query</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">queryset_cache_decorator</span><span class=\"params\">(always_cached=True)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"queryset级别缓存的装饰器，可以使得queryset直接从缓存中获取数据\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\">            queryset = func(self, *args, **kwargs)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> always_cached:  <span class=\"comment\"># 此装饰器默认从cache中获取数据</span></span><br><span class=\"line\">                queryset = queryset.from_cache()</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">with</span> contextlib.suppress(Exception):</span><br><span class=\"line\">                    queryset_cache_time = self.request.query_params.get(<span class=\"string\">'queryset_cache_time'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> queryset_cache_time <span class=\"keyword\">and</span> queryset_cache_time.isdigit():</span><br><span class=\"line\">                        queryset = queryset.from_cache(int(queryset_cache_time))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> queryset</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inner</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">queryset_cache_count_decorator</span><span class=\"params\">(always_cached=True)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"queryset count缓存的装饰器，可以使得queryset直接从缓存中获取count的值\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inner</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\">            queryset = func(self, *args, **kwargs)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> always_cached:  <span class=\"comment\"># 此装饰器默认从cache中获取数据</span></span><br><span class=\"line\">                queryset = queryset.cache_count()</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">with</span> contextlib.suppress(Exception):</span><br><span class=\"line\">                    queryset_cache_time = self.request.query_params.get(<span class=\"string\">'queryset_cache_time'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> queryset_cache_time <span class=\"keyword\">and</span> queryset_cache_time.isdigit():</span><br><span class=\"line\">                        queryset = queryset.cache_count(int(queryset_cache_time))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> queryset</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inner</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CachedQuerySet</span><span class=\"params\">(CachingQuerySet)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    Return queryset from cache if query_key in cache</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        super(CachedQuerySet, self).__init__(*args, **kwargs)</span><br><span class=\"line\">        self.timeout = config.NO_CACHE  <span class=\"comment\"># 默认直接从数据库取数据</span></span><br><span class=\"line\">        self.cache_count_timeout = config.NO_CACHE  <span class=\"comment\"># 自定义queryset count的缓存时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_clone</span><span class=\"params\">(self, *args, **kw)</span>:</span></span><br><span class=\"line\">        qs = super(CachedQuerySet, self)._clone(*args, **kw)</span><br><span class=\"line\">        qs.cache_count_timeout = self.cache_count_timeout</span><br><span class=\"line\">        <span class=\"keyword\">return</span> qs</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">from_cache</span><span class=\"params\">(self, timeout=<span class=\"number\">60</span>*<span class=\"number\">60</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"在queryset中调用此函数则是从缓存中获取,且调用之后返回的仍是queryset\"\"\"</span></span><br><span class=\"line\">        self.timeout = timeout</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._clone()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cache_count</span><span class=\"params\">(self, cache_count_timeout=<span class=\"number\">60</span>*<span class=\"number\">60</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"实现queryset count的缓存,且调用之后返回的仍是queryset\"\"\"</span></span><br><span class=\"line\">        self.cache_count_timeout = cache_count_timeout</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._clone()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># todo values目前的实现方式有BUG，现已取消</span></span><br><span class=\"line\">    <span class=\"comment\"># def values(self, *fields, **expressions):</span></span><br><span class=\"line\">    <span class=\"comment\">#     \"\"\"rewrite queryset's values\"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\">#     if self.timeout == config.NO_CACHE:  # 默认情况下values直接从数据库获取数据</span></span><br><span class=\"line\">    <span class=\"comment\">#         return super(CachedQuerySet, self).values(*fields, **expressions)</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#     clone = self._clone()</span></span><br><span class=\"line\">    <span class=\"comment\">#     clone.query.set_values(fields)</span></span><br><span class=\"line\">    <span class=\"comment\">#     key = make_key('values:&#123;key&#125;'.format(key=clone.query_key()))</span></span><br><span class=\"line\">    <span class=\"comment\">#     val = cache.get(key)</span></span><br><span class=\"line\">    <span class=\"comment\">#     if val is None:</span></span><br><span class=\"line\">    <span class=\"comment\">#         val = super(CachedQuerySet, self).values(*fields, **expressions)</span></span><br><span class=\"line\">    <span class=\"comment\">#         cache.set(key, val, self.timeout)</span></span><br><span class=\"line\">    <span class=\"comment\">#     return val</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"自定义queryset的count\"\"\"</span></span><br><span class=\"line\">        super_count = super(CachingQuerySet, self).count</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            query_string = <span class=\"string\">'count:%s'</span> % self.query_key()</span><br><span class=\"line\">        <span class=\"keyword\">except</span> query.EmptyResultSet:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.cache_count_timeout:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cached_with(self, super_count, query_string, self.cache_count_timeout)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self.timeout == config.NO_CACHE <span class=\"keyword\">or</span> config.TIMEOUT == config.NO_CACHE:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> super_count()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cached_with(self, super_count, query_string, config.TIMEOUT)</span><br></pre></td></tr></table></figure>\n<h3 id=\"改造您的model\">改造您的model</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"><span class=\"keyword\">from</span> queryset_cache <span class=\"keyword\">import</span> CachedQuerySet</span><br><span class=\"line\"><span class=\"keyword\">from</span> caching.base <span class=\"keyword\">import</span> CachingMixin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ModelClassManger</span><span class=\"params\">(models.Manager)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_queryset</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> CachedQuerySet(self.model)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ModelClass</span><span class=\"params\">(CachingMixin, models.Model)</span>:</span></span><br><span class=\"line\">    objects = ModelClassManger()</span><br></pre></td></tr></table></figure>\n<h3 id=\"view层只需在get-queryset上加上装饰器即可\">view层只需在get_queryset上加上装饰器即可</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@queryset_cache_count_decorator()</span></span><br><span class=\"line\"><span class=\"meta\">@queryset_cache_decorator()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_queryset</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>如果添加了always_cached=False</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@queryset_cache_count_decorator(always_cached=False)</span></span><br><span class=\"line\"><span class=\"meta\">@queryset_cache_decorator(always_cached=False)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_queryset</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>则需要在query参数中加上queryset_cache_time=180,参数后面的数字即为缓存的时间。</p>\n"},{"title":"记GitLab服务器宕机的迁移过程","original":true,"comments":1,"date":"2019-06-17T03:23:25.000Z","subtitle":"gitlab-migrations","description":"GitLab服务器宕机的迁移","photos":[],"_content":"\n# 问题描述\n\n公司gitlab服务器的硬件比较老旧，内存也相对较少，在一次增加内存条的时候，由于和主板不兼容的问题，导致系统引导出错，无法再进入系统并运行gitlab了，而公司所有项目都在该gitlab服务器上面，开发小组的工作受到了很大的影响，所以修复gitlab服务器变得刻不容缓。\n\n# 解决问题\n\n## 第一次：尝试修复系统\n\n从u盘启动，并挂载之前gitlab服务器的系统盘，查找原因是系统引导出现问题，用网上找到的一些办法来尝试修复引导均失败了，多次尝试无果之后开始尝试其他方法，由于gitlab兼容性较强，所以想着可不可以在gitlab服务无法启动的情况下通过转移文件来迁移整个gitlab,在网上查了一些资料之后发现的确可行，话不多说，开始实践吧。\n\n## 第二次：尝试转移gitlab\n\n### 1. 查看gitlab的版本\n\n默认安装在/opt/gitlab/, 找到version-manifest.txt文件，文件第一行记录gitlab的版本：\n\n```\ngitlab-ce 11.0.3\n```\n\n### 2. 在新服务器上安装该版本的gitlab\n\n安装之后，执行\n\n```\nsudo gitlab-ctl reconfigure\n```\n\n将gitlab服务正常启动，然后将其服务关闭`sudo gitlab-ctl stop`，然后再进行下面的操作。\n\n>   **注意：版本一定保持一致，否则迁移将会失败。**\n\n### 3. 将旧服务器上的仓库拷贝到新服务器上\n\n#### 3.1 将旧服务器上位于相对位置的**/var/opt/gitlab/git-data/**目录下面的repositories目录打包，拷贝到新服务器上（如果旧服务的硬盘直接挂载在新服务器上，则可以直接拷贝）。\n\n```\n# 本次演示，旧服务器挂了，需要通过U盘启动，因此旧服务器和新服务器直接传文件，只能通过网络。\n# 当前位于旧服务器的/var/opt/gitlab/git-data/目录下\n# gitlab使用默认配置时，仓库在repositories目录下面\ntar -zcvf repositories.tar.gz repositories/\n\n# 将包通过网络拷贝到新服务器的当前用户的家目录下面，保证有权限向新服务器写入数据\nscp repositories.tar.gz 新服务器用户@新服务器的IP地址:~/\n```\n\n#### 3.2 将数据解压，并修改权限，移动到新服务器的**/var/opt/gitlab/git-data/**下面。\n\n```\n# 解压包\ntar -zxvf repositories.tar.gz\n\n# 修改属主属组\nsudo chown  -R git.root repositories\n\n# 移动仓库\nsudo mv repositories /var/opt/gitlab/git-data/ \n```\n\n### 4. 将旧服务器上的存储在postgresql（默认安装配置的gitlab的数据，存储在postgresql中）中的数据拷贝到新服务器上。\n\n#### 4.1 将旧服务器上位于相对位置的/var/opt/gitlab/postgresql/目录下面的data目录打包，拷贝到新服务上。\n\n```\n# 打包\ntar -zcvf data.tar.gz data/\n\n# 发送到新服务器的用户的家目录中\nscp data.tar.gz 新服务器的用户@新服务器的IP地址:~/\n```\n\n#### 4.2 解压，并修改属主属组，移动到新服务器的/var/opt/gitlab/postgresql/目录下面。\n\n```\n# 解压\ntar -xvf data.tar.gz\n\n# 修改属主属组\nsudo chown -R gitlab-psql.root data\n\n# 移动数据（移动数据较快，又可以保留文件的原始权限）\nsudo mv data /var/opt/gitlab/postgresql/\n\n# 或者使用带权限的拷贝\nsudo cp -rp data /var/opt/gitlab/postgresql/\n```\n\n### 5.将旧服务器上的配置文件拷贝到新服务器上\n\n```\ncd /etc/gitlab\ntar gitlab.rb 新服务器的用户@新服务器的IP地址:~/\n```\n新服务器上:\n```\nsudo mv /etc/gitlab/gitlab.rb /etc/gitlab/gitlab.rb.bck  # 备份下配置文件\nsudo mv gitlab.rb /etc/gitlab  # 使用旧服务器的配置文件\n```\n\n### 6.将旧服务器上的上传文件拷贝到新服务器上。\n\n#### 6.1 将旧服务器上位于相对位置的/var/opt/gitlab/gitlab-rails/目录下面的uploads目录打包，拷贝到新服务上。\n\n```\n# 打包\ntar -zcvf uploads.tar.gz uploads/\n\n# 发送到新服务器的用户的家目录中\nscp uploads.tar.gz 新服务器的用户@新服务器的IP地址:~/\n```\n\n#### 6.2 解压，并修改属主属组，移动到新服务器的/var/opt/gitlab/gitlab-rails/目录下面。\n\n```\n# 解压\ntar -xvf uploads.tar.gz\n\n# 修改属主属组\nsudo chown -R git.root uploads\n\n# 移动数据（移动数据较快，又可以保留文件的原始权限）\nsudo mv uploads /var/opt/gitlab/gitlab-rails/\n\n# 或者使用带权限的拷贝\nsudo cp -rp uploads /var/opt/gitlab/gitlab-rails/\n```\n\n### 7. 重新配置gitlab\n\n```\nsudo gitlab-ctl reconfigure  \n```\n\n### 8.启动服务\n\n```\n# 启动服务\nsudo gitlab-ctl start\n\n# 查看启动状态\nsudo gitlab-ctl status\n\n# 查看实时启动状态\nsudo gitlab-ctl tail\n```\n\n# 参考\n\n1.  [gitlab旧服务器停机状态下，迁移gitlab服务](<https://my.oschina.net/airship/blog/1574250>)\n\n","source":"_posts/记GitLab服务器宕机的迁移过程.md","raw":"---\ntitle: 记GitLab服务器宕机的迁移过程\noriginal: true\ncomments: true\ndate: 2019-06-17 11:23:25\nsubtitle: gitlab-migrations\ndescription: GitLab服务器宕机的迁移\ntags: GitLab\ncategories: GitLab\nphotos:\n---\n\n# 问题描述\n\n公司gitlab服务器的硬件比较老旧，内存也相对较少，在一次增加内存条的时候，由于和主板不兼容的问题，导致系统引导出错，无法再进入系统并运行gitlab了，而公司所有项目都在该gitlab服务器上面，开发小组的工作受到了很大的影响，所以修复gitlab服务器变得刻不容缓。\n\n# 解决问题\n\n## 第一次：尝试修复系统\n\n从u盘启动，并挂载之前gitlab服务器的系统盘，查找原因是系统引导出现问题，用网上找到的一些办法来尝试修复引导均失败了，多次尝试无果之后开始尝试其他方法，由于gitlab兼容性较强，所以想着可不可以在gitlab服务无法启动的情况下通过转移文件来迁移整个gitlab,在网上查了一些资料之后发现的确可行，话不多说，开始实践吧。\n\n## 第二次：尝试转移gitlab\n\n### 1. 查看gitlab的版本\n\n默认安装在/opt/gitlab/, 找到version-manifest.txt文件，文件第一行记录gitlab的版本：\n\n```\ngitlab-ce 11.0.3\n```\n\n### 2. 在新服务器上安装该版本的gitlab\n\n安装之后，执行\n\n```\nsudo gitlab-ctl reconfigure\n```\n\n将gitlab服务正常启动，然后将其服务关闭`sudo gitlab-ctl stop`，然后再进行下面的操作。\n\n>   **注意：版本一定保持一致，否则迁移将会失败。**\n\n### 3. 将旧服务器上的仓库拷贝到新服务器上\n\n#### 3.1 将旧服务器上位于相对位置的**/var/opt/gitlab/git-data/**目录下面的repositories目录打包，拷贝到新服务器上（如果旧服务的硬盘直接挂载在新服务器上，则可以直接拷贝）。\n\n```\n# 本次演示，旧服务器挂了，需要通过U盘启动，因此旧服务器和新服务器直接传文件，只能通过网络。\n# 当前位于旧服务器的/var/opt/gitlab/git-data/目录下\n# gitlab使用默认配置时，仓库在repositories目录下面\ntar -zcvf repositories.tar.gz repositories/\n\n# 将包通过网络拷贝到新服务器的当前用户的家目录下面，保证有权限向新服务器写入数据\nscp repositories.tar.gz 新服务器用户@新服务器的IP地址:~/\n```\n\n#### 3.2 将数据解压，并修改权限，移动到新服务器的**/var/opt/gitlab/git-data/**下面。\n\n```\n# 解压包\ntar -zxvf repositories.tar.gz\n\n# 修改属主属组\nsudo chown  -R git.root repositories\n\n# 移动仓库\nsudo mv repositories /var/opt/gitlab/git-data/ \n```\n\n### 4. 将旧服务器上的存储在postgresql（默认安装配置的gitlab的数据，存储在postgresql中）中的数据拷贝到新服务器上。\n\n#### 4.1 将旧服务器上位于相对位置的/var/opt/gitlab/postgresql/目录下面的data目录打包，拷贝到新服务上。\n\n```\n# 打包\ntar -zcvf data.tar.gz data/\n\n# 发送到新服务器的用户的家目录中\nscp data.tar.gz 新服务器的用户@新服务器的IP地址:~/\n```\n\n#### 4.2 解压，并修改属主属组，移动到新服务器的/var/opt/gitlab/postgresql/目录下面。\n\n```\n# 解压\ntar -xvf data.tar.gz\n\n# 修改属主属组\nsudo chown -R gitlab-psql.root data\n\n# 移动数据（移动数据较快，又可以保留文件的原始权限）\nsudo mv data /var/opt/gitlab/postgresql/\n\n# 或者使用带权限的拷贝\nsudo cp -rp data /var/opt/gitlab/postgresql/\n```\n\n### 5.将旧服务器上的配置文件拷贝到新服务器上\n\n```\ncd /etc/gitlab\ntar gitlab.rb 新服务器的用户@新服务器的IP地址:~/\n```\n新服务器上:\n```\nsudo mv /etc/gitlab/gitlab.rb /etc/gitlab/gitlab.rb.bck  # 备份下配置文件\nsudo mv gitlab.rb /etc/gitlab  # 使用旧服务器的配置文件\n```\n\n### 6.将旧服务器上的上传文件拷贝到新服务器上。\n\n#### 6.1 将旧服务器上位于相对位置的/var/opt/gitlab/gitlab-rails/目录下面的uploads目录打包，拷贝到新服务上。\n\n```\n# 打包\ntar -zcvf uploads.tar.gz uploads/\n\n# 发送到新服务器的用户的家目录中\nscp uploads.tar.gz 新服务器的用户@新服务器的IP地址:~/\n```\n\n#### 6.2 解压，并修改属主属组，移动到新服务器的/var/opt/gitlab/gitlab-rails/目录下面。\n\n```\n# 解压\ntar -xvf uploads.tar.gz\n\n# 修改属主属组\nsudo chown -R git.root uploads\n\n# 移动数据（移动数据较快，又可以保留文件的原始权限）\nsudo mv uploads /var/opt/gitlab/gitlab-rails/\n\n# 或者使用带权限的拷贝\nsudo cp -rp uploads /var/opt/gitlab/gitlab-rails/\n```\n\n### 7. 重新配置gitlab\n\n```\nsudo gitlab-ctl reconfigure  \n```\n\n### 8.启动服务\n\n```\n# 启动服务\nsudo gitlab-ctl start\n\n# 查看启动状态\nsudo gitlab-ctl status\n\n# 查看实时启动状态\nsudo gitlab-ctl tail\n```\n\n# 参考\n\n1.  [gitlab旧服务器停机状态下，迁移gitlab服务](<https://my.oschina.net/airship/blog/1574250>)\n\n","slug":"记GitLab服务器宕机的迁移过程","published":1,"updated":"2019-06-17T03:24:26.434Z","layout":"post","link":"","_id":"cjwztf1vs0019vifcrrkqbdeq","content":"<h1>问题描述</h1>\n<p>公司gitlab服务器的硬件比较老旧，内存也相对较少，在一次增加内存条的时候，由于和主板不兼容的问题，导致系统引导出错，无法再进入系统并运行gitlab了，而公司所有项目都在该gitlab服务器上面，开发小组的工作受到了很大的影响，所以修复gitlab服务器变得刻不容缓。</p>\n<h1>解决问题</h1>\n<h2 id=\"第一次：尝试修复系统\">第一次：尝试修复系统</h2>\n<p>从u盘启动，并挂载之前gitlab服务器的系统盘，查找原因是系统引导出现问题，用网上找到的一些办法来尝试修复引导均失败了，多次尝试无果之后开始尝试其他方法，由于gitlab兼容性较强，所以想着可不可以在gitlab服务无法启动的情况下通过转移文件来迁移整个gitlab,在网上查了一些资料之后发现的确可行，话不多说，开始实践吧。</p>\n<h2 id=\"第二次：尝试转移gitlab\">第二次：尝试转移gitlab</h2>\n<h3 id=\"1-查看gitlab的版本\">1. 查看gitlab的版本</h3>\n<p>默认安装在/opt/gitlab/, 找到version-manifest.txt文件，文件第一行记录gitlab的版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-ce 11.0.3</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-在新服务器上安装该版本的gitlab\">2. 在新服务器上安装该版本的gitlab</h3>\n<p>安装之后，执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n<p>将gitlab服务正常启动，然后将其服务关闭<code>sudo gitlab-ctl stop</code>，然后再进行下面的操作。</p>\n<blockquote>\n<p><strong>注意：版本一定保持一致，否则迁移将会失败。</strong></p>\n</blockquote>\n<h3 id=\"3-将旧服务器上的仓库拷贝到新服务器上\">3. 将旧服务器上的仓库拷贝到新服务器上</h3>\n<h4 id=\"3-1-将旧服务器上位于相对位置的-var-opt-gitlab-git-data-目录下面的repositories目录打包-拷贝到新服务器上-如果旧服务的硬盘直接挂载在新服务器上-则可以直接拷贝\">3.1 将旧服务器上位于相对位置的**/var/opt/gitlab/git-data/**目录下面的repositories目录打包，拷贝到新服务器上（如果旧服务的硬盘直接挂载在新服务器上，则可以直接拷贝）。</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 本次演示，旧服务器挂了，需要通过U盘启动，因此旧服务器和新服务器直接传文件，只能通过网络。</span><br><span class=\"line\"># 当前位于旧服务器的/var/opt/gitlab/git-data/目录下</span><br><span class=\"line\"># gitlab使用默认配置时，仓库在repositories目录下面</span><br><span class=\"line\">tar -zcvf repositories.tar.gz repositories/</span><br><span class=\"line\"></span><br><span class=\"line\"># 将包通过网络拷贝到新服务器的当前用户的家目录下面，保证有权限向新服务器写入数据</span><br><span class=\"line\">scp repositories.tar.gz 新服务器用户@新服务器的IP地址:~/</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2-将数据解压-并修改权限-移动到新服务器的-var-opt-gitlab-git-data-下面\">3.2 将数据解压，并修改权限，移动到新服务器的**/var/opt/gitlab/git-data/**下面。</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 解压包</span><br><span class=\"line\">tar -zxvf repositories.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改属主属组</span><br><span class=\"line\">sudo chown  -R git.root repositories</span><br><span class=\"line\"></span><br><span class=\"line\"># 移动仓库</span><br><span class=\"line\">sudo mv repositories /var/opt/gitlab/git-data/</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-将旧服务器上的存储在postgresql-默认安装配置的gitlab的数据-存储在postgresql中-中的数据拷贝到新服务器上\">4. 将旧服务器上的存储在postgresql（默认安装配置的gitlab的数据，存储在postgresql中）中的数据拷贝到新服务器上。</h3>\n<h4 id=\"4-1-将旧服务器上位于相对位置的-var-opt-gitlab-postgresql-目录下面的data目录打包-拷贝到新服务上\">4.1 将旧服务器上位于相对位置的/var/opt/gitlab/postgresql/目录下面的data目录打包，拷贝到新服务上。</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 打包</span><br><span class=\"line\">tar -zcvf data.tar.gz data/</span><br><span class=\"line\"></span><br><span class=\"line\"># 发送到新服务器的用户的家目录中</span><br><span class=\"line\">scp data.tar.gz 新服务器的用户@新服务器的IP地址:~/</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-解压-并修改属主属组-移动到新服务器的-var-opt-gitlab-postgresql-目录下面\">4.2 解压，并修改属主属组，移动到新服务器的/var/opt/gitlab/postgresql/目录下面。</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 解压</span><br><span class=\"line\">tar -xvf data.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改属主属组</span><br><span class=\"line\">sudo chown -R gitlab-psql.root data</span><br><span class=\"line\"></span><br><span class=\"line\"># 移动数据（移动数据较快，又可以保留文件的原始权限）</span><br><span class=\"line\">sudo mv data /var/opt/gitlab/postgresql/</span><br><span class=\"line\"></span><br><span class=\"line\"># 或者使用带权限的拷贝</span><br><span class=\"line\">sudo cp -rp data /var/opt/gitlab/postgresql/</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-将旧服务器上的配置文件拷贝到新服务器上\">5.将旧服务器上的配置文件拷贝到新服务器上</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/gitlab</span><br><span class=\"line\">tar gitlab.rb 新服务器的用户@新服务器的IP地址:~/</span><br></pre></td></tr></table></figure>\n<p>新服务器上:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv /etc/gitlab/gitlab.rb /etc/gitlab/gitlab.rb.bck  # 备份下配置文件</span><br><span class=\"line\">sudo mv gitlab.rb /etc/gitlab  # 使用旧服务器的配置文件</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-将旧服务器上的上传文件拷贝到新服务器上\">6.将旧服务器上的上传文件拷贝到新服务器上。</h3>\n<h4 id=\"6-1-将旧服务器上位于相对位置的-var-opt-gitlab-gitlab-rails-目录下面的uploads目录打包-拷贝到新服务上\">6.1 将旧服务器上位于相对位置的/var/opt/gitlab/gitlab-rails/目录下面的uploads目录打包，拷贝到新服务上。</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 打包</span><br><span class=\"line\">tar -zcvf uploads.tar.gz uploads/</span><br><span class=\"line\"></span><br><span class=\"line\"># 发送到新服务器的用户的家目录中</span><br><span class=\"line\">scp uploads.tar.gz 新服务器的用户@新服务器的IP地址:~/</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-2-解压-并修改属主属组-移动到新服务器的-var-opt-gitlab-gitlab-rails-目录下面\">6.2 解压，并修改属主属组，移动到新服务器的/var/opt/gitlab/gitlab-rails/目录下面。</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 解压</span><br><span class=\"line\">tar -xvf uploads.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改属主属组</span><br><span class=\"line\">sudo chown -R git.root uploads</span><br><span class=\"line\"></span><br><span class=\"line\"># 移动数据（移动数据较快，又可以保留文件的原始权限）</span><br><span class=\"line\">sudo mv uploads /var/opt/gitlab/gitlab-rails/</span><br><span class=\"line\"></span><br><span class=\"line\"># 或者使用带权限的拷贝</span><br><span class=\"line\">sudo cp -rp uploads /var/opt/gitlab/gitlab-rails/</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-重新配置gitlab\">7. 重新配置gitlab</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-启动服务\">8.启动服务</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动服务</span><br><span class=\"line\">sudo gitlab-ctl start</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看启动状态</span><br><span class=\"line\">sudo gitlab-ctl status</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看实时启动状态</span><br><span class=\"line\">sudo gitlab-ctl tail</span><br></pre></td></tr></table></figure>\n<h1>参考</h1>\n<ol>\n<li><a href=\"https://my.oschina.net/airship/blog/1574250\" target=\"_blank\" rel=\"noopener\">gitlab旧服务器停机状态下，迁移gitlab服务</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1>问题描述</h1>\n<p>公司gitlab服务器的硬件比较老旧，内存也相对较少，在一次增加内存条的时候，由于和主板不兼容的问题，导致系统引导出错，无法再进入系统并运行gitlab了，而公司所有项目都在该gitlab服务器上面，开发小组的工作受到了很大的影响，所以修复gitlab服务器变得刻不容缓。</p>\n<h1>解决问题</h1>\n<h2 id=\"第一次：尝试修复系统\">第一次：尝试修复系统</h2>\n<p>从u盘启动，并挂载之前gitlab服务器的系统盘，查找原因是系统引导出现问题，用网上找到的一些办法来尝试修复引导均失败了，多次尝试无果之后开始尝试其他方法，由于gitlab兼容性较强，所以想着可不可以在gitlab服务无法启动的情况下通过转移文件来迁移整个gitlab,在网上查了一些资料之后发现的确可行，话不多说，开始实践吧。</p>\n<h2 id=\"第二次：尝试转移gitlab\">第二次：尝试转移gitlab</h2>\n<h3 id=\"1-查看gitlab的版本\">1. 查看gitlab的版本</h3>\n<p>默认安装在/opt/gitlab/, 找到version-manifest.txt文件，文件第一行记录gitlab的版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-ce 11.0.3</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-在新服务器上安装该版本的gitlab\">2. 在新服务器上安装该版本的gitlab</h3>\n<p>安装之后，执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n<p>将gitlab服务正常启动，然后将其服务关闭<code>sudo gitlab-ctl stop</code>，然后再进行下面的操作。</p>\n<blockquote>\n<p><strong>注意：版本一定保持一致，否则迁移将会失败。</strong></p>\n</blockquote>\n<h3 id=\"3-将旧服务器上的仓库拷贝到新服务器上\">3. 将旧服务器上的仓库拷贝到新服务器上</h3>\n<h4 id=\"3-1-将旧服务器上位于相对位置的-var-opt-gitlab-git-data-目录下面的repositories目录打包-拷贝到新服务器上-如果旧服务的硬盘直接挂载在新服务器上-则可以直接拷贝\">3.1 将旧服务器上位于相对位置的**/var/opt/gitlab/git-data/**目录下面的repositories目录打包，拷贝到新服务器上（如果旧服务的硬盘直接挂载在新服务器上，则可以直接拷贝）。</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 本次演示，旧服务器挂了，需要通过U盘启动，因此旧服务器和新服务器直接传文件，只能通过网络。</span><br><span class=\"line\"># 当前位于旧服务器的/var/opt/gitlab/git-data/目录下</span><br><span class=\"line\"># gitlab使用默认配置时，仓库在repositories目录下面</span><br><span class=\"line\">tar -zcvf repositories.tar.gz repositories/</span><br><span class=\"line\"></span><br><span class=\"line\"># 将包通过网络拷贝到新服务器的当前用户的家目录下面，保证有权限向新服务器写入数据</span><br><span class=\"line\">scp repositories.tar.gz 新服务器用户@新服务器的IP地址:~/</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2-将数据解压-并修改权限-移动到新服务器的-var-opt-gitlab-git-data-下面\">3.2 将数据解压，并修改权限，移动到新服务器的**/var/opt/gitlab/git-data/**下面。</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 解压包</span><br><span class=\"line\">tar -zxvf repositories.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改属主属组</span><br><span class=\"line\">sudo chown  -R git.root repositories</span><br><span class=\"line\"></span><br><span class=\"line\"># 移动仓库</span><br><span class=\"line\">sudo mv repositories /var/opt/gitlab/git-data/</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-将旧服务器上的存储在postgresql-默认安装配置的gitlab的数据-存储在postgresql中-中的数据拷贝到新服务器上\">4. 将旧服务器上的存储在postgresql（默认安装配置的gitlab的数据，存储在postgresql中）中的数据拷贝到新服务器上。</h3>\n<h4 id=\"4-1-将旧服务器上位于相对位置的-var-opt-gitlab-postgresql-目录下面的data目录打包-拷贝到新服务上\">4.1 将旧服务器上位于相对位置的/var/opt/gitlab/postgresql/目录下面的data目录打包，拷贝到新服务上。</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 打包</span><br><span class=\"line\">tar -zcvf data.tar.gz data/</span><br><span class=\"line\"></span><br><span class=\"line\"># 发送到新服务器的用户的家目录中</span><br><span class=\"line\">scp data.tar.gz 新服务器的用户@新服务器的IP地址:~/</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-解压-并修改属主属组-移动到新服务器的-var-opt-gitlab-postgresql-目录下面\">4.2 解压，并修改属主属组，移动到新服务器的/var/opt/gitlab/postgresql/目录下面。</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 解压</span><br><span class=\"line\">tar -xvf data.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改属主属组</span><br><span class=\"line\">sudo chown -R gitlab-psql.root data</span><br><span class=\"line\"></span><br><span class=\"line\"># 移动数据（移动数据较快，又可以保留文件的原始权限）</span><br><span class=\"line\">sudo mv data /var/opt/gitlab/postgresql/</span><br><span class=\"line\"></span><br><span class=\"line\"># 或者使用带权限的拷贝</span><br><span class=\"line\">sudo cp -rp data /var/opt/gitlab/postgresql/</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-将旧服务器上的配置文件拷贝到新服务器上\">5.将旧服务器上的配置文件拷贝到新服务器上</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/gitlab</span><br><span class=\"line\">tar gitlab.rb 新服务器的用户@新服务器的IP地址:~/</span><br></pre></td></tr></table></figure>\n<p>新服务器上:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv /etc/gitlab/gitlab.rb /etc/gitlab/gitlab.rb.bck  # 备份下配置文件</span><br><span class=\"line\">sudo mv gitlab.rb /etc/gitlab  # 使用旧服务器的配置文件</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-将旧服务器上的上传文件拷贝到新服务器上\">6.将旧服务器上的上传文件拷贝到新服务器上。</h3>\n<h4 id=\"6-1-将旧服务器上位于相对位置的-var-opt-gitlab-gitlab-rails-目录下面的uploads目录打包-拷贝到新服务上\">6.1 将旧服务器上位于相对位置的/var/opt/gitlab/gitlab-rails/目录下面的uploads目录打包，拷贝到新服务上。</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 打包</span><br><span class=\"line\">tar -zcvf uploads.tar.gz uploads/</span><br><span class=\"line\"></span><br><span class=\"line\"># 发送到新服务器的用户的家目录中</span><br><span class=\"line\">scp uploads.tar.gz 新服务器的用户@新服务器的IP地址:~/</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-2-解压-并修改属主属组-移动到新服务器的-var-opt-gitlab-gitlab-rails-目录下面\">6.2 解压，并修改属主属组，移动到新服务器的/var/opt/gitlab/gitlab-rails/目录下面。</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 解压</span><br><span class=\"line\">tar -xvf uploads.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改属主属组</span><br><span class=\"line\">sudo chown -R git.root uploads</span><br><span class=\"line\"></span><br><span class=\"line\"># 移动数据（移动数据较快，又可以保留文件的原始权限）</span><br><span class=\"line\">sudo mv uploads /var/opt/gitlab/gitlab-rails/</span><br><span class=\"line\"></span><br><span class=\"line\"># 或者使用带权限的拷贝</span><br><span class=\"line\">sudo cp -rp uploads /var/opt/gitlab/gitlab-rails/</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-重新配置gitlab\">7. 重新配置gitlab</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-启动服务\">8.启动服务</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动服务</span><br><span class=\"line\">sudo gitlab-ctl start</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看启动状态</span><br><span class=\"line\">sudo gitlab-ctl status</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看实时启动状态</span><br><span class=\"line\">sudo gitlab-ctl tail</span><br></pre></td></tr></table></figure>\n<h1>参考</h1>\n<ol>\n<li><a href=\"https://my.oschina.net/airship/blog/1574250\" target=\"_blank\" rel=\"noopener\">gitlab旧服务器停机状态下，迁移gitlab服务</a></li>\n</ol>\n"},{"title":"django修改request对象","subtitle":"modify-request","original":true,"date":"2018-12-12T10:43:17.000Z","description":"django修改request对象","photos":[],"_content":"\n**Remove immutability:**\n\n```python\nif not request.GET._mutable:\n   request.GET._mutable = True\n\n# now you can spoil it\nrequest.GET['pwd'] = 'iloveyou'\n```\n\n","source":"_posts/django修改request对象.md","raw":"---\ntitle: django修改request对象\nsubtitle: modify-request\noriginal: true\ndate: 2018-12-12 18:43:17\ndescription: django修改request对象\ntags: Django\ncategories: Django\nphotos:\n---\n\n**Remove immutability:**\n\n```python\nif not request.GET._mutable:\n   request.GET._mutable = True\n\n# now you can spoil it\nrequest.GET['pwd'] = 'iloveyou'\n```\n\n","slug":"django修改request对象","published":1,"updated":"2018-12-12T11:00:59.232Z","comments":1,"layout":"post","link":"","_id":"cjwztf1vs001bvifclyy5dm98","content":"<p><strong>Remove immutability:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> request.GET._mutable:</span><br><span class=\"line\">   request.GET._mutable = <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># now you can spoil it</span></span><br><span class=\"line\">request.GET[<span class=\"string\">'pwd'</span>] = <span class=\"string\">'iloveyou'</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Remove immutability:</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> request.GET._mutable:</span><br><span class=\"line\">   request.GET._mutable = <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># now you can spoil it</span></span><br><span class=\"line\">request.GET[<span class=\"string\">'pwd'</span>] = <span class=\"string\">'iloveyou'</span></span><br></pre></td></tr></table></figure>\n"},{"title":"jupyter美化","subtitle":"jupyter-beauty","original":true,"date":"2018-11-26T02:17:10.000Z","description":"jupyter美化","photos":[],"_content":"\n# jupyterthemes\n\n## 安装jupyter主题\n\n```text\n# install jupyterthemes\npip install jupyterthemes\n\n# upgrade to latest version\npip install --upgrade jupyterthemes\n```\n\n##  使用主题\n\n```\njt -t monokai -fs 95 -altp -tfs 11 -nfs 115 -cellw 88% -N -T\n```\n\n## 更多主题设置\n\n[jupyterthemes](https://github.com/dunovank/jupyter-themes)\n\n# jupyter_contrib_nbextensions\n\n\n\n## 安装jupyter_contrib_nbextensions\n\n```reStructuredText\npip install jupyter_contrib_nbextensions\n```\n\n\n\n## 安装js和css文件\n\n```text\njupyter contrib nbextension install --user\n```\n\n\n\n## 扩展选用\n\n![1543199245282](/images/2018-11-26/1543199245282.png)\n\n\n\n## 完成","source":"_posts/jupyter美化.md","raw":"---\ntitle: jupyter美化\nsubtitle: jupyter-beauty\noriginal: true\ndate: 2018-11-26 10:17:10\ndescription: jupyter美化\ntags: jupyter\ncategories: jupyter\nphotos:\n---\n\n# jupyterthemes\n\n## 安装jupyter主题\n\n```text\n# install jupyterthemes\npip install jupyterthemes\n\n# upgrade to latest version\npip install --upgrade jupyterthemes\n```\n\n##  使用主题\n\n```\njt -t monokai -fs 95 -altp -tfs 11 -nfs 115 -cellw 88% -N -T\n```\n\n## 更多主题设置\n\n[jupyterthemes](https://github.com/dunovank/jupyter-themes)\n\n# jupyter_contrib_nbextensions\n\n\n\n## 安装jupyter_contrib_nbextensions\n\n```reStructuredText\npip install jupyter_contrib_nbextensions\n```\n\n\n\n## 安装js和css文件\n\n```text\njupyter contrib nbextension install --user\n```\n\n\n\n## 扩展选用\n\n![1543199245282](/images/2018-11-26/1543199245282.png)\n\n\n\n## 完成","slug":"jupyter美化","published":1,"updated":"2018-12-12T06:49:11.159Z","comments":1,"layout":"post","link":"","_id":"cjwztf1wb002kvifcbjd8xstu","content":"<h1>jupyterthemes</h1>\n<h2 id=\"安装jupyter主题\">安装jupyter主题</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># install jupyterthemes</span><br><span class=\"line\">pip install jupyterthemes</span><br><span class=\"line\"></span><br><span class=\"line\"># upgrade to latest version</span><br><span class=\"line\">pip install --upgrade jupyterthemes</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用主题\">使用主题</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jt -t monokai -fs 95 -altp -tfs 11 -nfs 115 -cellw 88% -N -T</span><br></pre></td></tr></table></figure>\n<h2 id=\"更多主题设置\">更多主题设置</h2>\n<p><a href=\"https://github.com/dunovank/jupyter-themes\" target=\"_blank\" rel=\"noopener\">jupyterthemes</a></p>\n<h1>jupyter_contrib_nbextensions</h1>\n<h2 id=\"安装jupyter-contrib-nbextensions\">安装jupyter_contrib_nbextensions</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install jupyter_contrib_nbextensions</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装js和css文件\">安装js和css文件</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jupyter contrib nbextension install --user</span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展选用\">扩展选用</h2>\n<p><img src=\"/images/2018-11-26/1543199245282.png\" alt=\"1543199245282\"></p>\n<h2 id=\"完成\">完成</h2>\n","site":{"data":{}},"excerpt":"","more":"<h1>jupyterthemes</h1>\n<h2 id=\"安装jupyter主题\">安装jupyter主题</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># install jupyterthemes</span><br><span class=\"line\">pip install jupyterthemes</span><br><span class=\"line\"></span><br><span class=\"line\"># upgrade to latest version</span><br><span class=\"line\">pip install --upgrade jupyterthemes</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用主题\">使用主题</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jt -t monokai -fs 95 -altp -tfs 11 -nfs 115 -cellw 88% -N -T</span><br></pre></td></tr></table></figure>\n<h2 id=\"更多主题设置\">更多主题设置</h2>\n<p><a href=\"https://github.com/dunovank/jupyter-themes\" target=\"_blank\" rel=\"noopener\">jupyterthemes</a></p>\n<h1>jupyter_contrib_nbextensions</h1>\n<h2 id=\"安装jupyter-contrib-nbextensions\">安装jupyter_contrib_nbextensions</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install jupyter_contrib_nbextensions</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装js和css文件\">安装js和css文件</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jupyter contrib nbextension install --user</span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展选用\">扩展选用</h2>\n<p><img src=\"/images/2018-11-26/1543199245282.png\" alt=\"1543199245282\"></p>\n<h2 id=\"完成\">完成</h2>\n"},{"title":"使用pipenv管理python项目","subtitle":"pipenv","date":"2018-11-19T06:19:10.000Z","description":"使用pipenv管理python项目","photos":[],"original":false,"_content":"## 安装pipenv\n\n```bash\npip install pipenv\n```\n\n## 项目初始化\n\n```bash\ncd your_project\nPIPENV_VENV_IN_PROJECT=true pipenv --python=3.6\n```\n\n将在项目目录中创建新文件`Pipfile`和一个虚拟环境`.venv`, `--python=3.6`则是使用`python3.6`来创建虚拟环境,`PIPENV_VENV_IN_PROJECT=true`则是让虚拟环境创建在该项目目录下，方便管理。\n\n 如果你添加--two或--three标志到上面的最后一个命令，它分别使用Python 2或3来初始化你的项目。 否则将使用默认版本的Python。\n\n## 激活开发环境\n\n```bash\npipenv shell\n```\n\n## 退出开发环境\n\n```bash\nexit\n```\n\n## 使用说明(`pipenv -h`)\n```bash\nUsage: pipenv [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --where             Output project home information.\n  --venv              Output virtualenv information.\n  --py                Output Python interpreter information.\n  --envs              Output Environment Variable options.\n  --rm                Remove the virtualenv.\n  --bare              Minimal output.\n  --completion        Output completion (to be eval'd).\n  --man               Display manpage.\n  --support           Output diagnostic information for use in GitHub issues.\n  --site-packages     Enable site-packages for the virtualenv.\n  --python TEXT       Specify which version of Python virtualenv should use.\n  --three / --two     Use Python 3/2 when creating virtualenv.\n  --clear             Clears caches (pipenv, pip, and pip-tools).\n  -v, --verbose       Verbose mode.\n  --pypi-mirror TEXT  Specify a PyPI mirror.\n  --version           Show the version and exit.\n  -h, --help          Show this message and exit.\n\n\nUsage Examples:\n   Create a new project using Python 3.7, specifically:\n   $ pipenv --python 3.7\n\n   Remove project virtualenv (inferred from current directory):\n   $ pipenv --rm\n\n   Install all dependencies for a project (including dev):\n   $ pipenv install --dev\n\n   Create a lockfile containing pre-releases:\n   $ pipenv lock --pre\n\n   Show a graph of your installed dependencies:\n   $ pipenv graph\n\n   Check your installed dependencies for security vulnerabilities:\n   $ pipenv check\n\n   Install a local setup.py into your virtual environment/Pipfile:\n   $ pipenv install -e .\n\n   Use a lower-level pip command:\n   $ pipenv run pip freeze\n\nCommands:\n  check      Checks for security vulnerabilities and against PEP 508 markers\n             provided in Pipfile.\n  clean      Uninstalls all packages not specified in Pipfile.lock.\n  graph      Displays currently-installed dependency graph information.\n  install    Installs provided packages and adds them to Pipfile, or (if no\n             packages are given), installs all packages from Pipfile.\n  lock       Generates Pipfile.lock.\n  open       View a given module in your editor.\n  run        Spawns a command installed into the virtualenv.\n  shell      Spawns a shell within the virtualenv.\n  sync       Installs all packages specified in Pipfile.lock.\n  uninstall  Un-installs a provided package and removes it from Pipfile.\n  update     Runs lock, then sync.\n```\n\n## 总结\n\n`pipenv`使得开发和管理项目包的过程变成的简单，让我们尽早使用起来吧。\n\n\n## 一些错误\n\n```text\n...\n  File \"/usr/lib/python3.7/site-packages/pipenv/vendor/pythonfinder/models/python.py\", line 70, in get_version_order\n    version_order = [versions[v] for v in parse_pyenv_version_order()]\nTypeError: 'NoneType' object is not iterable\n```\n\n这时可以使用下面的命令解决:\n\n```text\npyenv global 3.7.1\n```\n> `3.7.1换成你用pyenv安装过的环境`","source":"_posts/使用pipenv管理python项目.md","raw":"---\ntitle: 使用pipenv管理python项目\nsubtitle: pipenv\ndate: 2018-11-19 14:19:10\ndescription: 使用pipenv管理python项目\ntags: Python\ncategories: Python\nphotos:\noriginal: false\n---\n## 安装pipenv\n\n```bash\npip install pipenv\n```\n\n## 项目初始化\n\n```bash\ncd your_project\nPIPENV_VENV_IN_PROJECT=true pipenv --python=3.6\n```\n\n将在项目目录中创建新文件`Pipfile`和一个虚拟环境`.venv`, `--python=3.6`则是使用`python3.6`来创建虚拟环境,`PIPENV_VENV_IN_PROJECT=true`则是让虚拟环境创建在该项目目录下，方便管理。\n\n 如果你添加--two或--three标志到上面的最后一个命令，它分别使用Python 2或3来初始化你的项目。 否则将使用默认版本的Python。\n\n## 激活开发环境\n\n```bash\npipenv shell\n```\n\n## 退出开发环境\n\n```bash\nexit\n```\n\n## 使用说明(`pipenv -h`)\n```bash\nUsage: pipenv [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --where             Output project home information.\n  --venv              Output virtualenv information.\n  --py                Output Python interpreter information.\n  --envs              Output Environment Variable options.\n  --rm                Remove the virtualenv.\n  --bare              Minimal output.\n  --completion        Output completion (to be eval'd).\n  --man               Display manpage.\n  --support           Output diagnostic information for use in GitHub issues.\n  --site-packages     Enable site-packages for the virtualenv.\n  --python TEXT       Specify which version of Python virtualenv should use.\n  --three / --two     Use Python 3/2 when creating virtualenv.\n  --clear             Clears caches (pipenv, pip, and pip-tools).\n  -v, --verbose       Verbose mode.\n  --pypi-mirror TEXT  Specify a PyPI mirror.\n  --version           Show the version and exit.\n  -h, --help          Show this message and exit.\n\n\nUsage Examples:\n   Create a new project using Python 3.7, specifically:\n   $ pipenv --python 3.7\n\n   Remove project virtualenv (inferred from current directory):\n   $ pipenv --rm\n\n   Install all dependencies for a project (including dev):\n   $ pipenv install --dev\n\n   Create a lockfile containing pre-releases:\n   $ pipenv lock --pre\n\n   Show a graph of your installed dependencies:\n   $ pipenv graph\n\n   Check your installed dependencies for security vulnerabilities:\n   $ pipenv check\n\n   Install a local setup.py into your virtual environment/Pipfile:\n   $ pipenv install -e .\n\n   Use a lower-level pip command:\n   $ pipenv run pip freeze\n\nCommands:\n  check      Checks for security vulnerabilities and against PEP 508 markers\n             provided in Pipfile.\n  clean      Uninstalls all packages not specified in Pipfile.lock.\n  graph      Displays currently-installed dependency graph information.\n  install    Installs provided packages and adds them to Pipfile, or (if no\n             packages are given), installs all packages from Pipfile.\n  lock       Generates Pipfile.lock.\n  open       View a given module in your editor.\n  run        Spawns a command installed into the virtualenv.\n  shell      Spawns a shell within the virtualenv.\n  sync       Installs all packages specified in Pipfile.lock.\n  uninstall  Un-installs a provided package and removes it from Pipfile.\n  update     Runs lock, then sync.\n```\n\n## 总结\n\n`pipenv`使得开发和管理项目包的过程变成的简单，让我们尽早使用起来吧。\n\n\n## 一些错误\n\n```text\n...\n  File \"/usr/lib/python3.7/site-packages/pipenv/vendor/pythonfinder/models/python.py\", line 70, in get_version_order\n    version_order = [versions[v] for v in parse_pyenv_version_order()]\nTypeError: 'NoneType' object is not iterable\n```\n\n这时可以使用下面的命令解决:\n\n```text\npyenv global 3.7.1\n```\n> `3.7.1换成你用pyenv安装过的环境`","slug":"使用pipenv管理python项目","published":1,"updated":"2019-02-21T10:19:39.671Z","comments":1,"layout":"post","link":"","_id":"cjwztf1wc002lvifcuez93ipf","content":"<h2 id=\"安装pipenv\">安装pipenv</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pipenv</span><br></pre></td></tr></table></figure>\n<h2 id=\"项目初始化\">项目初始化</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> your_project</span><br><span class=\"line\">PIPENV_VENV_IN_PROJECT=<span class=\"literal\">true</span> pipenv --python=3.6</span><br></pre></td></tr></table></figure>\n<p>将在项目目录中创建新文件<code>Pipfile</code>和一个虚拟环境<code>.venv</code>, <code>--python=3.6</code>则是使用<code>python3.6</code>来创建虚拟环境,<code>PIPENV_VENV_IN_PROJECT=true</code>则是让虚拟环境创建在该项目目录下，方便管理。</p>\n<p>如果你添加–two或–three标志到上面的最后一个命令，它分别使用Python 2或3来初始化你的项目。 否则将使用默认版本的Python。</p>\n<h2 id=\"激活开发环境\">激活开发环境</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipenv shell</span><br></pre></td></tr></table></figure>\n<h2 id=\"退出开发环境\">退出开发环境</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用说明-pipenv-h\">使用说明(<code>pipenv -h</code>)</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: pipenv [OPTIONS] COMMAND [ARGS]...</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  --<span class=\"built_in\">where</span>             Output project home information.</span><br><span class=\"line\">  --venv              Output virtualenv information.</span><br><span class=\"line\">  --py                Output Python interpreter information.</span><br><span class=\"line\">  --envs              Output Environment Variable options.</span><br><span class=\"line\">  --rm                Remove the virtualenv.</span><br><span class=\"line\">  --bare              Minimal output.</span><br><span class=\"line\">  --completion        Output completion (to be <span class=\"built_in\">eval</span><span class=\"string\">'d).</span></span><br><span class=\"line\"><span class=\"string\">  --man               Display manpage.</span></span><br><span class=\"line\"><span class=\"string\">  --support           Output diagnostic information for use in GitHub issues.</span></span><br><span class=\"line\"><span class=\"string\">  --site-packages     Enable site-packages for the virtualenv.</span></span><br><span class=\"line\"><span class=\"string\">  --python TEXT       Specify which version of Python virtualenv should use.</span></span><br><span class=\"line\"><span class=\"string\">  --three / --two     Use Python 3/2 when creating virtualenv.</span></span><br><span class=\"line\"><span class=\"string\">  --clear             Clears caches (pipenv, pip, and pip-tools).</span></span><br><span class=\"line\"><span class=\"string\">  -v, --verbose       Verbose mode.</span></span><br><span class=\"line\"><span class=\"string\">  --pypi-mirror TEXT  Specify a PyPI mirror.</span></span><br><span class=\"line\"><span class=\"string\">  --version           Show the version and exit.</span></span><br><span class=\"line\"><span class=\"string\">  -h, --help          Show this message and exit.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Usage Examples:</span></span><br><span class=\"line\"><span class=\"string\">   Create a new project using Python 3.7, specifically:</span></span><br><span class=\"line\"><span class=\"string\">   $ pipenv --python 3.7</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   Remove project virtualenv (inferred from current directory):</span></span><br><span class=\"line\"><span class=\"string\">   $ pipenv --rm</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   Install all dependencies for a project (including dev):</span></span><br><span class=\"line\"><span class=\"string\">   $ pipenv install --dev</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   Create a lockfile containing pre-releases:</span></span><br><span class=\"line\"><span class=\"string\">   $ pipenv lock --pre</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   Show a graph of your installed dependencies:</span></span><br><span class=\"line\"><span class=\"string\">   $ pipenv graph</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   Check your installed dependencies for security vulnerabilities:</span></span><br><span class=\"line\"><span class=\"string\">   $ pipenv check</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   Install a local setup.py into your virtual environment/Pipfile:</span></span><br><span class=\"line\"><span class=\"string\">   $ pipenv install -e .</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   Use a lower-level pip command:</span></span><br><span class=\"line\"><span class=\"string\">   $ pipenv run pip freeze</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Commands:</span></span><br><span class=\"line\"><span class=\"string\">  check      Checks for security vulnerabilities and against PEP 508 markers</span></span><br><span class=\"line\"><span class=\"string\">             provided in Pipfile.</span></span><br><span class=\"line\"><span class=\"string\">  clean      Uninstalls all packages not specified in Pipfile.lock.</span></span><br><span class=\"line\"><span class=\"string\">  graph      Displays currently-installed dependency graph information.</span></span><br><span class=\"line\"><span class=\"string\">  install    Installs provided packages and adds them to Pipfile, or (if no</span></span><br><span class=\"line\"><span class=\"string\">             packages are given), installs all packages from Pipfile.</span></span><br><span class=\"line\"><span class=\"string\">  lock       Generates Pipfile.lock.</span></span><br><span class=\"line\"><span class=\"string\">  open       View a given module in your editor.</span></span><br><span class=\"line\"><span class=\"string\">  run        Spawns a command installed into the virtualenv.</span></span><br><span class=\"line\"><span class=\"string\">  shell      Spawns a shell within the virtualenv.</span></span><br><span class=\"line\"><span class=\"string\">  sync       Installs all packages specified in Pipfile.lock.</span></span><br><span class=\"line\"><span class=\"string\">  uninstall  Un-installs a provided package and removes it from Pipfile.</span></span><br><span class=\"line\"><span class=\"string\">  update     Runs lock, then sync.</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\">总结</h2>\n<p><code>pipenv</code>使得开发和管理项目包的过程变成的简单，让我们尽早使用起来吧。</p>\n<h2 id=\"一些错误\">一些错误</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  File &quot;/usr/lib/python3.7/site-packages/pipenv/vendor/pythonfinder/models/python.py&quot;, line 70, in get_version_order</span><br><span class=\"line\">    version_order = [versions[v] for v in parse_pyenv_version_order()]</span><br><span class=\"line\">TypeError: &apos;NoneType&apos; object is not iterable</span><br></pre></td></tr></table></figure>\n<p>这时可以使用下面的命令解决:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv global 3.7.1</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>3.7.1换成你用pyenv安装过的环境</code></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装pipenv\">安装pipenv</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pipenv</span><br></pre></td></tr></table></figure>\n<h2 id=\"项目初始化\">项目初始化</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> your_project</span><br><span class=\"line\">PIPENV_VENV_IN_PROJECT=<span class=\"literal\">true</span> pipenv --python=3.6</span><br></pre></td></tr></table></figure>\n<p>将在项目目录中创建新文件<code>Pipfile</code>和一个虚拟环境<code>.venv</code>, <code>--python=3.6</code>则是使用<code>python3.6</code>来创建虚拟环境,<code>PIPENV_VENV_IN_PROJECT=true</code>则是让虚拟环境创建在该项目目录下，方便管理。</p>\n<p>如果你添加–two或–three标志到上面的最后一个命令，它分别使用Python 2或3来初始化你的项目。 否则将使用默认版本的Python。</p>\n<h2 id=\"激活开发环境\">激活开发环境</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipenv shell</span><br></pre></td></tr></table></figure>\n<h2 id=\"退出开发环境\">退出开发环境</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用说明-pipenv-h\">使用说明(<code>pipenv -h</code>)</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: pipenv [OPTIONS] COMMAND [ARGS]...</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  --<span class=\"built_in\">where</span>             Output project home information.</span><br><span class=\"line\">  --venv              Output virtualenv information.</span><br><span class=\"line\">  --py                Output Python interpreter information.</span><br><span class=\"line\">  --envs              Output Environment Variable options.</span><br><span class=\"line\">  --rm                Remove the virtualenv.</span><br><span class=\"line\">  --bare              Minimal output.</span><br><span class=\"line\">  --completion        Output completion (to be <span class=\"built_in\">eval</span><span class=\"string\">'d).</span></span><br><span class=\"line\"><span class=\"string\">  --man               Display manpage.</span></span><br><span class=\"line\"><span class=\"string\">  --support           Output diagnostic information for use in GitHub issues.</span></span><br><span class=\"line\"><span class=\"string\">  --site-packages     Enable site-packages for the virtualenv.</span></span><br><span class=\"line\"><span class=\"string\">  --python TEXT       Specify which version of Python virtualenv should use.</span></span><br><span class=\"line\"><span class=\"string\">  --three / --two     Use Python 3/2 when creating virtualenv.</span></span><br><span class=\"line\"><span class=\"string\">  --clear             Clears caches (pipenv, pip, and pip-tools).</span></span><br><span class=\"line\"><span class=\"string\">  -v, --verbose       Verbose mode.</span></span><br><span class=\"line\"><span class=\"string\">  --pypi-mirror TEXT  Specify a PyPI mirror.</span></span><br><span class=\"line\"><span class=\"string\">  --version           Show the version and exit.</span></span><br><span class=\"line\"><span class=\"string\">  -h, --help          Show this message and exit.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Usage Examples:</span></span><br><span class=\"line\"><span class=\"string\">   Create a new project using Python 3.7, specifically:</span></span><br><span class=\"line\"><span class=\"string\">   $ pipenv --python 3.7</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   Remove project virtualenv (inferred from current directory):</span></span><br><span class=\"line\"><span class=\"string\">   $ pipenv --rm</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   Install all dependencies for a project (including dev):</span></span><br><span class=\"line\"><span class=\"string\">   $ pipenv install --dev</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   Create a lockfile containing pre-releases:</span></span><br><span class=\"line\"><span class=\"string\">   $ pipenv lock --pre</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   Show a graph of your installed dependencies:</span></span><br><span class=\"line\"><span class=\"string\">   $ pipenv graph</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   Check your installed dependencies for security vulnerabilities:</span></span><br><span class=\"line\"><span class=\"string\">   $ pipenv check</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   Install a local setup.py into your virtual environment/Pipfile:</span></span><br><span class=\"line\"><span class=\"string\">   $ pipenv install -e .</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">   Use a lower-level pip command:</span></span><br><span class=\"line\"><span class=\"string\">   $ pipenv run pip freeze</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Commands:</span></span><br><span class=\"line\"><span class=\"string\">  check      Checks for security vulnerabilities and against PEP 508 markers</span></span><br><span class=\"line\"><span class=\"string\">             provided in Pipfile.</span></span><br><span class=\"line\"><span class=\"string\">  clean      Uninstalls all packages not specified in Pipfile.lock.</span></span><br><span class=\"line\"><span class=\"string\">  graph      Displays currently-installed dependency graph information.</span></span><br><span class=\"line\"><span class=\"string\">  install    Installs provided packages and adds them to Pipfile, or (if no</span></span><br><span class=\"line\"><span class=\"string\">             packages are given), installs all packages from Pipfile.</span></span><br><span class=\"line\"><span class=\"string\">  lock       Generates Pipfile.lock.</span></span><br><span class=\"line\"><span class=\"string\">  open       View a given module in your editor.</span></span><br><span class=\"line\"><span class=\"string\">  run        Spawns a command installed into the virtualenv.</span></span><br><span class=\"line\"><span class=\"string\">  shell      Spawns a shell within the virtualenv.</span></span><br><span class=\"line\"><span class=\"string\">  sync       Installs all packages specified in Pipfile.lock.</span></span><br><span class=\"line\"><span class=\"string\">  uninstall  Un-installs a provided package and removes it from Pipfile.</span></span><br><span class=\"line\"><span class=\"string\">  update     Runs lock, then sync.</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\">总结</h2>\n<p><code>pipenv</code>使得开发和管理项目包的过程变成的简单，让我们尽早使用起来吧。</p>\n<h2 id=\"一些错误\">一些错误</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  File &quot;/usr/lib/python3.7/site-packages/pipenv/vendor/pythonfinder/models/python.py&quot;, line 70, in get_version_order</span><br><span class=\"line\">    version_order = [versions[v] for v in parse_pyenv_version_order()]</span><br><span class=\"line\">TypeError: &apos;NoneType&apos; object is not iterable</span><br></pre></td></tr></table></figure>\n<p>这时可以使用下面的命令解决:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv global 3.7.1</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>3.7.1换成你用pyenv安装过的环境</code></p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjwztf1uv0000vifc5gurur0s","category_id":"cjwztf1v30004vifcmvhue9yo","_id":"cjwztf1vg000hvifc7210mwaz"},{"post_id":"cjwztf1v00002vifcyge04i7n","category_id":"cjwztf1v30004vifcmvhue9yo","_id":"cjwztf1vj000mvifcwx0zhqst"},{"post_id":"cjwztf1v50006vifc4yb0z75l","category_id":"cjwztf1vg000gvifc9lifdg60","_id":"cjwztf1vl000svifcmjd0ptxw"},{"post_id":"cjwztf1v60008vifclhlrhvym","category_id":"cjwztf1vj000nvifcqox5ykns","_id":"cjwztf1vo000zvifcilxn8q25"},{"post_id":"cjwztf1v9000avifcsnwtto30","category_id":"cjwztf1vg000gvifc9lifdg60","_id":"cjwztf1vq0014vifcz3rks5us"},{"post_id":"cjwztf1vd000evifcihq20gfs","category_id":"cjwztf1vo000yvifcxbqt3ka6","_id":"cjwztf1vs001avifcfpjdncqx"},{"post_id":"cjwztf1vs0019vifcrrkqbdeq","category_id":"cjwztf1v30004vifcmvhue9yo","_id":"cjwztf1vu001gvifckdz151cg"},{"post_id":"cjwztf1vf000fvifc0xdmb6by","category_id":"cjwztf1vq0015vifcgxgl17cn","_id":"cjwztf1vv001kvifcqs0psmyc"},{"post_id":"cjwztf1vs001bvifclyy5dm98","category_id":"cjwztf1vq0015vifcgxgl17cn","_id":"cjwztf1vv001mvifc40pnx0nq"},{"post_id":"cjwztf1vh000kvifcwq9uqgn8","category_id":"cjwztf1vt001cvifcxbhdf85g","_id":"cjwztf1vw001pvifcdg4jahlg"},{"post_id":"cjwztf1vj000pvifchv7cqz16","category_id":"cjwztf1vu001hvifcw7bfc65r","_id":"cjwztf1vx001tvifccbjm30r1"},{"post_id":"cjwztf1vl000rvifcohp0kllu","category_id":"cjwztf1vw001qvifcodsrrcwq","_id":"cjwztf1vy001zvifcaqw8ldhx"},{"post_id":"cjwztf1vm000vvifczd27nj66","category_id":"cjwztf1vw001qvifcodsrrcwq","_id":"cjwztf1vz0023vifcbeki3k88"},{"post_id":"cjwztf1vn000xvifchal7q921","category_id":"cjwztf1vw001qvifcodsrrcwq","_id":"cjwztf1vz0027vifc36rtcj9l"},{"post_id":"cjwztf1vp0011vifcvj6p1c76","category_id":"cjwztf1vq0015vifcgxgl17cn","_id":"cjwztf1w0002avifchz9iyer7"},{"post_id":"cjwztf1vp0013vifcqs3pff8s","category_id":"cjwztf1vz0026vifcr01kfvgu","_id":"cjwztf1w1002fvifcmzx4ao0z"},{"post_id":"cjwztf1vr0017vifcawpx0uub","category_id":"cjwztf1vq0015vifcgxgl17cn","_id":"cjwztf1w2002hvifcj3grqaah"},{"post_id":"cjwztf1vi000lvifckqkfbk6y","category_id":"cjwztf1vu001hvifcw7bfc65r","_id":"cjwztf1w2002ivifcjfgtworf"},{"post_id":"cjwztf1vi000lvifckqkfbk6y","category_id":"cjwztf1w1002evifcqa8xdidn","_id":"cjwztf1w3002jvifchqlhbu5a"},{"post_id":"cjwztf1wb002kvifcbjd8xstu","category_id":"cjwztf1wd002mvifckvgnbs1b","_id":"cjwztf1wf002rvifcwfk4ed7v"},{"post_id":"cjwztf1wc002lvifcuez93ipf","category_id":"cjwztf1we002ovifcvxeqqsdz","_id":"cjwztf1wg002tvifclry5yxo3"}],"PostTag":[{"post_id":"cjwztf1uv0000vifc5gurur0s","tag_id":"cjwztf1v40005vifckq84u4rz","_id":"cjwztf1vd000dvifckk03d82s"},{"post_id":"cjwztf1v00002vifcyge04i7n","tag_id":"cjwztf1v40005vifckq84u4rz","_id":"cjwztf1vh000jvifctlud01ny"},{"post_id":"cjwztf1v50006vifc4yb0z75l","tag_id":"cjwztf1vg000ivifczl0fi1jm","_id":"cjwztf1vk000qvifcek5sc3dy"},{"post_id":"cjwztf1v60008vifclhlrhvym","tag_id":"cjwztf1vj000ovifcok8fo32p","_id":"cjwztf1vn000wvifcxp1t9ajv"},{"post_id":"cjwztf1v9000avifcsnwtto30","tag_id":"cjwztf1vg000ivifczl0fi1jm","_id":"cjwztf1vp0012vifckudekbmd"},{"post_id":"cjwztf1vd000evifcihq20gfs","tag_id":"cjwztf1vo0010vifcokrgfpvq","_id":"cjwztf1vr0018vifcft39hgxj"},{"post_id":"cjwztf1vs0019vifcrrkqbdeq","tag_id":"cjwztf1v40005vifckq84u4rz","_id":"cjwztf1vu001evifc3afkx4kl"},{"post_id":"cjwztf1vf000fvifc0xdmb6by","tag_id":"cjwztf1vq0016vifcws4uxr5j","_id":"cjwztf1vu001fvifc7wyuxffl"},{"post_id":"cjwztf1vs001bvifclyy5dm98","tag_id":"cjwztf1vq0016vifcws4uxr5j","_id":"cjwztf1vv001jvifcklwyeo3l"},{"post_id":"cjwztf1vh000kvifcwq9uqgn8","tag_id":"cjwztf1vt001dvifcc7nt7n0k","_id":"cjwztf1vv001lvifcjerpbbm1"},{"post_id":"cjwztf1vi000lvifckqkfbk6y","tag_id":"cjwztf1vu001ivifcbd6p0wsk","_id":"cjwztf1vw001svifcff8pw3mp"},{"post_id":"cjwztf1vi000lvifckqkfbk6y","tag_id":"cjwztf1vv001ovifckyyxzr5l","_id":"cjwztf1vx001uvifc88ve8q56"},{"post_id":"cjwztf1vj000pvifchv7cqz16","tag_id":"cjwztf1vu001ivifcbd6p0wsk","_id":"cjwztf1vx001xvifc29sfd0h6"},{"post_id":"cjwztf1vl000rvifcohp0kllu","tag_id":"cjwztf1vx001wvifc49krqavz","_id":"cjwztf1vy0021vifc9yddt9tq"},{"post_id":"cjwztf1vm000vvifczd27nj66","tag_id":"cjwztf1vx001wvifc49krqavz","_id":"cjwztf1vz0025vifcmzf5ooy5"},{"post_id":"cjwztf1vn000xvifchal7q921","tag_id":"cjwztf1vx001wvifc49krqavz","_id":"cjwztf1w00029vifcd2inzlq6"},{"post_id":"cjwztf1vp0011vifcvj6p1c76","tag_id":"cjwztf1vq0016vifcws4uxr5j","_id":"cjwztf1w1002dvifceb6qa4ng"},{"post_id":"cjwztf1vr0017vifcawpx0uub","tag_id":"cjwztf1vq0016vifcws4uxr5j","_id":"cjwztf1w2002gvifcjazjy1e8"},{"post_id":"cjwztf1wb002kvifcbjd8xstu","tag_id":"cjwztf1wd002nvifcpl6eeruj","_id":"cjwztf1wf002qvifcq1s76zy0"},{"post_id":"cjwztf1wc002lvifcuez93ipf","tag_id":"cjwztf1we002pvifceipyw897","_id":"cjwztf1wf002svifc5wo0grk8"}],"Tag":[{"name":"GitLab","_id":"cjwztf1v40005vifckq84u4rz"},{"name":"Hexo","_id":"cjwztf1vg000ivifczl0fi1jm"},{"name":"Linux","_id":"cjwztf1vj000ovifcok8fo32p"},{"name":"supervisor","_id":"cjwztf1vo0010vifcokrgfpvq"},{"name":"Django","_id":"cjwztf1vq0016vifcws4uxr5j"},{"name":"PostgreSQL","_id":"cjwztf1vt001dvifcc7nt7n0k"},{"name":"Ubuntu","_id":"cjwztf1vu001ivifcbd6p0wsk"},{"name":"工具","_id":"cjwztf1vv001ovifckyyxzr5l"},{"name":"vue","_id":"cjwztf1vx001wvifc49krqavz"},{"name":"jupyter","_id":"cjwztf1wd002nvifcpl6eeruj"},{"name":"Python","_id":"cjwztf1we002pvifceipyw897"}]}}