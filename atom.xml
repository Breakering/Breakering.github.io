<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jacob Blog</title>
  
  <subtitle>Python is cool!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.breakering.com/"/>
  <updated>2018-11-16T08:42:41.767Z</updated>
  <id>http://blog.breakering.com/</id>
  
  <author>
    <name>Jacob</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我的壁纸</title>
    <link href="http://blog.breakering.com/2018/11/16/%E6%88%91%E7%9A%84%E5%A3%81%E7%BA%B8/"/>
    <id>http://blog.breakering.com/2018/11/16/我的壁纸/</id>
    <published>2018-11-16T08:40:01.000Z</published>
    <updated>2018-11-16T08:42:41.767Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="wallpaper" scheme="http://blog.breakering.com/categories/wallpaper/"/>
    
    
      <category term="wallpaper" scheme="http://blog.breakering.com/tags/wallpaper/"/>
    
  </entry>
  
  <entry>
    <title>在Django中实现queryset级别缓存</title>
    <link href="http://blog.breakering.com/2018/11/16/%E5%9C%A8Django%E4%B8%AD%E5%AE%9E%E7%8E%B0queryset%E7%BA%A7%E5%88%AB%E7%BC%93%E5%AD%98/"/>
    <id>http://blog.breakering.com/2018/11/16/在Django中实现queryset级别缓存/</id>
    <published>2018-11-16T03:50:19.000Z</published>
    <updated>2018-11-16T05:13:45.336Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>实现queryset级别的缓存，不是view层面的，相当于缓存sql查询结果。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="首先在你的django项目中安装依赖的模块"><a href="#首先在你的django项目中安装依赖的模块" class="headerlink" title="首先在你的django项目中安装依赖的模块"></a>首先在你的django项目中安装依赖的模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-cache-machine</span><br></pre></td></tr></table></figure><h3 id="创建queryset-cache-py文件-文件内容如下"><a href="#创建queryset-cache-py文件-文件内容如下" class="headerlink" title="创建queryset_cache.py文件,文件内容如下"></a>创建queryset_cache.py文件,文件内容如下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__ = "Breakering"</span></span><br><span class="line"><span class="comment"># Date: 18-8-29</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">依赖django-cache-machine，并在此基础上实现了轻松切换使用queryset级别缓存以及count等缓存</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> caching <span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> caching.base <span class="keyword">import</span> CachingQuerySet, cached_with</span><br><span class="line"><span class="keyword">from</span> django.db.models.sql <span class="keyword">import</span> query</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">queryset_cache_decorator</span><span class="params">(always_cached=True)</span>:</span></span><br><span class="line">    <span class="string">"""queryset级别缓存的装饰器，可以使得queryset直接从缓存中获取数据"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">            queryset = func(self, *args, **kwargs)</span><br><span class="line">            <span class="keyword">if</span> always_cached:  <span class="comment"># 此装饰器默认从cache中获取数据</span></span><br><span class="line">                queryset = queryset.from_cache()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">with</span> contextlib.suppress(Exception):</span><br><span class="line">                    queryset_cache_time = self.request.query_params.get(<span class="string">'queryset_cache_time'</span>, <span class="string">''</span>)</span><br><span class="line">                    <span class="keyword">if</span> queryset_cache_time <span class="keyword">and</span> queryset_cache_time.isdigit():</span><br><span class="line">                        queryset = queryset.from_cache(int(queryset_cache_time))</span><br><span class="line">            <span class="keyword">return</span> queryset</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">queryset_cache_count_decorator</span><span class="params">(always_cached=True)</span>:</span></span><br><span class="line">    <span class="string">"""queryset count缓存的装饰器，可以使得queryset直接从缓存中获取count的值"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">            queryset = func(self, *args, **kwargs)</span><br><span class="line">            <span class="keyword">if</span> always_cached:  <span class="comment"># 此装饰器默认从cache中获取数据</span></span><br><span class="line">                queryset = queryset.cache_count()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">with</span> contextlib.suppress(Exception):</span><br><span class="line">                    queryset_cache_time = self.request.query_params.get(<span class="string">'queryset_cache_time'</span>, <span class="string">''</span>)</span><br><span class="line">                    <span class="keyword">if</span> queryset_cache_time <span class="keyword">and</span> queryset_cache_time.isdigit():</span><br><span class="line">                        queryset = queryset.cache_count(int(queryset_cache_time))</span><br><span class="line">            <span class="keyword">return</span> queryset</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CachedQuerySet</span><span class="params">(CachingQuerySet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return queryset from cache if query_key in cache</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super(CachedQuerySet, self).__init__(*args, **kwargs)</span><br><span class="line">        self.timeout = config.NO_CACHE  <span class="comment"># 默认直接从数据库取数据</span></span><br><span class="line">        self.cache_count_timeout = config.NO_CACHE  <span class="comment"># 自定义queryset count的缓存时间</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_clone</span><span class="params">(self, *args, **kw)</span>:</span></span><br><span class="line">        qs = super(CachedQuerySet, self)._clone(*args, **kw)</span><br><span class="line">        qs.cache_count_timeout = self.cache_count_timeout</span><br><span class="line">        <span class="keyword">return</span> qs</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_cache</span><span class="params">(self, timeout=<span class="number">60</span>*<span class="number">60</span>)</span>:</span></span><br><span class="line">        <span class="string">"""在queryset中调用此函数则是从缓存中获取,且调用之后返回的仍是queryset"""</span></span><br><span class="line">        self.timeout = timeout</span><br><span class="line">        <span class="keyword">return</span> self._clone()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cache_count</span><span class="params">(self, cache_count_timeout=<span class="number">60</span>*<span class="number">60</span>)</span>:</span></span><br><span class="line">        <span class="string">"""实现queryset count的缓存,且调用之后返回的仍是queryset"""</span></span><br><span class="line">        self.cache_count_timeout = cache_count_timeout</span><br><span class="line">        <span class="keyword">return</span> self._clone()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># todo values目前的实现方式有BUG，现已取消</span></span><br><span class="line">    <span class="comment"># def values(self, *fields, **expressions):</span></span><br><span class="line">    <span class="comment">#     """rewrite queryset's values"""</span></span><br><span class="line">    <span class="comment">#     if self.timeout == config.NO_CACHE:  # 默认情况下values直接从数据库获取数据</span></span><br><span class="line">    <span class="comment">#         return super(CachedQuerySet, self).values(*fields, **expressions)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#     clone = self._clone()</span></span><br><span class="line">    <span class="comment">#     clone.query.set_values(fields)</span></span><br><span class="line">    <span class="comment">#     key = make_key('values:&#123;key&#125;'.format(key=clone.query_key()))</span></span><br><span class="line">    <span class="comment">#     val = cache.get(key)</span></span><br><span class="line">    <span class="comment">#     if val is None:</span></span><br><span class="line">    <span class="comment">#         val = super(CachedQuerySet, self).values(*fields, **expressions)</span></span><br><span class="line">    <span class="comment">#         cache.set(key, val, self.timeout)</span></span><br><span class="line">    <span class="comment">#     return val</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""自定义queryset的count"""</span></span><br><span class="line">        super_count = super(CachingQuerySet, self).count</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            query_string = <span class="string">'count:%s'</span> % self.query_key()</span><br><span class="line">        <span class="keyword">except</span> query.EmptyResultSet:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> self.cache_count_timeout:</span><br><span class="line">            <span class="keyword">return</span> cached_with(self, super_count, query_string, self.cache_count_timeout)</span><br><span class="line">        <span class="keyword">elif</span> self.timeout == config.NO_CACHE <span class="keyword">or</span> config.TIMEOUT == config.NO_CACHE:</span><br><span class="line">            <span class="keyword">return</span> super_count()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> cached_with(self, super_count, query_string, config.TIMEOUT)</span><br></pre></td></tr></table></figure><h3 id="改造您的model"><a href="#改造您的model" class="headerlink" title="改造您的model"></a>改造您的model</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> queryset_cache <span class="keyword">import</span> CachedQuerySet</span><br><span class="line"><span class="keyword">from</span> caching.base <span class="keyword">import</span> CachingMixin</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelClassManger</span><span class="params">(models.Manager)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> CachedQuerySet(self.model)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelClass</span><span class="params">(CachingMixin, models.Model)</span>:</span></span><br><span class="line">    objects = ModelClassManger()</span><br></pre></td></tr></table></figure><h3 id="view层只需在get-queryset上加上装饰器即可"><a href="#view层只需在get-queryset上加上装饰器即可" class="headerlink" title="view层只需在get_queryset上加上装饰器即可"></a>view层只需在get_queryset上加上装饰器即可</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@queryset_cache_count_decorator()</span></span><br><span class="line"><span class="meta">@queryset_cache_decorator()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>如果添加了always_cached=False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@queryset_cache_count_decorator(always_cached=False)</span></span><br><span class="line"><span class="meta">@queryset_cache_decorator(always_cached=False)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>则需要在query参数中加上queryset_cache_time=180,参数后面的数字即为缓存的时间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;实现queryset级别的缓存，不是view层面的，相当于缓存sql查询结果。&lt;/p&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; 
      
    
    </summary>
    
      <category term="Django" scheme="http://blog.breakering.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://blog.breakering.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Hexo同步</title>
    <link href="http://blog.breakering.com/2018/11/15/Hexo%E5%90%8C%E6%AD%A5/"/>
    <id>http://blog.breakering.com/2018/11/15/Hexo同步/</id>
    <published>2018-11-15T07:27:52.000Z</published>
    <updated>2018-11-15T08:07:19.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>用来生成静态页面, 到<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js官网</a>，下载最新版本, 根据提示一路安装即可</p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>当Node.js和Git都安装好后就可以正式安装Hexo了，终端执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo</span><br></pre></td></tr></table></figure><h3 id="克隆hexo分支"><a href="#克隆hexo分支" class="headerlink" title="克隆hexo分支"></a>克隆hexo分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b hexo https://github.com/Breakering/breakering.github.io.git</span><br></pre></td></tr></table></figure><h3 id="进入breakering-github-io-git"><a href="#进入breakering-github-io-git" class="headerlink" title="进入breakering.github.io.git"></a>进入breakering.github.io.git</h3><p>创建博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &apos;博客名&apos;</span><br></pre></td></tr></table></figure><p>发表博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><h3 id="主题配置更新相关"><a href="#主题配置更新相关" class="headerlink" title="主题配置更新相关"></a>主题配置更新相关</h3><p>需要先清空缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>然后进行部署操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><h3 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h3><ol><li>报错一: 若执行命令hexo deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol start="2"><li>报错二: 若执行命令hexo d报以下错误:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR Plugin load failed: hexo-server </span><br><span class="line">//或者类似的错误 </span><br><span class="line">ERROR Plugin load failed: hexo-renderer-sass</span><br></pre></td></tr></table></figure><p>则执行响应的命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-server</span><br><span class="line">//或者</span><br><span class="line">sudo npm install hexo-renderer-sass</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      其他电脑同步博客的方法!
    
    </summary>
    
      <category term="Hexo" scheme="http://blog.breakering.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://blog.breakering.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo初识</title>
    <link href="http://blog.breakering.com/2018/09/28/hello-world/"/>
    <id>http://blog.breakering.com/2018/09/28/hello-world/</id>
    <published>2018-09-28T12:58:27.000Z</published>
    <updated>2018-11-15T07:27:29.462Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      简单介绍hexo的用法.
    
    </summary>
    
      <category term="Hexo" scheme="http://blog.breakering.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://blog.breakering.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>内网穿透frp</title>
    <link href="http://blog.breakering.com/2018/09/28/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8Ffrp/"/>
    <id>http://blog.breakering.com/2018/09/28/内网穿透frp/</id>
    <published>2018-09-28T12:58:27.000Z</published>
    <updated>2018-11-16T08:08:06.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、内网穿透原理"><a href="#一、内网穿透原理" class="headerlink" title="一、内网穿透原理"></a>一、内网穿透原理</h1><p>简单地说，内网穿透依赖于 NAT 原理，根据 NAT 设备不同大致可分为以下 4 大类(前3种NAT类型可统称为cone类型)：</p><ul><li>全克隆(Full Cone)：NAT 把所有来自相同内部 IP 地址和端口的请求映射到相同的外部 IP 地址和端口上，任何一个外部主机均可通过该映射反向发送 IP 包到该内部主机</li><li>限制性克隆(Restricted Cone)：NAT 把所有来自相同内部 IP 地址和端口的请求映射到相同的外部 IP 地址和端口；但是，只有当内部主机先给 IP 地址为 X 的外部主机发送 IP 包时，该外部主机才能向该内部主机发送 IP 包</li><li>端口限制性克隆(Port Restricted Cone)：端口限制性克隆与限制性克隆类似，只是多了端口号的限制，即只有内部主机先向 IP 地址为 X，端口号为 P 的外部主机发送1个 IP 包,该外部主机才能够把源端口号为 P 的 IP 包发送给该内部主机</li><li>对称式NAT(Symmetric NAT)：这种类型的 NAT 与上述3种类型的不同，在于当同一内部主机使用相同的端口与不同地址的外部主机进行通信时， NAT 对该内部主机的映射会有所不同；对称式 NAT 不保证所有会话中的私有地址和公开 IP 之间绑定的一致性；相反，它为每个新的会话分配一个新的端口号；导致此种 NAT 根本没法穿透</li></ul><p>内网穿透的作用就是利用以上规则，创建一条从外部服务器到内部设备的 “隧道”，具体的 NAT 原理等可参考 内网打洞、网络地址转换NAT原理。</p><h1 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h1><p>实际上根据以上 NAT 规则，基本上大部分家用设备和运营商上级路由等都在前三种规则之中，所以只需要借助成熟的内网穿透工具即可，以下为本次穿透环境</p><ul><li>最新版本 frp</li><li>一台公网 VPS 服务器</li><li>内网一台服务器，最好 Linux 系统</li></ul><h1 id="三、服务端搭建"><a href="#三、服务端搭建" class="headerlink" title="三、服务端搭建"></a>三、服务端搭建</h1><p>服务器作为公网访问唯一的固定地址，即作为 server 端；内网客户端作为 client 端，会主动向 server 端创建连接，此时再从 server 端反向发送数据即可实现内网穿透</p><h2 id="3-1-下载并解压frp"><a href="#3-1-下载并解压frp" class="headerlink" title="3.1). 下载并解压frp"></a>3.1). 下载并解压frp</h2><p>可以查看<a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">releases</a>获取最新的版本,选好版本之后使用以下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_amd64.tar.gz</span><br><span class="line">tar -zxvf frp_0.21.0_linux_amd64.tar.gz</span><br><span class="line">cd frp_0.21.0_linux_amd64</span><br></pre></td></tr></table></figure><h2 id="3-2-编辑frps-ini"><a href="#3-2-编辑frps-ini" class="headerlink" title="3.2). 编辑frps.ini"></a>3.2). 编辑frps.ini</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[common]                                                                                                                                                                                                </span><br><span class="line"># frp 监听地址</span><br><span class="line">bind_addr = 0.0.0.0</span><br><span class="line">bind_port = 7000</span><br><span class="line"></span><br><span class="line"># 如果需要代理 web(http) 服务，则开启此端口</span><br><span class="line">vhost_http_port = 8080</span><br><span class="line">vhost_https_port = 4443</span><br><span class="line"></span><br><span class="line"># frp 控制面板</span><br><span class="line">dashboard_port = 7500</span><br><span class="line">dashboard_user = user</span><br><span class="line">dashboard_pwd = pwd</span><br><span class="line"></span><br><span class="line"># 默认日志输出位置(这里输出到标准输出)</span><br><span class="line">log_file = /tmp/frps.log</span><br><span class="line"># 日志级别，支持: debug, info, warn, error</span><br><span class="line">log_level = info</span><br><span class="line">log_max_days = 3</span><br><span class="line"></span><br><span class="line"># 是否开启特权模式(特权模式下，客户端更改配置无需更新服务端)</span><br><span class="line">privilege_mode = true</span><br><span class="line"># 授权 token 建议随机生成</span><br><span class="line">privilege_token = cc23*********************d072734</span><br><span class="line"># 特权模式下允许分配的端口(避免端口滥用)</span><br><span class="line">privilege_allow_ports = 4000-50000</span><br><span class="line"></span><br><span class="line"># 后端连接池最大连接数量</span><br><span class="line">max_pool_count = 100</span><br><span class="line"></span><br><span class="line"># 口令超时时间</span><br><span class="line">authentication_timeout = 900</span><br><span class="line"></span><br><span class="line"># 子域名(特权模式下将 *.xxxx.com 解析到公网服务器)</span><br><span class="line">subdomain_host = xxxx.com</span><br></pre></td></tr></table></figure><p><strong>其他具体配置说明请参考<a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">frp README</a> 文档</strong></p><h2 id="3-3-启动frp-server"><a href="#3-3-启动frp-server" class="headerlink" title="3.3). 启动frp server"></a>3.3). 启动frp server</h2><p>设置完成后执行 ./frps -c frps.ini 启动即可</p><p><strong>ps:当然也可以使用supervisor来管理</strong></p><h1 id="四、客户端配置"><a href="#四、客户端配置" class="headerlink" title="四、客户端配置"></a>四、客户端配置</h1><p>客户端作为发起链接的主动方，只需要正确配置服务器地址，以及要映射客户端的哪些服务端口等即可</p><h2 id="4-1-下载并解压frp"><a href="#4-1-下载并解压frp" class="headerlink" title="4.1). 下载并解压frp"></a>4.1). 下载并解压frp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_amd64.tar.gz</span><br><span class="line">tar -zxvf frp_0.21.0_linux_amd64.tar.gz</span><br><span class="line">cd frp_0.21.0_linux_amd64</span><br></pre></td></tr></table></figure><h2 id="4-2-编辑frpc-ini"><a href="#4-2-编辑frpc-ini" class="headerlink" title="4.2). 编辑frpc.ini"></a>4.2). 编辑frpc.ini</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 127.0.0.1</span><br><span class="line">server_port = 7000</span><br><span class="line"># console or real logFile path like ./frpc.log</span><br><span class="line">log_file = /tmp/frpc.log</span><br><span class="line"></span><br><span class="line"># debug, info, warn, error</span><br><span class="line">log_level = debug</span><br><span class="line"></span><br><span class="line">log_max_days = 3</span><br><span class="line"></span><br><span class="line"># 特权模式，要和服务器端的配置一致</span><br><span class="line">privilege_token = cc23*********************d072734</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[gitlab]</span><br><span class="line">type = http</span><br><span class="line">local_port = 8080</span><br><span class="line">subdomain = gitlab  # 这样只要访问http://gitlab.xxxx.com:8080即可访问到该客户端的gitlab服务</span><br><span class="line">use_gzip = true</span><br><span class="line"></span><br><span class="line">[gitlab_static_file]</span><br><span class="line">type = tcp</span><br><span class="line">remote_port = 8082</span><br><span class="line">plugin = static_file</span><br><span class="line"># 要对外暴露的文件目录</span><br><span class="line">plugin_local_path = /opt/gitlab/embedded/service/gitlab-rails/public/assets/</span><br><span class="line"># 访问 url 中会被去除的前缀，保留的内容即为要访问的文件路径</span><br><span class="line">plugin_strip_prefix = assets</span><br><span class="line">#plugin_http_user = abc</span><br><span class="line">#plugin_http_passwd = abc</span><br><span class="line"></span><br><span class="line">[gitlab_ssh]</span><br><span class="line">type = tcp </span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 8081</span><br></pre></td></tr></table></figure><p><strong>其他具体配置说明请参考<a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">frp README</a> 文档</strong></p><h2 id="4-3-启动frp-client"><a href="#4-3-启动frp-client" class="headerlink" title="4.3). 启动frp client"></a>4.3). 启动frp client</h2><p>设置完成后执行 ./frpc -c frpc.ini 启动即可</p><p><strong>ps:当然也可以使用supervisor来管理</strong></p><h1 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h1><p>服务端和客户端同时开启完成后，即可访问 <a href="http://127.0.0.1:7500" target="_blank" rel="noopener">http://127.0.0.1:7500</a> 进入 frp 控制面板，如下<br><img src="/images/1046366-20180927105622574-1652030646.png" alt=""><br><img src="/images/1046366-20180927105631267-34167117.png" alt=""><br>此时通过 ssh <a href="mailto:root@127.0.0.1" target="_blank" rel="noopener">root@127.0.0.1</a> -p 8081 即可ssh到gitlab，通过访问<a href="http://gitlab.xxxx.com:8080" target="_blank" rel="noopener">http://gitlab.xxxx.com:8080</a> 即可访问gitlab服务</p><h1 id="六、GitLab通过frp代理"><a href="#六、GitLab通过frp代理" class="headerlink" title="六、GitLab通过frp代理"></a>六、GitLab通过frp代理</h1><p>通过上述配置，确实可以通过 <a href="http://gitlab.xxxx.com:8080" target="_blank" rel="noopener">http://gitlab.xxxx.com:8080</a> 访问gitlab服务,但是你会发现缺少静态文件,因为gitlab的静态文件是nginx代理的，走的tcp协议,需要一种解决方案。</p><h2 id="方案一、使用frp的static-file的插件"><a href="#方案一、使用frp的static-file的插件" class="headerlink" title="方案一、使用frp的static_file的插件"></a>方案一、使用frp的static_file的插件</h2><p>虽然可以成功，通过 <a href="http://127.0.0.1:8082" target="_blank" rel="noopener">http://127.0.0.1:8082</a> 即可访问gitlab的静态文件，并且也可以通过nginx反向代理到gitlab.xxxx.com这个域名上，但是速度会很慢很慢,nginx配置如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;                                                                                                                                                                                                    </span><br><span class="line">    listen  80; </span><br><span class="line">    server_name  gitlab.xxxx.com;</span><br><span class="line">    location / &#123; </span><br><span class="line">        proxy_pass http://gitlab.xxxx.com:8080;</span><br><span class="line">    &#125;   </span><br><span class="line">    location /assets &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8082;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方案二、将gitlab静态文件移至服务器上，用nginx代理"><a href="#方案二、将gitlab静态文件移至服务器上，用nginx代理" class="headerlink" title="方案二、将gitlab静态文件移至服务器上，用nginx代理"></a>方案二、将gitlab静态文件移至服务器上，用nginx代理</h2><p>gitlab静态文件在如下位置<code>/opt/gitlab/embedded/service/gitlab-rails/public/assets/</code>放至服务器，并配置nginx如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;                                                                                                                                                                                                    </span><br><span class="line">    listen  80;</span><br><span class="line">    server_name  gitlab.xxxx.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://gitlab.xxxx.com:8080;</span><br><span class="line">    &#125;</span><br><span class="line">    location /assets &#123;</span><br><span class="line">        alias /webapps/gitlab/public/assets;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样即可通过 <a href="http://gitlab.xxxx.com" target="_blank" rel="noopener">http://gitlab.xxxx.com</a> 正常访问内网的gitlab了</p><p>但是这样还没结束，你会发现外网通过git clone <a href="http://gitlab.xxxx.com/zhuqian/licaishi.git" target="_blank" rel="noopener">http://gitlab.xxxx.com/zhuqian/licaishi.git</a> ,根本没法正常克隆仓库，那有啥用啊，别急，咋们还可以用ssh方式啊。</p><p>上面我们已经配置gitlab的22端口映射到服务器的8081端口了，所以可以这样克隆:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone ssh://git@127.0.0.1:8081/zhuqian/licaishi.git</span><br><span class="line"># 或者</span><br><span class="line">git clone ssh://git@gitlab.xxxx.com:8081/zhuqian/licaishi.git</span><br></pre></td></tr></table></figure><p>对于pip install的话，可以这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install git+ssh://git@127.0.0.1:8081/zhuqian/algorithm.git</span><br><span class="line"># 或者</span><br><span class="line">pip install git+ssh://git@gitlab.xxxx.com:8081/zhuqian/algorithm.git</span><br></pre></td></tr></table></figure><p>你以为就这样完了，还没有，我们想要直接能在gitlab项目首页直接能够显示git访问方法，效果如下:<br><img src="/images/1046366-20180927105727421-1721871308.png" alt=""></p><p>要实现此效果，只需配置下<code>/etc/gitlab/gitlab.rb</code>即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">external_url &apos;http://gitlab.xxxx.com&apos;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">gitlab_rails[&apos;gitlab_shell_ssh_port&apos;] = 8081</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>另外需要注意下<code>nginx[&#39;listen_addresses&#39;] = [&#39;192.168.10.60&#39;]</code>，需要对应到本地的ip地址</p></blockquote></blockquote><p>配置完之后:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p>然后通过域名访问gitlab即可实现上述效果了，只不过http方式目前还无法解决。</p><h1 id="七、由mtu引起的无法访问的问题"><a href="#七、由mtu引起的无法访问的问题" class="headerlink" title="七、由mtu引起的无法访问的问题"></a>七、由mtu引起的无法访问的问题</h1><p>如果frp的admin界面一切正常，但是就是无法获取数据</p><p><img src="/images/1046366-20180927105741148-1074788234.png" alt=""></p><p>那么极有可能是你本地的网络最大分片小于服务器的最大分片，导致数据无法发送出去,解决办法是减小服务器的mtu:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig eth0 mtu 1000 up</span><br></pre></td></tr></table></figure><p>其他修改mtu的方式请自行google。</p><h1 id="八、References"><a href="#八、References" class="headerlink" title="八、References:"></a>八、References:</h1><ol><li><a href="https://mritd.me/2017/01/21/use-frp-for-internal-network-wear/" target="_blank" rel="noopener">利用 frp 进行内网穿透</a></li></ol>]]></content>
    
    <summary type="html">
    
      简单地说，内网穿透依赖于 NAT 原理，根据 NAT 设备不同大致可分为以下 4 大类(前3种NAT类型可统称为cone类型)
    
    </summary>
    
      <category term="内网穿透" scheme="http://blog.breakering.com/categories/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
    
  </entry>
  
</feed>
