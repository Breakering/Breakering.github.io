<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jacob个人技术博客</title>
  
  <subtitle>Python is cool!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.breakering.com/"/>
  <updated>2018-11-26T02:28:36.922Z</updated>
  <id>http://blog.breakering.com/</id>
  
  <author>
    <name>Jacob</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jupyter美化</title>
    <link href="http://blog.breakering.com/2018/11/26/jupyter%E7%BE%8E%E5%8C%96/"/>
    <id>http://blog.breakering.com/2018/11/26/jupyter美化/</id>
    <published>2018-11-26T02:17:10.000Z</published>
    <updated>2018-11-26T02:28:36.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jupyterthemes"><a href="#jupyterthemes" class="headerlink" title="jupyterthemes"></a>jupyterthemes</h1><h2 id="安装jupyter主题"><a href="#安装jupyter主题" class="headerlink" title="安装jupyter主题"></a>安装jupyter主题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># install jupyterthemes</span><br><span class="line">pip install jupyterthemes</span><br><span class="line"></span><br><span class="line"># upgrade to latest version</span><br><span class="line">pip install --upgrade jupyterthemes</span><br></pre></td></tr></table></figure><h2 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jt -t monokai -fs 95 -altp -tfs 11 -nfs 115 -cellw 88% -N -T</span><br></pre></td></tr></table></figure><h2 id="更多主题设置"><a href="#更多主题设置" class="headerlink" title="更多主题设置"></a>更多主题设置</h2><p><a href="https://github.com/dunovank/jupyter-themes" target="_blank" rel="noopener">jupyterthemes</a></p><h1 id="jupyter-contrib-nbextensions"><a href="#jupyter-contrib-nbextensions" class="headerlink" title="jupyter_contrib_nbextensions"></a>jupyter_contrib_nbextensions</h1><h2 id="安装jupyter-contrib-nbextensions"><a href="#安装jupyter-contrib-nbextensions" class="headerlink" title="安装jupyter_contrib_nbextensions"></a>安装jupyter_contrib_nbextensions</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter_contrib_nbextensions</span><br></pre></td></tr></table></figure><h2 id="安装js和css文件"><a href="#安装js和css文件" class="headerlink" title="安装js和css文件"></a>安装js和css文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter contrib nbextension install --user</span><br></pre></td></tr></table></figure><h2 id="扩展选用"><a href="#扩展选用" class="headerlink" title="扩展选用"></a>扩展选用</h2><p><img src="/images/2018-11-26/1543199245282.png" alt="1543199245282"></p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content>
    
    <summary type="html">
    
      jupyter美化
    
    </summary>
    
      <category term="jupyter" scheme="http://blog.breakering.com/categories/jupyter/"/>
    
    
      <category term="jupyter" scheme="http://blog.breakering.com/tags/jupyter/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 中 Typora 安装</title>
    <link href="http://blog.breakering.com/2018/11/26/ubuntu-%E4%B8%AD-Typora-%E5%AE%89%E8%A3%85/"/>
    <id>http://blog.breakering.com/2018/11/26/ubuntu-中-Typora-安装/</id>
    <published>2018-11-26T01:53:19.000Z</published>
    <updated>2018-11-26T07:20:16.742Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># optional, but recommended</span><br><span class="line"></span><br><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span><br><span class="line"></span><br><span class="line"># add Typora&apos;s repository</span><br><span class="line"></span><br><span class="line">sudo add-apt-repository &apos;deb http://typora.io linux/&apos;</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"># install typora</span><br><span class="line"></span><br><span class="line">sudo apt-get install typora</span><br></pre></td></tr></table></figure><blockquote><p>  另外推荐安装下Vue的theme，地址:<a href="https://theme.typora.io/theme/Vue/" target="_blank" rel="noopener">https://theme.typora.io/theme/Vue/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      ubuntu 中 Typora 安装
    
    </summary>
    
      <category term="Ubuntu" scheme="http://blog.breakering.com/categories/Ubuntu/"/>
    
      <category term="工具" scheme="http://blog.breakering.com/categories/Ubuntu/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Ubuntu" scheme="http://blog.breakering.com/tags/Ubuntu/"/>
    
      <category term="工具" scheme="http://blog.breakering.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>GitLab升级</title>
    <link href="http://blog.breakering.com/2018/11/19/GitLab%E5%8D%87%E7%BA%A7/"/>
    <id>http://blog.breakering.com/2018/11/19/GitLab升级/</id>
    <published>2018-11-19T08:18:49.000Z</published>
    <updated>2018-11-19T08:20:28.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="更新-GitLab"><a href="#更新-GitLab" class="headerlink" title="更新 GitLab"></a>更新 GitLab</h1><blockquote><p>我们用的是 GitLab Omnibus 7.10.5 版本，查到<a href="http://docs.gitlab.com/omnibus/update/README.html" target="_blank" rel="noopener">Doc</a>（6.x.x 等低版本区别对待，详见文档）。<br>按照文档：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># To update to a newer GitLab version, all you have to do is:</span><br><span class="line"># Debian/Ubuntu</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install gitlab-ce</span><br><span class="line"># Centos/RHEL</span><br><span class="line">sudo yum install gitlab-ce</span><br></pre></td></tr></table></figure></p></blockquote><p>看起来太简单了！事实上，也就是这么简单。</p><p>但是，问题来了，<code>sudo apt-get install gilab-ce</code> 默认所用的源是 <em>packages-gitlab-com.s3.amazonaws.com</em>，然后你懂的，被墙了！</p><p>解决办法有两个：</p><ol><li>给 apt 加代理；</li><li>换源。</li></ol><h2 id="1-给-apt-加代理"><a href="#1-给-apt-加代理" class="headerlink" title="1). 给 apt 加代理"></a>1). 给 apt 加代理</h2><p>考虑到换源可能产生其他的依赖问题，先尝试 加代理。结果是加了代理还是不行！原因可能是代理连接速度问题，总是超时。</p><p>这里参考的是 <a href="http://www.a-ho.com/2016/01/16/%E6%89%93%E9%80%A0Linux-%E7%BB%88%E7%AB%AF%E7%BF%BB%E5%A2%99%E7%8E%AF%E5%A2%83/" target="_blank" rel="noopener">打造Linux 终端翻墙环境</a>  使用 <code>shadowsocks + privoxy</code> 。</p><h2 id="2-换源解决！"><a href="#2-换源解决！" class="headerlink" title="2). 换源解决！"></a>2). 换源解决！</h2><p>Docs 里已经有声明其实：</p><p><img src="/images/2018-11-19/3.png" alt=""></p><ul><li>首先，添加信任 GitLab 里的 GPG 公钥：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://packages.gitlab.com/gpg.key 2&gt; /dev/null | sudo apt-key add - &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure><ul><li>然后把 <code>/etc/apt/sources.list.d/gitlab_gitlab-ce.list</code> 文件中默认的源换成 <em>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu</a> trusty main</em></li></ul><p><img src="/images/2018-11-19/4.png" alt=""></p><ul><li>最后：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update</span><br><span class="line">sudo apt-get install gitlab-ce</span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote><p>安装完成！</p></blockquote></blockquote></blockquote><h1 id="对于更新版本跨度较大的情况"><a href="#对于更新版本跨度较大的情况" class="headerlink" title="对于更新版本跨度较大的情况"></a>对于更新版本跨度较大的情况</h1><h2 id="1-关闭部分gitlab服务"><a href="#1-关闭部分gitlab服务" class="headerlink" title="1). 关闭部分gitlab服务"></a>1). 关闭部分gitlab服务</h2><p>升级之前，我们首先要关闭gitlab部分服务，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl stop unicorn</span><br><span class="line">gitlab-ctl stop sidekiq</span><br><span class="line">gitlab-ctl stop nginx</span><br></pre></td></tr></table></figure><h2 id="2-选择要升级的版本"><a href="#2-选择要升级的版本" class="headerlink" title="2). 选择要升级的版本"></a>2). 选择要升级的版本</h2><p><a href="https://packages.gitlab.com/gitlab/gitlab-ce?filter=debs" target="_blank" rel="noopener">版本查看地址</a></p><p>然后执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install gitlab-ce=11.0.3-ce.0</span><br></pre></td></tr></table></figure><p>其中<code>11.0.3</code>替换为你要升级的版本号。</p><p><strong>ps:版本跨度过大，请务必一个小版本一个小版本的更新</strong></p><p>另外，附上一次成功的更新过程对应的版本号：</p><p><code>9.2.5--&gt;9.5.6--&gt;10.0.6--&gt;10.8.5--&gt;11.0.3</code></p><h2 id="3-重启gitlab"><a href="#3-重启gitlab" class="headerlink" title="3). 重启gitlab"></a>3). 重启gitlab</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h1><ol><li><a href="http://www.a-ho.com/2016/01/16/%E6%89%93%E9%80%A0Linux-%E7%BB%88%E7%AB%AF%E7%BF%BB%E5%A2%99%E7%8E%AF%E5%A2%83/" target="_blank" rel="noopener">http://www.a-ho.com/2016/01/16/%E6%89%93%E9%80%A0Linux-%E7%BB%88%E7%AB%AF%E7%BF%BB%E5%A2%99%E7%8E%AF%E5%A2%83/</a></li><li><a href="https://about.gitlab.com/downloads/#ubuntu1404" target="_blank" rel="noopener">https://about.gitlab.com/downloads/#ubuntu1404</a></li><li><a href="https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/" target="_blank" rel="noopener">https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/</a></li><li><a href="http://docs.gitlab.com/omnibus/update/README.html" target="_blank" rel="noopener">http://docs.gitlab.com/omnibus/update/README.html</a></li><li><a href="https://about.gitlab.com/upgrade-to-package-repository/" target="_blank" rel="noopener">https://about.gitlab.com/upgrade-to-package-repository/</a></li><li><a href="https://packages.gitlab.com/gitlab/gitlab-ce/packages/ubuntu/trusty/gitlab-ce_8.9.5-ce.0_amd64.deb" target="_blank" rel="noopener">https://packages.gitlab.com/gitlab/gitlab-ce/packages/ubuntu/trusty/gitlab-ce_8.9.5-ce.0_amd64.deb</a></li><li><a href="https://www.ilanni.com/?p=13917" target="_blank" rel="noopener">https://www.ilanni.com/?p=13917</a></li><li><a href="https://www.58jb.com/html/189.html" target="_blank" rel="noopener">https://www.58jb.com/html/189.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      GitLab升级
    
    </summary>
    
      <category term="GitLab" scheme="http://blog.breakering.com/categories/GitLab/"/>
    
    
      <category term="GitLab" scheme="http://blog.breakering.com/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>GitLab备份与恢复</title>
    <link href="http://blog.breakering.com/2018/11/19/GitLab%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
    <id>http://blog.breakering.com/2018/11/19/GitLab备份与恢复/</id>
    <published>2018-11-19T08:15:50.000Z</published>
    <updated>2018-11-19T08:18:32.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-备份gitlab"><a href="#一、-备份gitlab" class="headerlink" title="一、 备份gitlab"></a>一、 备份gitlab</h1><p>gitlab的备份比较简单，我们直接使用gitlab本身提供的命令进行备份即可。</p><h2 id="1-1-通过gitlab-rake命令备份gitlab"><a href="#1-1-通过gitlab-rake命令备份gitlab" class="headerlink" title="1.1 通过gitlab-rake命令备份gitlab"></a>1.1 通过gitlab-rake命令备份gitlab</h2><p>gitlab提供的备份命令为gitlab-rake，备份命令使用如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><p>该命令会备份gitlab仓库、数据库、用户、用户组、用户密钥、权限等信息。</p><p>备份完成后备份文件会出现在<code>/var/opt/gitlab/backups/</code><br><img src="/images/2018-11-19/1.png" alt=""></p><p>当然备份的位置可以更换,使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure><p><img src="/images/2018-11-19/2.png" alt=""></p><p>修改上图<code>backup_path</code>的值即可，之后使用<code>gitlab-ctl reconfigure</code>使得配置生效</p><p><strong>ps：备份文件的名称中1537261122_2018_09_18_9.2.5是此次备份的编号。该编号我们会在后续恢复gitlab数据使用到。</strong></p><h2 id="1-2-定时备份gitlab"><a href="#1-2-定时备份gitlab" class="headerlink" title="1.2 定时备份gitlab"></a>1.2 定时备份gitlab</h2><p>如果要使ｇitlab自动进行备份的话，我们可以通过crontab命令来实现自动备份。强烈建议使用系统crontab命令，而不是用户crontab。</p><p>以实现每天凌晨4点进行一次自动备份为例，系统的crontab配置如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/crontab</span><br></pre></td></tr></table></figure><p><code>0 4 * * * root /opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1</code></p><p>然后重启crontab服务，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart crond</span><br></pre></td></tr></table></figure><h2 id="1-3-保留部分备份文件"><a href="#1-3-保留部分备份文件" class="headerlink" title="1.3 保留部分备份文件"></a>1.3 保留部分备份文件</h2><p>随着时间的推移gitlab备份文件越来越多，服务器的磁盘空间也不够大。</p><p>此时我们就要删除部分旧的备份文件，gitlab也提供了删除旧的备份文件功能。该功能在gitlab的配置文件中，进行配置即可。</p><p>在此以保留7天之前的备份文件为例，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure><p><code>gitlab_rails[‘backup_keep_time’] = 604800</code></p><p>其中backup_keep_time是以秒为单位进行计算的，然后执行命令<code>gitlab-ctl reconfigure</code>即可。</p><h1 id="二、gitlab仓库恢复"><a href="#二、gitlab仓库恢复" class="headerlink" title="二、gitlab仓库恢复"></a>二、gitlab仓库恢复</h1><p>要验证gitlab备份的有效性，我们可以把该备份文件复制到已经安装好gitlab服务器的/var/opt/gitlab/backups/目录下。然后进行数据恢复，最后访问并查看其数据完整性即可。</p><p>通过gitlab备份文件可以恢复gitlab所有的信息，包括仓库、数据库、用户、用户组、用户密钥、权限等信息。</p><p><strong>ps：新服务器上的gitlab的版本号必须与创建备份时的gitlab版本号相同。</strong></p><p>gitlab数据恢复比较简单，具体步骤如下：</p><h2 id="2-1-停止相关数据连接服务"><a href="#2-1-停止相关数据连接服务" class="headerlink" title="2.1 停止相关数据连接服务"></a>2.1 停止相关数据连接服务</h2><p>在gitlab服务器上停止相关数据连接服务，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl stop unicorn</span><br><span class="line">gitlab-ctl stop sidekiq</span><br></pre></td></tr></table></figure><h2 id="2-2-恢复gitlab仓库"><a href="#2-2-恢复gitlab仓库" class="headerlink" title="2.2 恢复gitlab仓库"></a>2.2 恢复gitlab仓库</h2><p>现在我们要从1537261122_2018_09_18_9.2.5这个备份编号中，恢复数据，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:restore BACKUP=1537261122_2018_09_18_9.2.5</span><br></pre></td></tr></table></figure><p>如果出现多个done的信息，说明整个gitlab数据就已经正常恢复完毕。</p><h2 id="2-3-启动gitlab服务"><a href="#2-3-启动gitlab服务" class="headerlink" title="2.3 启动gitlab服务"></a>2.3 启动gitlab服务</h2><p>恢复完毕以后，我们现在来启动gitlab，使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl start</span><br></pre></td></tr></table></figure><p><strong>强烈建议：重启该新服务器。</strong></p><h1 id="三、References"><a href="#三、References" class="headerlink" title="三、References:"></a>三、References:</h1><ol><li><a href="https://www.ilanni.com/?p=13890" target="_blank" rel="noopener">gitlab的备份与恢复</a></li></ol>]]></content>
    
    <summary type="html">
    
      GitLab备份与恢复
    
    </summary>
    
      <category term="GitLab" scheme="http://blog.breakering.com/categories/GitLab/"/>
    
    
      <category term="GitLab" scheme="http://blog.breakering.com/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>使用pipenv管理python项目</title>
    <link href="http://blog.breakering.com/2018/11/19/%E4%BD%BF%E7%94%A8pipenv%E7%AE%A1%E7%90%86python%E9%A1%B9%E7%9B%AE/"/>
    <id>http://blog.breakering.com/2018/11/19/使用pipenv管理python项目/</id>
    <published>2018-11-19T06:19:10.000Z</published>
    <updated>2018-11-19T07:27:42.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装pipenv"><a href="#安装pipenv" class="headerlink" title="安装pipenv"></a>安装pipenv</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipenv</span><br></pre></td></tr></table></figure><h2 id="进入你的project目录，并install"><a href="#进入你的project目录，并install" class="headerlink" title="进入你的project目录，并install"></a>进入你的project目录，并install</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd your_project</span><br><span class="line">pipenv install</span><br></pre></td></tr></table></figure><p><code>pipenv install</code>将在项目目录中创建两个新文件Pipfile和Pipfile.lock，如果项目不存在，则为项目创建一个新的虚拟环境。 如果你添加–two或–three标志到上面的最后一个命令，它分别使用Python 2或3来初始化你的项目。 否则将使用默认版本的Python。</p><p>ps:有可能会出现如下错误，应该是pyenv造成的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  File &quot;/usr/lib/python3.7/site-packages/pipenv/vendor/pythonfinder/models/python.py&quot;, line 70, in get_version_order</span><br><span class="line">    version_order = [versions[v] for v in parse_pyenv_version_order()]</span><br><span class="line">TypeError: &apos;NoneType&apos; object is not iterable</span><br></pre></td></tr></table></figure><p>这时可以使用下面的命令解决:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv global 3.7.1</span><br></pre></td></tr></table></figure><blockquote><p><code>3.7.1换成你用pyenv安装过的环境</code></p></blockquote><h2 id="管理Python依赖关系"><a href="#管理Python依赖关系" class="headerlink" title="管理Python依赖关系"></a>管理Python依赖关系</h2><p>Pipfile包含关于项目的依赖包的信息，并取代通常在Python项目中使用的requirements.txt文件。 如果你在具有requirements.txt文件的项目中启动了Pipenv，则在把它从项目中删除之前，应该使用Pipenv安装该文件中列出的所有依赖包。</p><p>要为你的项目安装Python包，请使用install关键字。 例如，</p><p><code>pipenv install requests</code>将安装当前版本的<code>requests</code>包。 可以使用uninstall关键字以类似的方式删除包;</p><p><code>pipenv uninstall requests</code>将安装当前版本的<code>requests</code>包。 可以通过更新Pipfile.lock来冻结软件包名称及其版本以及其自己的依赖关系的列表。 这是使用lock关键字完成的;</p><p><code>pipenv lock</code>如果另一个用户克隆存储库，可以添加Pipfiles到你的Git存储库，</p><p>这样他们只需要在他们的系统中安装Pipenv，然后键入<code>pipenv install</code>Pipenv会自动找到Pipfiles，创建一个新的虚拟环境，并安装必要的软件包。</p><h2 id="管理你的开发环境"><a href="#管理你的开发环境" class="headerlink" title="管理你的开发环境"></a>管理你的开发环境</h2><p>通常有一些Python包只在你的开发环境中需要，而不是在你的生产环境中，例如单元测试包。 Pipenv将使用–dev标志保持两个环境分开。 例如，</p><p><code>pipenv install --dev ipython</code>将安装ipython，但也将其关联为只在你的开发环境中需要的软件包。 这很有用，因为现在，如果你要在你的生产环境中安装你的项目，</p><p><code>pipenv install</code>默认情况下不会安装ipython包。 但是，如果另一个开发人员将你的项目克隆到自己的开发环境中，他们可以使用–dev标志，</p><p><code>pipenv install –dev</code>安装所有依赖项，包括开发包。</p><h2 id="激活开发环境"><a href="#激活开发环境" class="headerlink" title="激活开发环境"></a>激活开发环境</h2><p><code>pipenv shell</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>pipenv</code>使得开发和管理项目包的过程变成的简单，让我们尽早使用起来吧。</p>]]></content>
    
    <summary type="html">
    
      使用pipenv管理python项目
    
    </summary>
    
      <category term="Python" scheme="http://blog.breakering.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://blog.breakering.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Django常见错误解决办法</title>
    <link href="http://blog.breakering.com/2018/11/19/Django%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://blog.breakering.com/2018/11/19/Django常见错误解决办法/</id>
    <published>2018-11-19T06:10:51.000Z</published>
    <updated>2018-11-19T07:27:42.452Z</updated>
    
    <content type="html"><![CDATA[<ol><li>ProgrammingError: relation “default_cache_table” does not exist</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">django.db.utils.ProgrammingError: relation &quot;default_cache_table&quot; does not exist</span><br><span class="line">LINE 1: SELECT cache_key, value, expires FROM &quot;default_cache_table&quot; WHERE ca...</span><br></pre></td></tr></table></figure><p>类似上述这种错误，可以用下面这句命令解决:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createcachetable</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Django常见错误解决办法
    
    </summary>
    
      <category term="Django" scheme="http://blog.breakering.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://blog.breakering.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL允许被远程访问</title>
    <link href="http://blog.breakering.com/2018/11/19/PostgreSQL%E5%85%81%E8%AE%B8%E8%A2%AB%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/"/>
    <id>http://blog.breakering.com/2018/11/19/PostgreSQL允许被远程访问/</id>
    <published>2018-11-19T06:00:41.000Z</published>
    <updated>2018-11-19T07:27:42.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-修改postgresql-conf"><a href="#1-修改postgresql-conf" class="headerlink" title="1.修改postgresql.conf"></a>1.修改postgresql.conf</h2><p><code>postgresql.conf</code>存放位置在<code>/etc/postgresql/9.x/main</code>下，这里的<code>x</code>取决于你安装PostgreSQL的版本号，编辑或添加下面一行，使PostgreSQL可以接受来自任意IP的连接请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen_addresses = &apos;*&apos;</span><br></pre></td></tr></table></figure><h2 id="2-修改pg-hba-conf"><a href="#2-修改pg-hba-conf" class="headerlink" title="2.修改pg_hba.conf"></a>2.修改pg_hba.conf</h2><p><code>修改pg_hba.conf</code>位置与<code>postgresql.conf</code>相同，虽然上面配置允许任意地址连接PostgreSQL，但是这在pg中还不够，我们还需在<code>pg_hba.conf</code>中配置服务端允许的认证方式。任意编辑器打开该文件，编辑或添加下面一行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># TYPE  DATABASE  USER  CIDR-ADDRESS  METHOD</span><br><span class="line">host  all  all 0.0.0.0/0 md5</span><br></pre></td></tr></table></figure><p>默认pg只允许本机通过密码认证登录，修改为上面内容后即可以对任意IP访问进行密码验证。对照上面的注释可以很容易搞明白每列的含义，具体的支持项可以查阅文末参考引用。</p><p>完成上两项配置后执行<code>sudo service postgresql restart</code>重启PostgreSQL服务后，允许外网访问的配置就算生效了。</p>]]></content>
    
    <summary type="html">
    
      PostgreSQL允许被远程访问
    
    </summary>
    
      <category term="PostgreSQL" scheme="http://blog.breakering.com/categories/PostgreSQL/"/>
    
    
      <category term="PostgreSQL" scheme="http://blog.breakering.com/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>django-celery实现定时任务</title>
    <link href="http://blog.breakering.com/2018/11/16/django-celery%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://blog.breakering.com/2018/11/16/django-celery实现定时任务/</id>
    <published>2018-11-16T09:11:53.000Z</published>
    <updated>2018-11-26T07:01:24.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>我们知道celery可以直接用在django项目中，但是配置稍微繁琐，还有添加定时任务需要重启celery beat进程，实在蛋疼，好在找到了<code>django-celery</code>这个模块，话不多说，让我们用起来吧。</p><h2 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h2><p>安装还是很简单的，直接pip即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-clery</span><br></pre></td></tr></table></figure><blockquote><p>此时会将一些依赖库一并安装，比如celery等</p></blockquote><p>接下来是django项目中的配置，在settings中配置如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># INSTALLED_APPS中加入djcelery</span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ....</span><br><span class="line">    &apos;djcelery&apos;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 配置djcelery相关参数，ResultStore默认存储在数据库可不必重写 ，</span><br><span class="line">djcelery.setup_loader()</span><br><span class="line">BROKER_URL = &apos;redis://127.0.0.1:6379/8&apos;  # 配置你的redis地址和库</span><br><span class="line"># 使用和Django一样的时区</span><br><span class="line">CELERY_TIMEZONE = TIME_ZONE</span><br><span class="line"></span><br><span class="line"># 以上为基本配置，以下为周期性任务定义</span><br><span class="line">CELERYBEAT_SCHEDULER = &apos;djcelery.schedulers.DatabaseScheduler&apos;</span><br></pre></td></tr></table></figure><p>同步数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h2 id="创建task"><a href="#创建task" class="headerlink" title="创建task"></a>创建task</h2><p>在你的app下面创建一个<code>tasks.py</code>文件，文件名必须一致，<code>django-celery</code>默认情况下会自动从各个app中寻找该模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> task</span><br><span class="line"></span><br><span class="line"><span class="meta">@task()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_msg</span><span class="params">(msg)</span>:</span></span><br><span class="line">    print(msg)</span><br></pre></td></tr></table></figure><blockquote><p>注意：task装饰器的<code>name</code>参数最好和函数名一致或者干脆不指定;最好不指定，这样下方分发任务时好统一处理。</p></blockquote><h2 id="创建定时任务"><a href="#创建定时任务" class="headerlink" title="创建定时任务"></a>创建定时任务</h2><p>接下来我们就可以在Django admin中创建定时任务了</p><p><img src="/images/2018-11-16/QQ20170613-215907.jpg" alt=""><br><img src="/images/2018-11-16/QQ20170613-220348.jpg" alt=""></p><h2 id="启动beat和worker"><a href="#启动beat和worker" class="headerlink" title="启动beat和worker"></a>启动beat和worker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py celery worker -l info</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py celery beat</span><br></pre></td></tr></table></figure><p>之后就可以观察日志了，另外可以使用<code>supervisor</code>来管理这两个进程。</p><h2 id="利用queue分发任务"><a href="#利用queue分发任务" class="headerlink" title="利用queue分发任务"></a>利用queue分发任务</h2><p>在settings中增加如下配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 定义任务对应的queue</span><br><span class="line">class TasksRouter(object):</span><br><span class="line">    @classmethod</span><br><span class="line">    def route_for_task(cls, task, args=None, kwargs=None):</span><br><span class="line">        task_routes = &#123;</span><br><span class="line">            &apos;algorithm.product.tasks.*&apos;: &#123;&apos;queue&apos;: &apos;product&apos;&#125;,</span><br><span class="line">            &apos;algorithm.material.tasks.*&apos;: &#123;&apos;queue&apos;: &apos;material&apos;&#125;,</span><br><span class="line">        &#125;</span><br><span class="line">        for route_key in task_routes:</span><br><span class="line">            if re.search(route_key, task):</span><br><span class="line">                return task_routes[route_key]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CELERY_ROUTES = (TasksRouter(), )</span><br></pre></td></tr></table></figure><p>配置完成之后，启动beat和worker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py celery beat</span><br></pre></td></tr></table></figure><p>beat会实时检测任务的变化，在django admin界面对任务进行操作，均会刷新该进程，使得分派任务变得非常简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py celery worker -Q product</span><br></pre></td></tr></table></figure><p>上述命令启动的worker只会监测并执行<code>product</code>这个queue中的任务，即只执行<code>algorithm.product.tasks</code>下面的任务。同理<code>python manage.py celery worker -Q material</code>只执行<code>algorithm.material.tasks</code>下面的任务。</p><p>另外queue可以添加多个,例如<code>python manage.py celery worker -Q product,material</code>。</p><p>若要不区分queue执行所有任务，只需<code>python manage.py celery worker</code>即可,但不推荐,开启任务分发之后，最好分开执行，日志方面也更好排查。</p>]]></content>
    
    <summary type="html">
    
      使用django-celery实现定时任务，可以不用重启celery beat进程
    
    </summary>
    
      <category term="Django" scheme="http://blog.breakering.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://blog.breakering.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Linux在局域网如何通过hostname获取其ip</title>
    <link href="http://blog.breakering.com/2018/11/16/Linux%E5%9C%A8%E5%B1%80%E5%9F%9F%E7%BD%91%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87hostname%E8%8E%B7%E5%8F%96%E5%85%B6ip/"/>
    <id>http://blog.breakering.com/2018/11/16/Linux在局域网如何通过hostname获取其ip/</id>
    <published>2018-11-16T09:02:52.000Z</published>
    <updated>2018-11-19T07:27:42.376Z</updated>
    
    <content type="html"><![CDATA[<h3 id="只需要hostname固定，就可以在局域网通过ping-hostname-local来获取其ip"><a href="#只需要hostname固定，就可以在局域网通过ping-hostname-local来获取其ip" class="headerlink" title="只需要hostname固定，就可以在局域网通过ping hostname.local来获取其ip"></a>只需要hostname固定，就可以在局域网通过ping hostname.local来获取其ip</h3><p><img src="/images/2018-11-16/1046366-20181009112517884-381181059.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      Linux在局域网如何通过hostname获取其ip
    
    </summary>
    
      <category term="Linux" scheme="http://blog.breakering.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://blog.breakering.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>在Django中实现queryset级别缓存</title>
    <link href="http://blog.breakering.com/2018/11/16/%E5%9C%A8Django%E4%B8%AD%E5%AE%9E%E7%8E%B0queryset%E7%BA%A7%E5%88%AB%E7%BC%93%E5%AD%98/"/>
    <id>http://blog.breakering.com/2018/11/16/在Django中实现queryset级别缓存/</id>
    <published>2018-11-16T03:50:19.000Z</published>
    <updated>2018-11-19T07:27:42.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>实现queryset级别的缓存，不是view层面的，相当于缓存sql查询结果。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="首先在你的django项目中安装依赖的模块"><a href="#首先在你的django项目中安装依赖的模块" class="headerlink" title="首先在你的django项目中安装依赖的模块"></a>首先在你的django项目中安装依赖的模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-cache-machine</span><br></pre></td></tr></table></figure><h3 id="创建queryset-cache-py文件-文件内容如下"><a href="#创建queryset-cache-py文件-文件内容如下" class="headerlink" title="创建queryset_cache.py文件,文件内容如下"></a>创建queryset_cache.py文件,文件内容如下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__ = "Breakering"</span></span><br><span class="line"><span class="comment"># Date: 18-8-29</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">依赖django-cache-machine，并在此基础上实现了轻松切换使用queryset级别缓存以及count等缓存</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> caching <span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> caching.base <span class="keyword">import</span> CachingQuerySet, cached_with</span><br><span class="line"><span class="keyword">from</span> django.db.models.sql <span class="keyword">import</span> query</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">queryset_cache_decorator</span><span class="params">(always_cached=True)</span>:</span></span><br><span class="line">    <span class="string">"""queryset级别缓存的装饰器，可以使得queryset直接从缓存中获取数据"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">            queryset = func(self, *args, **kwargs)</span><br><span class="line">            <span class="keyword">if</span> always_cached:  <span class="comment"># 此装饰器默认从cache中获取数据</span></span><br><span class="line">                queryset = queryset.from_cache()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">with</span> contextlib.suppress(Exception):</span><br><span class="line">                    queryset_cache_time = self.request.query_params.get(<span class="string">'queryset_cache_time'</span>, <span class="string">''</span>)</span><br><span class="line">                    <span class="keyword">if</span> queryset_cache_time <span class="keyword">and</span> queryset_cache_time.isdigit():</span><br><span class="line">                        queryset = queryset.from_cache(int(queryset_cache_time))</span><br><span class="line">            <span class="keyword">return</span> queryset</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">queryset_cache_count_decorator</span><span class="params">(always_cached=True)</span>:</span></span><br><span class="line">    <span class="string">"""queryset count缓存的装饰器，可以使得queryset直接从缓存中获取count的值"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">            queryset = func(self, *args, **kwargs)</span><br><span class="line">            <span class="keyword">if</span> always_cached:  <span class="comment"># 此装饰器默认从cache中获取数据</span></span><br><span class="line">                queryset = queryset.cache_count()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">with</span> contextlib.suppress(Exception):</span><br><span class="line">                    queryset_cache_time = self.request.query_params.get(<span class="string">'queryset_cache_time'</span>, <span class="string">''</span>)</span><br><span class="line">                    <span class="keyword">if</span> queryset_cache_time <span class="keyword">and</span> queryset_cache_time.isdigit():</span><br><span class="line">                        queryset = queryset.cache_count(int(queryset_cache_time))</span><br><span class="line">            <span class="keyword">return</span> queryset</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CachedQuerySet</span><span class="params">(CachingQuerySet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return queryset from cache if query_key in cache</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super(CachedQuerySet, self).__init__(*args, **kwargs)</span><br><span class="line">        self.timeout = config.NO_CACHE  <span class="comment"># 默认直接从数据库取数据</span></span><br><span class="line">        self.cache_count_timeout = config.NO_CACHE  <span class="comment"># 自定义queryset count的缓存时间</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_clone</span><span class="params">(self, *args, **kw)</span>:</span></span><br><span class="line">        qs = super(CachedQuerySet, self)._clone(*args, **kw)</span><br><span class="line">        qs.cache_count_timeout = self.cache_count_timeout</span><br><span class="line">        <span class="keyword">return</span> qs</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_cache</span><span class="params">(self, timeout=<span class="number">60</span>*<span class="number">60</span>)</span>:</span></span><br><span class="line">        <span class="string">"""在queryset中调用此函数则是从缓存中获取,且调用之后返回的仍是queryset"""</span></span><br><span class="line">        self.timeout = timeout</span><br><span class="line">        <span class="keyword">return</span> self._clone()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cache_count</span><span class="params">(self, cache_count_timeout=<span class="number">60</span>*<span class="number">60</span>)</span>:</span></span><br><span class="line">        <span class="string">"""实现queryset count的缓存,且调用之后返回的仍是queryset"""</span></span><br><span class="line">        self.cache_count_timeout = cache_count_timeout</span><br><span class="line">        <span class="keyword">return</span> self._clone()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># todo values目前的实现方式有BUG，现已取消</span></span><br><span class="line">    <span class="comment"># def values(self, *fields, **expressions):</span></span><br><span class="line">    <span class="comment">#     """rewrite queryset's values"""</span></span><br><span class="line">    <span class="comment">#     if self.timeout == config.NO_CACHE:  # 默认情况下values直接从数据库获取数据</span></span><br><span class="line">    <span class="comment">#         return super(CachedQuerySet, self).values(*fields, **expressions)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#     clone = self._clone()</span></span><br><span class="line">    <span class="comment">#     clone.query.set_values(fields)</span></span><br><span class="line">    <span class="comment">#     key = make_key('values:&#123;key&#125;'.format(key=clone.query_key()))</span></span><br><span class="line">    <span class="comment">#     val = cache.get(key)</span></span><br><span class="line">    <span class="comment">#     if val is None:</span></span><br><span class="line">    <span class="comment">#         val = super(CachedQuerySet, self).values(*fields, **expressions)</span></span><br><span class="line">    <span class="comment">#         cache.set(key, val, self.timeout)</span></span><br><span class="line">    <span class="comment">#     return val</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""自定义queryset的count"""</span></span><br><span class="line">        super_count = super(CachingQuerySet, self).count</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            query_string = <span class="string">'count:%s'</span> % self.query_key()</span><br><span class="line">        <span class="keyword">except</span> query.EmptyResultSet:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> self.cache_count_timeout:</span><br><span class="line">            <span class="keyword">return</span> cached_with(self, super_count, query_string, self.cache_count_timeout)</span><br><span class="line">        <span class="keyword">elif</span> self.timeout == config.NO_CACHE <span class="keyword">or</span> config.TIMEOUT == config.NO_CACHE:</span><br><span class="line">            <span class="keyword">return</span> super_count()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> cached_with(self, super_count, query_string, config.TIMEOUT)</span><br></pre></td></tr></table></figure><h3 id="改造您的model"><a href="#改造您的model" class="headerlink" title="改造您的model"></a>改造您的model</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> queryset_cache <span class="keyword">import</span> CachedQuerySet</span><br><span class="line"><span class="keyword">from</span> caching.base <span class="keyword">import</span> CachingMixin</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelClassManger</span><span class="params">(models.Manager)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> CachedQuerySet(self.model)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelClass</span><span class="params">(CachingMixin, models.Model)</span>:</span></span><br><span class="line">    objects = ModelClassManger()</span><br></pre></td></tr></table></figure><h3 id="view层只需在get-queryset上加上装饰器即可"><a href="#view层只需在get-queryset上加上装饰器即可" class="headerlink" title="view层只需在get_queryset上加上装饰器即可"></a>view层只需在get_queryset上加上装饰器即可</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@queryset_cache_count_decorator()</span></span><br><span class="line"><span class="meta">@queryset_cache_decorator()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>如果添加了always_cached=False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@queryset_cache_count_decorator(always_cached=False)</span></span><br><span class="line"><span class="meta">@queryset_cache_decorator(always_cached=False)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>则需要在query参数中加上queryset_cache_time=180,参数后面的数字即为缓存的时间。</p>]]></content>
    
    <summary type="html">
    
      django中实现queryset级别缓存
    
    </summary>
    
      <category term="Django" scheme="http://blog.breakering.com/categories/Django/"/>
    
    
      <category term="Django" scheme="http://blog.breakering.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Hexo同步</title>
    <link href="http://blog.breakering.com/2018/11/15/Hexo%E5%90%8C%E6%AD%A5/"/>
    <id>http://blog.breakering.com/2018/11/15/Hexo同步/</id>
    <published>2018-11-15T07:27:52.000Z</published>
    <updated>2018-11-19T07:27:42.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>用来生成静态页面, 到<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js官网</a>，下载最新版本, 根据提示一路安装即可</p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>当Node.js和Git都安装好后就可以正式安装Hexo了，终端执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo</span><br></pre></td></tr></table></figure><h3 id="克隆hexo分支"><a href="#克隆hexo分支" class="headerlink" title="克隆hexo分支"></a>克隆hexo分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b hexo https://github.com/Breakering/breakering.github.io.git</span><br></pre></td></tr></table></figure><h3 id="进入breakering-github-io-git"><a href="#进入breakering-github-io-git" class="headerlink" title="进入breakering.github.io.git"></a>进入breakering.github.io.git</h3><p>创建博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &apos;博客名&apos;</span><br></pre></td></tr></table></figure><p>发表博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><h3 id="主题配置更新相关"><a href="#主题配置更新相关" class="headerlink" title="主题配置更新相关"></a>主题配置更新相关</h3><p>需要先清空缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>然后进行部署操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><h3 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h3><ol><li>报错一: 若执行命令hexo deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol start="2"><li>报错二: 若执行命令hexo d报以下错误:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR Plugin load failed: hexo-server </span><br><span class="line">//或者类似的错误 </span><br><span class="line">ERROR Plugin load failed: hexo-renderer-sass</span><br></pre></td></tr></table></figure><p>则执行响应的命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-server</span><br><span class="line">//或者</span><br><span class="line">sudo npm install hexo-renderer-sass</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      其他电脑同步博客的方法!
    
    </summary>
    
      <category term="Hexo" scheme="http://blog.breakering.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://blog.breakering.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>内网穿透frp</title>
    <link href="http://blog.breakering.com/2018/09/28/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8Ffrp/"/>
    <id>http://blog.breakering.com/2018/09/28/内网穿透frp/</id>
    <published>2018-09-28T12:58:27.000Z</published>
    <updated>2018-11-19T07:27:42.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、内网穿透原理"><a href="#一、内网穿透原理" class="headerlink" title="一、内网穿透原理"></a>一、内网穿透原理</h1><p>简单地说，内网穿透依赖于 NAT 原理，根据 NAT 设备不同大致可分为以下 4 大类(前3种NAT类型可统称为cone类型)：</p><ul><li>全克隆(Full Cone)：NAT 把所有来自相同内部 IP 地址和端口的请求映射到相同的外部 IP 地址和端口上，任何一个外部主机均可通过该映射反向发送 IP 包到该内部主机</li><li>限制性克隆(Restricted Cone)：NAT 把所有来自相同内部 IP 地址和端口的请求映射到相同的外部 IP 地址和端口；但是，只有当内部主机先给 IP 地址为 X 的外部主机发送 IP 包时，该外部主机才能向该内部主机发送 IP 包</li><li>端口限制性克隆(Port Restricted Cone)：端口限制性克隆与限制性克隆类似，只是多了端口号的限制，即只有内部主机先向 IP 地址为 X，端口号为 P 的外部主机发送1个 IP 包,该外部主机才能够把源端口号为 P 的 IP 包发送给该内部主机</li><li>对称式NAT(Symmetric NAT)：这种类型的 NAT 与上述3种类型的不同，在于当同一内部主机使用相同的端口与不同地址的外部主机进行通信时， NAT 对该内部主机的映射会有所不同；对称式 NAT 不保证所有会话中的私有地址和公开 IP 之间绑定的一致性；相反，它为每个新的会话分配一个新的端口号；导致此种 NAT 根本没法穿透</li></ul><p>内网穿透的作用就是利用以上规则，创建一条从外部服务器到内部设备的 “隧道”，具体的 NAT 原理等可参考 内网打洞、网络地址转换NAT原理。</p><h1 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h1><p>实际上根据以上 NAT 规则，基本上大部分家用设备和运营商上级路由等都在前三种规则之中，所以只需要借助成熟的内网穿透工具即可，以下为本次穿透环境</p><ul><li>最新版本 frp</li><li>一台公网 VPS 服务器</li><li>内网一台服务器，最好 Linux 系统</li></ul><h1 id="三、服务端搭建"><a href="#三、服务端搭建" class="headerlink" title="三、服务端搭建"></a>三、服务端搭建</h1><p>服务器作为公网访问唯一的固定地址，即作为 server 端；内网客户端作为 client 端，会主动向 server 端创建连接，此时再从 server 端反向发送数据即可实现内网穿透</p><h2 id="3-1-下载并解压frp"><a href="#3-1-下载并解压frp" class="headerlink" title="3.1). 下载并解压frp"></a>3.1). 下载并解压frp</h2><p>可以查看<a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">releases</a>获取最新的版本,选好版本之后使用以下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_amd64.tar.gz</span><br><span class="line">tar -zxvf frp_0.21.0_linux_amd64.tar.gz</span><br><span class="line">cd frp_0.21.0_linux_amd64</span><br></pre></td></tr></table></figure><h2 id="3-2-编辑frps-ini"><a href="#3-2-编辑frps-ini" class="headerlink" title="3.2). 编辑frps.ini"></a>3.2). 编辑frps.ini</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[common]                                                                                                                                                                                                </span><br><span class="line"># frp 监听地址</span><br><span class="line">bind_addr = 0.0.0.0</span><br><span class="line">bind_port = 7000</span><br><span class="line"></span><br><span class="line"># 如果需要代理 web(http) 服务，则开启此端口</span><br><span class="line">vhost_http_port = 8080</span><br><span class="line">vhost_https_port = 4443</span><br><span class="line"></span><br><span class="line"># frp 控制面板</span><br><span class="line">dashboard_port = 7500</span><br><span class="line">dashboard_user = user</span><br><span class="line">dashboard_pwd = pwd</span><br><span class="line"></span><br><span class="line"># 默认日志输出位置(这里输出到标准输出)</span><br><span class="line">log_file = /tmp/frps.log</span><br><span class="line"># 日志级别，支持: debug, info, warn, error</span><br><span class="line">log_level = info</span><br><span class="line">log_max_days = 3</span><br><span class="line"></span><br><span class="line"># 是否开启特权模式(特权模式下，客户端更改配置无需更新服务端)</span><br><span class="line">privilege_mode = true</span><br><span class="line"># 授权 token 建议随机生成</span><br><span class="line">privilege_token = cc23*********************d072734</span><br><span class="line"># 特权模式下允许分配的端口(避免端口滥用)</span><br><span class="line">privilege_allow_ports = 4000-50000</span><br><span class="line"></span><br><span class="line"># 后端连接池最大连接数量</span><br><span class="line">max_pool_count = 100</span><br><span class="line"></span><br><span class="line"># 口令超时时间</span><br><span class="line">authentication_timeout = 900</span><br><span class="line"></span><br><span class="line"># 子域名(特权模式下将 *.xxxx.com 解析到公网服务器)</span><br><span class="line">subdomain_host = xxxx.com</span><br></pre></td></tr></table></figure><p><strong>其他具体配置说明请参考<a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">frp README</a> 文档</strong></p><h2 id="3-3-启动frp-server"><a href="#3-3-启动frp-server" class="headerlink" title="3.3). 启动frp server"></a>3.3). 启动frp server</h2><p>设置完成后执行 ./frps -c frps.ini 启动即可</p><p><strong>ps:当然也可以使用supervisor来管理</strong></p><h1 id="四、客户端配置"><a href="#四、客户端配置" class="headerlink" title="四、客户端配置"></a>四、客户端配置</h1><p>客户端作为发起链接的主动方，只需要正确配置服务器地址，以及要映射客户端的哪些服务端口等即可</p><h2 id="4-1-下载并解压frp"><a href="#4-1-下载并解压frp" class="headerlink" title="4.1). 下载并解压frp"></a>4.1). 下载并解压frp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_amd64.tar.gz</span><br><span class="line">tar -zxvf frp_0.21.0_linux_amd64.tar.gz</span><br><span class="line">cd frp_0.21.0_linux_amd64</span><br></pre></td></tr></table></figure><h2 id="4-2-编辑frpc-ini"><a href="#4-2-编辑frpc-ini" class="headerlink" title="4.2). 编辑frpc.ini"></a>4.2). 编辑frpc.ini</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 127.0.0.1</span><br><span class="line">server_port = 7000</span><br><span class="line"># console or real logFile path like ./frpc.log</span><br><span class="line">log_file = /tmp/frpc.log</span><br><span class="line"></span><br><span class="line"># debug, info, warn, error</span><br><span class="line">log_level = debug</span><br><span class="line"></span><br><span class="line">log_max_days = 3</span><br><span class="line"></span><br><span class="line"># 特权模式，要和服务器端的配置一致</span><br><span class="line">privilege_token = cc23*********************d072734</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[gitlab]</span><br><span class="line">type = http</span><br><span class="line">local_port = 8080</span><br><span class="line">subdomain = gitlab  # 这样只要访问http://gitlab.xxxx.com:8080即可访问到该客户端的gitlab服务</span><br><span class="line">use_gzip = true</span><br><span class="line"></span><br><span class="line">[gitlab_static_file]</span><br><span class="line">type = tcp</span><br><span class="line">remote_port = 8082</span><br><span class="line">plugin = static_file</span><br><span class="line"># 要对外暴露的文件目录</span><br><span class="line">plugin_local_path = /opt/gitlab/embedded/service/gitlab-rails/public/assets/</span><br><span class="line"># 访问 url 中会被去除的前缀，保留的内容即为要访问的文件路径</span><br><span class="line">plugin_strip_prefix = assets</span><br><span class="line">#plugin_http_user = abc</span><br><span class="line">#plugin_http_passwd = abc</span><br><span class="line"></span><br><span class="line">[gitlab_ssh]</span><br><span class="line">type = tcp </span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 8081</span><br></pre></td></tr></table></figure><p><strong>其他具体配置说明请参考<a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">frp README</a> 文档</strong></p><h2 id="4-3-启动frp-client"><a href="#4-3-启动frp-client" class="headerlink" title="4.3). 启动frp client"></a>4.3). 启动frp client</h2><p>设置完成后执行 ./frpc -c frpc.ini 启动即可</p><p><strong>ps:当然也可以使用supervisor来管理</strong></p><h1 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h1><p>服务端和客户端同时开启完成后，即可访问 <a href="http://127.0.0.1:7500" target="_blank" rel="noopener">http://127.0.0.1:7500</a> 进入 frp 控制面板，如下<br><img src="/images/1046366-20180927105622574-1652030646.png" alt=""><br><img src="/images/1046366-20180927105631267-34167117.png" alt=""><br>此时通过 ssh <a href="mailto:root@127.0.0.1" target="_blank" rel="noopener">root@127.0.0.1</a> -p 8081 即可ssh到gitlab，通过访问<a href="http://gitlab.xxxx.com:8080" target="_blank" rel="noopener">http://gitlab.xxxx.com:8080</a> 即可访问gitlab服务</p><h1 id="六、GitLab通过frp代理"><a href="#六、GitLab通过frp代理" class="headerlink" title="六、GitLab通过frp代理"></a>六、GitLab通过frp代理</h1><p>通过上述配置，确实可以通过 <a href="http://gitlab.xxxx.com:8080" target="_blank" rel="noopener">http://gitlab.xxxx.com:8080</a> 访问gitlab服务,但是你会发现缺少静态文件,因为gitlab的静态文件是nginx代理的，走的tcp协议,需要一种解决方案。</p><h2 id="方案一、使用frp的static-file的插件"><a href="#方案一、使用frp的static-file的插件" class="headerlink" title="方案一、使用frp的static_file的插件"></a>方案一、使用frp的static_file的插件</h2><p>虽然可以成功，通过 <a href="http://127.0.0.1:8082" target="_blank" rel="noopener">http://127.0.0.1:8082</a> 即可访问gitlab的静态文件，并且也可以通过nginx反向代理到gitlab.xxxx.com这个域名上，但是速度会很慢很慢,nginx配置如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;                                                                                                                                                                                                    </span><br><span class="line">    listen  80; </span><br><span class="line">    server_name  gitlab.xxxx.com;</span><br><span class="line">    location / &#123; </span><br><span class="line">        proxy_pass http://gitlab.xxxx.com:8080;</span><br><span class="line">    &#125;   </span><br><span class="line">    location /assets &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8082;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方案二、将gitlab静态文件移至服务器上，用nginx代理"><a href="#方案二、将gitlab静态文件移至服务器上，用nginx代理" class="headerlink" title="方案二、将gitlab静态文件移至服务器上，用nginx代理"></a>方案二、将gitlab静态文件移至服务器上，用nginx代理</h2><p>gitlab静态文件在如下位置<code>/opt/gitlab/embedded/service/gitlab-rails/public/assets/</code>放至服务器，并配置nginx如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;                                                                                                                                                                                                    </span><br><span class="line">    listen  80;</span><br><span class="line">    server_name  gitlab.xxxx.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://gitlab.xxxx.com:8080;</span><br><span class="line">    &#125;</span><br><span class="line">    location /assets &#123;</span><br><span class="line">        alias /webapps/gitlab/public/assets;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样即可通过 <a href="http://gitlab.xxxx.com" target="_blank" rel="noopener">http://gitlab.xxxx.com</a> 正常访问内网的gitlab了</p><p>但是这样还没结束，你会发现外网通过git clone <a href="http://gitlab.xxxx.com/zhuqian/licaishi.git" target="_blank" rel="noopener">http://gitlab.xxxx.com/zhuqian/licaishi.git</a> ,根本没法正常克隆仓库，那有啥用啊，别急，咋们还可以用ssh方式啊。</p><p>上面我们已经配置gitlab的22端口映射到服务器的8081端口了，所以可以这样克隆:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone ssh://git@127.0.0.1:8081/zhuqian/licaishi.git</span><br><span class="line"># 或者</span><br><span class="line">git clone ssh://git@gitlab.xxxx.com:8081/zhuqian/licaishi.git</span><br></pre></td></tr></table></figure><p>对于pip install的话，可以这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install git+ssh://git@127.0.0.1:8081/zhuqian/algorithm.git</span><br><span class="line"># 或者</span><br><span class="line">pip install git+ssh://git@gitlab.xxxx.com:8081/zhuqian/algorithm.git</span><br></pre></td></tr></table></figure><p>你以为就这样完了，还没有，我们想要直接能在gitlab项目首页直接能够显示git访问方法，效果如下:<br><img src="/images/1046366-20180927105727421-1721871308.png" alt=""></p><p>要实现此效果，只需配置下<code>/etc/gitlab/gitlab.rb</code>即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">external_url &apos;http://gitlab.xxxx.com&apos;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">gitlab_rails[&apos;gitlab_shell_ssh_port&apos;] = 8081</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>另外需要注意下<code>nginx[&#39;listen_addresses&#39;] = [&#39;192.168.10.60&#39;]</code>，需要对应到本地的ip地址</p></blockquote></blockquote><p>配置完之后:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p>然后通过域名访问gitlab即可实现上述效果了，只不过http方式目前还无法解决。</p><h1 id="七、由mtu引起的无法访问的问题"><a href="#七、由mtu引起的无法访问的问题" class="headerlink" title="七、由mtu引起的无法访问的问题"></a>七、由mtu引起的无法访问的问题</h1><p>如果frp的admin界面一切正常，但是就是无法获取数据</p><p><img src="/images/1046366-20180927105741148-1074788234.png" alt=""></p><p>那么极有可能是你本地的网络最大分片小于服务器的最大分片，导致数据无法发送出去,解决办法是减小服务器的mtu:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig eth0 mtu 1000 up</span><br></pre></td></tr></table></figure><p>其他修改mtu的方式请自行google。</p><h1 id="八、References"><a href="#八、References" class="headerlink" title="八、References:"></a>八、References:</h1><ol><li><a href="https://mritd.me/2017/01/21/use-frp-for-internal-network-wear/" target="_blank" rel="noopener">利用 frp 进行内网穿透</a></li></ol>]]></content>
    
    <summary type="html">
    
      简单地说，内网穿透依赖于 NAT 原理，根据 NAT 设备不同大致可分为以下 4 大类(前3种NAT类型可统称为cone类型)
    
    </summary>
    
      <category term="内网穿透" scheme="http://blog.breakering.com/categories/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo初识</title>
    <link href="http://blog.breakering.com/2018/09/28/Hexo%E5%88%9D%E8%AF%86/"/>
    <id>http://blog.breakering.com/2018/09/28/Hexo初识/</id>
    <published>2018-09-28T12:58:27.000Z</published>
    <updated>2018-11-19T09:01:03.573Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      简单介绍hexo的用法.
    
    </summary>
    
      <category term="Hexo" scheme="http://blog.breakering.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://blog.breakering.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
